
target_014_task_scheduler_blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001150  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080012e8  080012e8  000112e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001340  08001340  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08001340  08001340  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001340  08001340  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001340  08001340  00011340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001344  08001344  00011344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08001348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000060  080013a8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080013a8  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f0d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000594  00000000  00000000  00020fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000290  00000000  00000000  00021578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001d4  00000000  00000000  00021808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d30  00000000  00000000  000219dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ddf  00000000  00000000  0002470c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009e5e  00000000  00000000  000264eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f28  00000000  00000000  0003034c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00031274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000060 	.word	0x20000060
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080012d0 	.word	0x080012d0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000064 	.word	0x20000064
 80001d4:	080012d0 	.word	0x080012d0

080001d8 <main>:
} TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	printf("Hello\n");
 80001dc:	480a      	ldr	r0, [pc, #40]	; (8000208 <main+0x30>)
 80001de:	f000 fce3 	bl	8000ba8 <puts>

	Init_Onboard_LEDs();
 80001e2:	f000 fa4b 	bl	800067c <Init_Onboard_LEDs>

	Enable_Processor_Faults();
 80001e6:	f000 f867 	bl	80002b8 <Enable_Processor_Faults>

	Init_Scheduler_Stack(SCHED_STACK_START);
 80001ea:	4808      	ldr	r0, [pc, #32]	; (800020c <main+0x34>)
 80001ec:	f000 f8bc 	bl	8000368 <Init_Scheduler_Stack>

	Init_Task_Stacks();
 80001f0:	f000 f8c0 	bl	8000374 <Init_Task_Stacks>

	Init_Systick_Timer(TICK_HZ);
 80001f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f8:	f000 f87e 	bl	80002f8 <Init_Systick_Timer>

	Switch_To_PSP();
 80001fc:	f000 f93e 	bl	800047c <Switch_To_PSP>

	Task1_Handler();
 8000200:	f000 f80a 	bl	8000218 <Task1_Handler>

	/* Loop forever */
	for (;;)
 8000204:	e7fe      	b.n	8000204 <main+0x2c>
 8000206:	bf00      	nop
 8000208:	080012e8 	.word	0x080012e8
 800020c:	2001ec00 	.word	0x2001ec00

08000210 <Idle_Task>:
		;
}

void Idle_Task()
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	while (1)
 8000214:	e7fe      	b.n	8000214 <Idle_Task+0x4>
	...

08000218 <Task1_Handler>:
		;
}

void Task1_Handler()
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	uint32_t volatile timer = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
	while (1)
	{
		if (g_tick_count - timer >= 1000)
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <Task1_Handler+0x24>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	1ad3      	subs	r3, r2, r3
 800022a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800022e:	d3f8      	bcc.n	8000222 <Task1_Handler+0xa>
		{
			Green_LED_Toggle();
 8000230:	f000 fa80 	bl	8000734 <Green_LED_Toggle>
			timer = g_tick_count;
 8000234:	4b01      	ldr	r3, [pc, #4]	; (800023c <Task1_Handler+0x24>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	607b      	str	r3, [r7, #4]
		if (g_tick_count - timer >= 1000)
 800023a:	e7f2      	b.n	8000222 <Task1_Handler+0xa>
 800023c:	2000007c 	.word	0x2000007c

08000240 <Task2_Handler>:
		}
	}
}

void Task2_Handler()
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
	uint32_t volatile timer = 0;
 8000246:	2300      	movs	r3, #0
 8000248:	607b      	str	r3, [r7, #4]
	while (1)
	{
		if (g_tick_count - timer >= 500)
 800024a:	4b06      	ldr	r3, [pc, #24]	; (8000264 <Task2_Handler+0x24>)
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000256:	d3f8      	bcc.n	800024a <Task2_Handler+0xa>
		{
			Red_LED_Toggle();
 8000258:	f000 fa8c 	bl	8000774 <Red_LED_Toggle>
			timer = g_tick_count;
 800025c:	4b01      	ldr	r3, [pc, #4]	; (8000264 <Task2_Handler+0x24>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	607b      	str	r3, [r7, #4]
		if (g_tick_count - timer >= 500)
 8000262:	e7f2      	b.n	800024a <Task2_Handler+0xa>
 8000264:	2000007c 	.word	0x2000007c

08000268 <Task3_Handler>:
		}
	}
}

void Task3_Handler()
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
	uint32_t volatile timer = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	607b      	str	r3, [r7, #4]
	while (1)
	{
		if (g_tick_count - timer >= 250)
 8000272:	4b06      	ldr	r3, [pc, #24]	; (800028c <Task3_Handler+0x24>)
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	1ad3      	subs	r3, r2, r3
 800027a:	2bf9      	cmp	r3, #249	; 0xf9
 800027c:	d9f9      	bls.n	8000272 <Task3_Handler+0xa>
		{
			Orange_LED_Toggle();
 800027e:	f000 fa69 	bl	8000754 <Orange_LED_Toggle>
			timer = g_tick_count;
 8000282:	4b02      	ldr	r3, [pc, #8]	; (800028c <Task3_Handler+0x24>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	607b      	str	r3, [r7, #4]
		if (g_tick_count - timer >= 250)
 8000288:	e7f3      	b.n	8000272 <Task3_Handler+0xa>
 800028a:	bf00      	nop
 800028c:	2000007c 	.word	0x2000007c

08000290 <Task4_Handler>:
		}
	}
}

void Task4_Handler()
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	uint32_t volatile timer = 0;
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
	while (1)
	{
		if (g_tick_count - timer >= 125)
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <Task4_Handler+0x24>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	2b7c      	cmp	r3, #124	; 0x7c
 80002a4:	d9f9      	bls.n	800029a <Task4_Handler+0xa>
		{
			Blue_LED_Toggle();
 80002a6:	f000 fa75 	bl	8000794 <Blue_LED_Toggle>
			timer = g_tick_count;
 80002aa:	4b02      	ldr	r3, [pc, #8]	; (80002b4 <Task4_Handler+0x24>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	607b      	str	r3, [r7, #4]
		if (g_tick_count - timer >= 125)
 80002b0:	e7f3      	b.n	800029a <Task4_Handler+0xa>
 80002b2:	bf00      	nop
 80002b4:	2000007c 	.word	0x2000007c

080002b8 <Enable_Processor_Faults>:
		}
	}
}

void Enable_Processor_Faults()
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*) 0xE000ED24;
 80002be:	4b0d      	ldr	r3, [pc, #52]	; (80002f4 <Enable_Processor_Faults+0x3c>)
 80002c0:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16); // mem manage
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); // bus fault
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); // usage fault
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	601a      	str	r2, [r3, #0]
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000ed24 	.word	0xe000ed24

080002f8 <Init_Systick_Timer>:

void Init_Systick_Timer(uint32_t tick_hz)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b087      	sub	sp, #28
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	// SysTick Reload Value Register
	uint32_t volatile *const pSRVR = (uint32_t*) 0xE000E014;
 8000300:	4b16      	ldr	r3, [pc, #88]	; (800035c <Init_Systick_Timer+0x64>)
 8000302:	617b      	str	r3, [r7, #20]

	// SysTick Control and Status Register
	uint32_t volatile *const pSCSR = (uint32_t*) 0xE000E010;
 8000304:	4b16      	ldr	r3, [pc, #88]	; (8000360 <Init_Systick_Timer+0x68>)
 8000306:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 8000308:	4a16      	ldr	r2, [pc, #88]	; (8000364 <Init_Systick_Timer+0x6c>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000310:	3b01      	subs	r3, #1
 8000312:	60fb      	str	r3, [r7, #12]

	// Clear the value of pSRVR
	*pSRVR &= ~(0x00FFFFFF);
 8000314:	697b      	ldr	r3, [r7, #20]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800031c:	697b      	ldr	r3, [r7, #20]
 800031e:	601a      	str	r2, [r3, #0]

	// Load the reload value into pSRVR
	*pSRVR |= count_value;
 8000320:	697b      	ldr	r3, [r7, #20]
 8000322:	681a      	ldr	r2, [r3, #0]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	431a      	orrs	r2, r3
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	601a      	str	r2, [r3, #0]

	// Do some configuration
	*pSCSR |= (1 << 1);
 800032c:	693b      	ldr	r3, [r7, #16]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f043 0202 	orr.w	r2, r3, #2
 8000334:	693b      	ldr	r3, [r7, #16]
 8000336:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2);
 8000338:	693b      	ldr	r3, [r7, #16]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f043 0204 	orr.w	r2, r3, #4
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	601a      	str	r2, [r3, #0]

	// Enable the systick
	*pSCSR |= (1 << 0);
 8000344:	693b      	ldr	r3, [r7, #16]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f043 0201 	orr.w	r2, r3, #1
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	601a      	str	r2, [r3, #0]
}
 8000350:	bf00      	nop
 8000352:	371c      	adds	r7, #28
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	e000e014 	.word	0xe000e014
 8000360:	e000e010 	.word	0xe000e010
 8000364:	00f42400 	.word	0x00f42400

08000368 <Init_Scheduler_Stack>:

__attribute__((naked)) void Init_Scheduler_Stack(
		uint32_t const sched_top_of_stack)
{
 8000368:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP,%0"::"r"(sched_top_of_stack):);
 800036a:	f383 8808 	msr	MSP, r3

	// Return from function call ( main() )
	__asm volatile ("BX LR");
 800036e:	4770      	bx	lr
}
 8000370:	bf00      	nop
	...

08000374 <Init_Task_Stacks>:

void Init_Task_Stacks()
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0

	uint32_t *pPSP;

	user_tasks[0].psp_value = IDLE_STACK_START;
 800037a:	4b35      	ldr	r3, [pc, #212]	; (8000450 <Init_Task_Stacks+0xdc>)
 800037c:	4a35      	ldr	r2, [pc, #212]	; (8000454 <Init_Task_Stacks+0xe0>)
 800037e:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000380:	4b33      	ldr	r3, [pc, #204]	; (8000450 <Init_Task_Stacks+0xdc>)
 8000382:	4a35      	ldr	r2, [pc, #212]	; (8000458 <Init_Task_Stacks+0xe4>)
 8000384:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 8000386:	4b32      	ldr	r3, [pc, #200]	; (8000450 <Init_Task_Stacks+0xdc>)
 8000388:	4a34      	ldr	r2, [pc, #208]	; (800045c <Init_Task_Stacks+0xe8>)
 800038a:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 800038c:	4b30      	ldr	r3, [pc, #192]	; (8000450 <Init_Task_Stacks+0xdc>)
 800038e:	4a34      	ldr	r2, [pc, #208]	; (8000460 <Init_Task_Stacks+0xec>)
 8000390:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 8000392:	4b2f      	ldr	r3, [pc, #188]	; (8000450 <Init_Task_Stacks+0xdc>)
 8000394:	4a33      	ldr	r2, [pc, #204]	; (8000464 <Init_Task_Stacks+0xf0>)
 8000396:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = Idle_Task;
 8000398:	4b2d      	ldr	r3, [pc, #180]	; (8000450 <Init_Task_Stacks+0xdc>)
 800039a:	4a33      	ldr	r2, [pc, #204]	; (8000468 <Init_Task_Stacks+0xf4>)
 800039c:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = Task1_Handler;
 800039e:	4b2c      	ldr	r3, [pc, #176]	; (8000450 <Init_Task_Stacks+0xdc>)
 80003a0:	4a32      	ldr	r2, [pc, #200]	; (800046c <Init_Task_Stacks+0xf8>)
 80003a2:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = Task2_Handler;
 80003a4:	4b2a      	ldr	r3, [pc, #168]	; (8000450 <Init_Task_Stacks+0xdc>)
 80003a6:	4a32      	ldr	r2, [pc, #200]	; (8000470 <Init_Task_Stacks+0xfc>)
 80003a8:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = Task3_Handler;
 80003aa:	4b29      	ldr	r3, [pc, #164]	; (8000450 <Init_Task_Stacks+0xdc>)
 80003ac:	4a31      	ldr	r2, [pc, #196]	; (8000474 <Init_Task_Stacks+0x100>)
 80003ae:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = Task4_Handler;
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <Init_Task_Stacks+0xdc>)
 80003b2:	4a31      	ldr	r2, [pc, #196]	; (8000478 <Init_Task_Stacks+0x104>)
 80003b4:	64da      	str	r2, [r3, #76]	; 0x4c

	for (int i = 0; i < MAX_TASKS; i++)
 80003b6:	2300      	movs	r3, #0
 80003b8:	60bb      	str	r3, [r7, #8]
 80003ba:	e03e      	b.n	800043a <Init_Task_Stacks+0xc6>
	{
		user_tasks[i].current_state = TASK_READY_STATE;
 80003bc:	4a24      	ldr	r2, [pc, #144]	; (8000450 <Init_Task_Stacks+0xdc>)
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	011b      	lsls	r3, r3, #4
 80003c2:	4413      	add	r3, r2
 80003c4:	3308      	adds	r3, #8
 80003c6:	2200      	movs	r2, #0
 80003c8:	701a      	strb	r2, [r3, #0]

		pPSP = (uint32_t*) user_tasks[i].psp_value;
 80003ca:	4a21      	ldr	r2, [pc, #132]	; (8000450 <Init_Task_Stacks+0xdc>)
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	011b      	lsls	r3, r3, #4
 80003d0:	4413      	add	r3, r2
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	60fb      	str	r3, [r7, #12]

		// XPSR
		pPSP--;
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3b04      	subs	r3, #4
 80003da:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // 0x01000000 - just turn on T bit
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003e2:	601a      	str	r2, [r3, #0]

		// PC
		pPSP--;
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	3b04      	subs	r3, #4
 80003e8:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 80003ea:	4a19      	ldr	r2, [pc, #100]	; (8000450 <Init_Task_Stacks+0xdc>)
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	011b      	lsls	r3, r3, #4
 80003f0:	4413      	add	r3, r2
 80003f2:	330c      	adds	r3, #12
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	461a      	mov	r2, r3
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	601a      	str	r2, [r3, #0]

		// LR
		pPSP--;
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	3b04      	subs	r3, #4
 8000400:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	f06f 0202 	mvn.w	r2, #2
 8000408:	601a      	str	r2, [r3, #0]

		for (int j = 0; j < 13; j++)
 800040a:	2300      	movs	r3, #0
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	e008      	b.n	8000422 <Init_Task_Stacks+0xae>
		{
			pPSP--;
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3b04      	subs	r3, #4
 8000414:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3301      	adds	r3, #1
 8000420:	607b      	str	r3, [r7, #4]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	2b0c      	cmp	r3, #12
 8000426:	ddf3      	ble.n	8000410 <Init_Task_Stacks+0x9c>
		}

		user_tasks[i].psp_value = (uint32_t) pPSP;
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	4909      	ldr	r1, [pc, #36]	; (8000450 <Init_Task_Stacks+0xdc>)
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	011b      	lsls	r3, r3, #4
 8000430:	440b      	add	r3, r1
 8000432:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++)
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	3301      	adds	r3, #1
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	2b04      	cmp	r3, #4
 800043e:	d9bd      	bls.n	80003bc <Init_Task_Stacks+0x48>
	}
}
 8000440:	bf00      	nop
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	20000080 	.word	0x20000080
 8000454:	2001f000 	.word	0x2001f000
 8000458:	20020000 	.word	0x20020000
 800045c:	2001fc00 	.word	0x2001fc00
 8000460:	2001f800 	.word	0x2001f800
 8000464:	2001f400 	.word	0x2001f400
 8000468:	08000211 	.word	0x08000211
 800046c:	08000219 	.word	0x08000219
 8000470:	08000241 	.word	0x08000241
 8000474:	08000269 	.word	0x08000269
 8000478:	08000291 	.word	0x08000291

0800047c <Switch_To_PSP>:
	// 1. Initialize the PSP with task 1 stack start

	// Get the value of PSP of current stack

	// Preserve LR which connects back to main()
	__asm volatile ("PUSH {LR}");
 800047c:	b500      	push	{lr}
	__asm volatile ("BL Get_PSP_Value");
 800047e:	f000 f821 	bl	80004c4 <Get_PSP_Value>

	// Initialize PSP
	__asm volatile ("MSR PSP,R0");
 8000482:	f380 8809 	msr	PSP, r0

	// Pops back LR value
	__asm volatile ("POP {LR}");
 8000486:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. Change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0x02");
 800048a:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 800048e:	f380 8814 	msr	CONTROL, r0

	// Return from function call ( main() )
	__asm volatile ("BX LR");
 8000492:	4770      	bx	lr
}
 8000494:	bf00      	nop
	...

08000498 <Save_PSP_Value>:

void Save_PSP_Value(uint32_t const stack_addr)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = stack_addr;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <Save_PSP_Value+0x24>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <Save_PSP_Value+0x28>)
 80004a8:	011b      	lsls	r3, r3, #4
 80004aa:	4413      	add	r3, r2
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	601a      	str	r2, [r3, #0]
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	20000000 	.word	0x20000000
 80004c0:	20000080 	.word	0x20000080

080004c4 <Get_PSP_Value>:

uint32_t Get_PSP_Value()
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <Get_PSP_Value+0x1c>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	4a05      	ldr	r2, [pc, #20]	; (80004e4 <Get_PSP_Value+0x20>)
 80004d0:	011b      	lsls	r3, r3, #4
 80004d2:	4413      	add	r3, r2
 80004d4:	681b      	ldr	r3, [r3, #0]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	20000000 	.word	0x20000000
 80004e4:	20000080 	.word	0x20000080

080004e8 <Update_Next_Task>:

void Update_Next_Task()
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	do
	{
		current_task++;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <Update_Next_Task+0x58>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	3301      	adds	r3, #1
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <Update_Next_Task+0x58>)
 80004f8:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 80004fa:	4b11      	ldr	r3, [pc, #68]	; (8000540 <Update_Next_Task+0x58>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	4b10      	ldr	r3, [pc, #64]	; (8000544 <Update_Next_Task+0x5c>)
 8000502:	fba3 1302 	umull	r1, r3, r3, r2
 8000506:	0899      	lsrs	r1, r3, #2
 8000508:	460b      	mov	r3, r1
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	440b      	add	r3, r1
 800050e:	1ad3      	subs	r3, r2, r3
 8000510:	b2da      	uxtb	r2, r3
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <Update_Next_Task+0x58>)
 8000514:	701a      	strb	r2, [r3, #0]
	} while (user_tasks[current_task].current_state == TASK_BLOCKED_STATE
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <Update_Next_Task+0x58>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	b2db      	uxtb	r3, r3
 800051c:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <Update_Next_Task+0x60>)
 800051e:	011b      	lsls	r3, r3, #4
 8000520:	4413      	add	r3, r2
 8000522:	3308      	adds	r3, #8
 8000524:	781b      	ldrb	r3, [r3, #0]
			|| !current_task);
 8000526:	2bff      	cmp	r3, #255	; 0xff
 8000528:	d0e0      	beq.n	80004ec <Update_Next_Task+0x4>
 800052a:	4b05      	ldr	r3, [pc, #20]	; (8000540 <Update_Next_Task+0x58>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	b2db      	uxtb	r3, r3
 8000530:	2b00      	cmp	r3, #0
 8000532:	d0db      	beq.n	80004ec <Update_Next_Task+0x4>
}
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	20000000 	.word	0x20000000
 8000544:	cccccccd 	.word	0xcccccccd
 8000548:	20000080 	.word	0x20000080

0800054c <Update_Global_Tick_Count>:

	*pICSR |= (1 << 28);
}

void Update_Global_Tick_Count()
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <Update_Global_Tick_Count+0x18>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	4a03      	ldr	r2, [pc, #12]	; (8000564 <Update_Global_Tick_Count+0x18>)
 8000558:	6013      	str	r3, [r2, #0]
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	2000007c 	.word	0x2000007c

08000568 <Unblock_Task>:

void Unblock_Task()
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_TASKS; i++)
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	e01b      	b.n	80005ac <Unblock_Task+0x44>
	{
		if (user_tasks[i].current_state != TASK_READY_STATE)
 8000574:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <Unblock_Task+0x58>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	011b      	lsls	r3, r3, #4
 800057a:	4413      	add	r3, r2
 800057c:	3308      	adds	r3, #8
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d010      	beq.n	80005a6 <Unblock_Task+0x3e>
		{
			if (user_tasks[i].block_count == g_tick_count)
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <Unblock_Task+0x58>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	011b      	lsls	r3, r3, #4
 800058a:	4413      	add	r3, r2
 800058c:	3304      	adds	r3, #4
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <Unblock_Task+0x5c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	429a      	cmp	r2, r3
 8000596:	d106      	bne.n	80005a6 <Unblock_Task+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 8000598:	4a09      	ldr	r2, [pc, #36]	; (80005c0 <Unblock_Task+0x58>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	011b      	lsls	r3, r3, #4
 800059e:	4413      	add	r3, r2
 80005a0:	3308      	adds	r3, #8
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3301      	adds	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b04      	cmp	r3, #4
 80005b0:	d9e0      	bls.n	8000574 <Unblock_Task+0xc>
			}
		}
	}
}
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000080 	.word	0x20000080
 80005c4:	2000007c 	.word	0x2000007c

080005c8 <SysTick_Handler>:

void SysTick_Handler()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
	uint32_t volatile *const pICSR = (uint32_t*) 0xE000ED04;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <SysTick_Handler+0x28>)
 80005d0:	607b      	str	r3, [r7, #4]

	// 1. Update global tick count
	Update_Global_Tick_Count();
 80005d2:	f7ff ffbb 	bl	800054c <Update_Global_Tick_Count>

	// 2. Unblock tasks
	Unblock_Task();
 80005d6:	f7ff ffc7 	bl	8000568 <Unblock_Task>

	// 3. Pend PendSV
	*pICSR |= (1 << 28);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	601a      	str	r2, [r3, #0]

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	e000ed04 	.word	0xe000ed04

080005f4 <PendSV_Handler>:
__attribute__((naked)) void PendSV_Handler()
{
	/* Save the context of current task */

// 1. Get current running task's PSP value
	__asm volatile ("MRS R0,PSP");
 80005f4:	f3ef 8009 	mrs	r0, PSP
// Just like PUSH instruction but CANNOT use PUSH instruction
// since this is handler, MSP will be affected.
// => Use STORE operation
// Use STMDB instruction (Example syntax: "STMDB R1!,{R3-R6,R11,R12}")
// "Rn!" symbol is use to load final address to Rn register
	__asm volatile ("STMDB R0!,{R4-R11}");
 80005f8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

// 3. PUSH LR
	__asm volatile ("PUSH {LR}");
 80005fc:	b500      	push	{lr}

// 4. Save the current value of PSP
	__asm volatile ("BL Save_PSP_Value");
 80005fe:	f7ff ff4b 	bl	8000498 <Save_PSP_Value>

	/* Retrieve the context of next task */

// 1. Decide the next task to run
	__asm volatile ("BL Update_Next_Task");
 8000602:	f7ff ff71 	bl	80004e8 <Update_Next_Task>

// 2. Get its past PSP value
	__asm volatile ("BL Get_PSP_Value");
 8000606:	f7ff ff5d 	bl	80004c4 <Get_PSP_Value>
// at this moment, PSP value is in R0 register

// 3. Using that PSP value retrieve SF2 (R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 800060a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

// 4. Update PSP and exit
	__asm volatile ("MSR PSP,R0");
 800060e:	f380 8809 	msr	PSP, r0

// 5. POP LR
	__asm volatile ("POP {LR}");
 8000612:	f85d eb04 	ldr.w	lr, [sp], #4

// 6. Return from function call
	__asm volatile ("BX LR");
 8000616:	4770      	bx	lr
}
 8000618:	bf00      	nop
	...

0800061c <MemManage_Handler>:

void MemManage_Handler()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	printf("MemManage_Handler\n");
 8000620:	4801      	ldr	r0, [pc, #4]	; (8000628 <MemManage_Handler+0xc>)
 8000622:	f000 fac1 	bl	8000ba8 <puts>
	while (1)
 8000626:	e7fe      	b.n	8000626 <MemManage_Handler+0xa>
 8000628:	080012f0 	.word	0x080012f0

0800062c <BusFault_Handler>:
		;
}

void BusFault_Handler()
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	printf("BusFault_Handler\n");
 8000630:	4801      	ldr	r0, [pc, #4]	; (8000638 <BusFault_Handler+0xc>)
 8000632:	f000 fab9 	bl	8000ba8 <puts>
	while (1)
 8000636:	e7fe      	b.n	8000636 <BusFault_Handler+0xa>
 8000638:	08001304 	.word	0x08001304

0800063c <UsageFault_Handler>:
		;
}

void UsageFault_Handler()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	printf("UsageFault_Handler\n");
 8000640:	4801      	ldr	r0, [pc, #4]	; (8000648 <UsageFault_Handler+0xc>)
 8000642:	f000 fab1 	bl	8000ba8 <puts>
	while (1)
 8000646:	e7fe      	b.n	8000646 <UsageFault_Handler+0xa>
 8000648:	08001318 	.word	0x08001318

0800064c <HardFault_Handler>:
		;
}

void HardFault_Handler()
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	printf("HardFault_Handler\n");
 8000650:	4801      	ldr	r0, [pc, #4]	; (8000658 <HardFault_Handler+0xc>)
 8000652:	f000 faa9 	bl	8000ba8 <puts>
	while (1)
 8000656:	e7fe      	b.n	8000656 <HardFault_Handler+0xa>
 8000658:	0800132c 	.word	0x0800132c

0800065c <Basic_Init>:
uint32_t static volatile *const p_clock_control_reg = (uint32_t*) 0x40023830;
uint32_t static volatile *const p_port_d_mode_reg = (uint32_t*) 0x40020C00;
uint32_t static volatile *const p_port_d_output_reg = (uint32_t*) 0x40020C14;

static void Basic_Init()
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
	*p_clock_control_reg |= (1 << 3);
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <Basic_Init+0x1c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <Basic_Init+0x1c>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023830 	.word	0x40023830

0800067c <Init_Onboard_LEDs>:

void Init_Onboard_LEDs()
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	Green_LED_Init();
 8000680:	f000 f808 	bl	8000694 <Green_LED_Init>
	Orange_LED_Init();
 8000684:	f000 f81a 	bl	80006bc <Orange_LED_Init>
	Red_LED_Init();
 8000688:	f000 f82c 	bl	80006e4 <Red_LED_Init>
	Blue_LED_Init();
 800068c:	f000 f83e 	bl	800070c <Blue_LED_Init>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}

08000694 <Green_LED_Init>:

void Green_LED_Init()
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	Basic_Init();
 8000698:	f7ff ffe0 	bl	800065c <Basic_Init>
	// Configure the mode of the IO pin as output
	// a. Clear the 24th and 25th bit position (CLEAR)
	*p_port_d_mode_reg &= ~(3 << 24);
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <Green_LED_Init+0x24>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <Green_LED_Init+0x24>)
 80006a2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80006a6:	6013      	str	r3, [r2, #0]
	// b. Make 24th bit as 1 (SET)
	*p_port_d_mode_reg |= (1 << 24);
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <Green_LED_Init+0x24>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a02      	ldr	r2, [pc, #8]	; (80006b8 <Green_LED_Init+0x24>)
 80006ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40020c00 	.word	0x40020c00

080006bc <Orange_LED_Init>:

void Orange_LED_Init()
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	Basic_Init();
 80006c0:	f7ff ffcc 	bl	800065c <Basic_Init>
	// Configure the mode of the IO pin as output
	// a. Clear the 26th and 27th bit position (CLEAR)
	*p_port_d_mode_reg &= ~(3 << 26);
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <Orange_LED_Init+0x24>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <Orange_LED_Init+0x24>)
 80006ca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80006ce:	6013      	str	r3, [r2, #0]
	// b. Make 26th bit as 1 (SET)
	*p_port_d_mode_reg |= (1 << 26);
 80006d0:	4b03      	ldr	r3, [pc, #12]	; (80006e0 <Orange_LED_Init+0x24>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a02      	ldr	r2, [pc, #8]	; (80006e0 <Orange_LED_Init+0x24>)
 80006d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <Red_LED_Init>:

void Red_LED_Init()
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	Basic_Init();
 80006e8:	f7ff ffb8 	bl	800065c <Basic_Init>
	// Configure the mode of the IO pin as output
	// a. Clear the 28th and 29th bit position (CLEAR)
	*p_port_d_mode_reg &= ~(3 << 28);
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <Red_LED_Init+0x24>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a05      	ldr	r2, [pc, #20]	; (8000708 <Red_LED_Init+0x24>)
 80006f2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80006f6:	6013      	str	r3, [r2, #0]
	// b. Make 28th bit as 1 (SET)
	*p_port_d_mode_reg |= (1 << 28);
 80006f8:	4b03      	ldr	r3, [pc, #12]	; (8000708 <Red_LED_Init+0x24>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a02      	ldr	r2, [pc, #8]	; (8000708 <Red_LED_Init+0x24>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000702:	6013      	str	r3, [r2, #0]
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020c00 	.word	0x40020c00

0800070c <Blue_LED_Init>:

void Blue_LED_Init()
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	Basic_Init();
 8000710:	f7ff ffa4 	bl	800065c <Basic_Init>
	// Configure the mode of the IO pin as output
	// a. Clear the 30th and 31st bit position (CLEAR)
	*p_port_d_mode_reg &= ~(3 << 30);
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <Blue_LED_Init+0x24>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a05      	ldr	r2, [pc, #20]	; (8000730 <Blue_LED_Init+0x24>)
 800071a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800071e:	6013      	str	r3, [r2, #0]
	// b. Make 30th bit as 1 (SET)
	*p_port_d_mode_reg |= (1 << 30);
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <Blue_LED_Init+0x24>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a02      	ldr	r2, [pc, #8]	; (8000730 <Blue_LED_Init+0x24>)
 8000726:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800072a:	6013      	str	r3, [r2, #0]
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40020c00 	.word	0x40020c00

08000734 <Green_LED_Toggle>:
	// Clear 12th bit of the output data register to make I/O pin-12 as LOW
	*p_port_d_output_reg &= ~(1 << 12);
}

void Green_LED_Toggle()
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
	// XOR 12th bit of the output data register to make I/O pin-12 with 1
	*p_port_d_output_reg ^= (1 << 12);
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <Green_LED_Toggle+0x1c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <Green_LED_Toggle+0x1c>)
 800073e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40020c14 	.word	0x40020c14

08000754 <Orange_LED_Toggle>:
	// Clear 13th bit of the output data register to make I/O pin-13 as LOW
	*p_port_d_output_reg &= ~(1 << 13);
}

void Orange_LED_Toggle()
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
	// XOR 13th bit of the output data register to make I/O pin-13 with 1
	*p_port_d_output_reg ^= (1 << 13);
 8000758:	4b05      	ldr	r3, [pc, #20]	; (8000770 <Orange_LED_Toggle+0x1c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <Orange_LED_Toggle+0x1c>)
 800075e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000762:	6013      	str	r3, [r2, #0]
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40020c14 	.word	0x40020c14

08000774 <Red_LED_Toggle>:
	// Clear 14th bit of the output data register to make I/O pin-14 as LOW
	*p_port_d_output_reg &= ~(1 << 14);
}

void Red_LED_Toggle()
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
	// XOR 14th bit of the output data register to make I/O pin-14 with 1
	*p_port_d_output_reg ^= (1 << 14);
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <Red_LED_Toggle+0x1c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a04      	ldr	r2, [pc, #16]	; (8000790 <Red_LED_Toggle+0x1c>)
 800077e:	f483 4380 	eor.w	r3, r3, #16384	; 0x4000
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40020c14 	.word	0x40020c14

08000794 <Blue_LED_Toggle>:
	// Clear 15th bit of the output data register to make I/O pin-15 as LOW
	*p_port_d_output_reg &= ~(1 << 15);
}

void Blue_LED_Toggle()
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
	// XOR 15th bit of the output data register to make I/O pin-15 with 1
	*p_port_d_output_reg ^= (1 << 15);
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <Blue_LED_Toggle+0x1c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <Blue_LED_Toggle+0x1c>)
 800079e:	f483 4300 	eor.w	r3, r3, #32768	; 0x8000
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40020c14 	.word	0x40020c14

080007b4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <ITM_SendChar+0x48>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <ITM_SendChar+0x48>)
 80007c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007c8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <ITM_SendChar+0x4c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <ITM_SendChar+0x4c>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007d6:	bf00      	nop
 80007d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f8      	beq.n	80007d8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	6013      	str	r3, [r2, #0]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000edfc 	.word	0xe000edfc
 8000800:	e0000e00 	.word	0xe0000e00

08000804 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	e00a      	b.n	800082c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000816:	f3af 8000 	nop.w
 800081a:	4601      	mov	r1, r0
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	60ba      	str	r2, [r7, #8]
 8000822:	b2ca      	uxtb	r2, r1
 8000824:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	3301      	adds	r3, #1
 800082a:	617b      	str	r3, [r7, #20]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	429a      	cmp	r2, r3
 8000832:	dbf0      	blt.n	8000816 <_read+0x12>
  }

  return len;
 8000834:	687b      	ldr	r3, [r7, #4]
}
 8000836:	4618      	mov	r0, r3
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b086      	sub	sp, #24
 8000842:	af00      	add	r7, sp, #0
 8000844:	60f8      	str	r0, [r7, #12]
 8000846:	60b9      	str	r1, [r7, #8]
 8000848:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	e009      	b.n	8000864 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	1c5a      	adds	r2, r3, #1
 8000854:	60ba      	str	r2, [r7, #8]
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ffab 	bl	80007b4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	429a      	cmp	r2, r3
 800086a:	dbf1      	blt.n	8000850 <_write+0x12>
//    __io_putchar(*ptr++);
  }
  return len;
 800086c:	687b      	ldr	r3, [r7, #4]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <_close>:

int _close(int file)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800087e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000882:	4618      	mov	r0, r3
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800088e:	b480      	push	{r7}
 8000890:	b083      	sub	sp, #12
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
 8000896:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089e:	605a      	str	r2, [r3, #4]
  return 0;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr

080008ae <_isatty>:

int _isatty(int file)
{
 80008ae:	b480      	push	{r7}
 80008b0:	b083      	sub	sp, #12
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
	...

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4413      	add	r3, r2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000910:	f000 fa78 	bl	8000e04 <__errno>
 8000914:	4603      	mov	r3, r0
 8000916:	220c      	movs	r2, #12
 8000918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091a:	f04f 33ff 	mov.w	r3, #4294967295
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4413      	add	r3, r2
 800092e:	4a05      	ldr	r2, [pc, #20]	; (8000944 <_sbrk+0x64>)
 8000930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20020000 	.word	0x20020000
 8000940:	00000400 	.word	0x00000400
 8000944:	200000d0 	.word	0x200000d0
 8000948:	20000220 	.word	0x20000220

0800094c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800094c:	480d      	ldr	r0, [pc, #52]	; (8000984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800094e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000950:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000954:	480c      	ldr	r0, [pc, #48]	; (8000988 <LoopForever+0x6>)
  ldr r1, =_edata
 8000956:	490d      	ldr	r1, [pc, #52]	; (800098c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000958:	4a0d      	ldr	r2, [pc, #52]	; (8000990 <LoopForever+0xe>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800095c:	e002      	b.n	8000964 <LoopCopyDataInit>

0800095e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000962:	3304      	adds	r3, #4

08000964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000968:	d3f9      	bcc.n	800095e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <LoopForever+0x16>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000970:	e001      	b.n	8000976 <LoopFillZerobss>

08000972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000974:	3204      	adds	r2, #4

08000976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000978:	d3fb      	bcc.n	8000972 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800097a:	f000 fa49 	bl	8000e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097e:	f7ff fc2b 	bl	80001d8 <main>

08000982 <LoopForever>:

LoopForever:
  b LoopForever
 8000982:	e7fe      	b.n	8000982 <LoopForever>
  ldr   r0, =_estack
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000990:	08001348 	.word	0x08001348
  ldr r2, =_sbss
 8000994:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000998:	20000220 	.word	0x20000220

0800099c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <std>:
 80009a0:	2300      	movs	r3, #0
 80009a2:	b510      	push	{r4, lr}
 80009a4:	4604      	mov	r4, r0
 80009a6:	e9c0 3300 	strd	r3, r3, [r0]
 80009aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80009ae:	6083      	str	r3, [r0, #8]
 80009b0:	8181      	strh	r1, [r0, #12]
 80009b2:	6643      	str	r3, [r0, #100]	; 0x64
 80009b4:	81c2      	strh	r2, [r0, #14]
 80009b6:	6183      	str	r3, [r0, #24]
 80009b8:	4619      	mov	r1, r3
 80009ba:	2208      	movs	r2, #8
 80009bc:	305c      	adds	r0, #92	; 0x5c
 80009be:	f000 f9d3 	bl	8000d68 <memset>
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <std+0x38>)
 80009c4:	6263      	str	r3, [r4, #36]	; 0x24
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <std+0x3c>)
 80009c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <std+0x40>)
 80009cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009ce:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <std+0x44>)
 80009d0:	6224      	str	r4, [r4, #32]
 80009d2:	6323      	str	r3, [r4, #48]	; 0x30
 80009d4:	bd10      	pop	{r4, pc}
 80009d6:	bf00      	nop
 80009d8:	08000bb9 	.word	0x08000bb9
 80009dc:	08000bdb 	.word	0x08000bdb
 80009e0:	08000c13 	.word	0x08000c13
 80009e4:	08000c37 	.word	0x08000c37

080009e8 <stdio_exit_handler>:
 80009e8:	4a02      	ldr	r2, [pc, #8]	; (80009f4 <stdio_exit_handler+0xc>)
 80009ea:	4903      	ldr	r1, [pc, #12]	; (80009f8 <stdio_exit_handler+0x10>)
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <stdio_exit_handler+0x14>)
 80009ee:	f000 b869 	b.w	8000ac4 <_fwalk_sglue>
 80009f2:	bf00      	nop
 80009f4:	20000004 	.word	0x20000004
 80009f8:	08001159 	.word	0x08001159
 80009fc:	20000010 	.word	0x20000010

08000a00 <cleanup_stdio>:
 8000a00:	6841      	ldr	r1, [r0, #4]
 8000a02:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <cleanup_stdio+0x34>)
 8000a04:	4299      	cmp	r1, r3
 8000a06:	b510      	push	{r4, lr}
 8000a08:	4604      	mov	r4, r0
 8000a0a:	d001      	beq.n	8000a10 <cleanup_stdio+0x10>
 8000a0c:	f000 fba4 	bl	8001158 <_fflush_r>
 8000a10:	68a1      	ldr	r1, [r4, #8]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <cleanup_stdio+0x38>)
 8000a14:	4299      	cmp	r1, r3
 8000a16:	d002      	beq.n	8000a1e <cleanup_stdio+0x1e>
 8000a18:	4620      	mov	r0, r4
 8000a1a:	f000 fb9d 	bl	8001158 <_fflush_r>
 8000a1e:	68e1      	ldr	r1, [r4, #12]
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <cleanup_stdio+0x3c>)
 8000a22:	4299      	cmp	r1, r3
 8000a24:	d004      	beq.n	8000a30 <cleanup_stdio+0x30>
 8000a26:	4620      	mov	r0, r4
 8000a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a2c:	f000 bb94 	b.w	8001158 <_fflush_r>
 8000a30:	bd10      	pop	{r4, pc}
 8000a32:	bf00      	nop
 8000a34:	200000d4 	.word	0x200000d4
 8000a38:	2000013c 	.word	0x2000013c
 8000a3c:	200001a4 	.word	0x200001a4

08000a40 <global_stdio_init.part.0>:
 8000a40:	b510      	push	{r4, lr}
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <global_stdio_init.part.0+0x30>)
 8000a44:	4c0b      	ldr	r4, [pc, #44]	; (8000a74 <global_stdio_init.part.0+0x34>)
 8000a46:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <global_stdio_init.part.0+0x38>)
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	4620      	mov	r0, r4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2104      	movs	r1, #4
 8000a50:	f7ff ffa6 	bl	80009a0 <std>
 8000a54:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2109      	movs	r1, #9
 8000a5c:	f7ff ffa0 	bl	80009a0 <std>
 8000a60:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000a64:	2202      	movs	r2, #2
 8000a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a6a:	2112      	movs	r1, #18
 8000a6c:	f7ff bf98 	b.w	80009a0 <std>
 8000a70:	2000020c 	.word	0x2000020c
 8000a74:	200000d4 	.word	0x200000d4
 8000a78:	080009e9 	.word	0x080009e9

08000a7c <__sfp_lock_acquire>:
 8000a7c:	4801      	ldr	r0, [pc, #4]	; (8000a84 <__sfp_lock_acquire+0x8>)
 8000a7e:	f000 b9eb 	b.w	8000e58 <__retarget_lock_acquire_recursive>
 8000a82:	bf00      	nop
 8000a84:	20000215 	.word	0x20000215

08000a88 <__sfp_lock_release>:
 8000a88:	4801      	ldr	r0, [pc, #4]	; (8000a90 <__sfp_lock_release+0x8>)
 8000a8a:	f000 b9e6 	b.w	8000e5a <__retarget_lock_release_recursive>
 8000a8e:	bf00      	nop
 8000a90:	20000215 	.word	0x20000215

08000a94 <__sinit>:
 8000a94:	b510      	push	{r4, lr}
 8000a96:	4604      	mov	r4, r0
 8000a98:	f7ff fff0 	bl	8000a7c <__sfp_lock_acquire>
 8000a9c:	6a23      	ldr	r3, [r4, #32]
 8000a9e:	b11b      	cbz	r3, 8000aa8 <__sinit+0x14>
 8000aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000aa4:	f7ff bff0 	b.w	8000a88 <__sfp_lock_release>
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__sinit+0x28>)
 8000aaa:	6223      	str	r3, [r4, #32]
 8000aac:	4b04      	ldr	r3, [pc, #16]	; (8000ac0 <__sinit+0x2c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d1f5      	bne.n	8000aa0 <__sinit+0xc>
 8000ab4:	f7ff ffc4 	bl	8000a40 <global_stdio_init.part.0>
 8000ab8:	e7f2      	b.n	8000aa0 <__sinit+0xc>
 8000aba:	bf00      	nop
 8000abc:	08000a01 	.word	0x08000a01
 8000ac0:	2000020c 	.word	0x2000020c

08000ac4 <_fwalk_sglue>:
 8000ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ac8:	4607      	mov	r7, r0
 8000aca:	4688      	mov	r8, r1
 8000acc:	4614      	mov	r4, r2
 8000ace:	2600      	movs	r6, #0
 8000ad0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000ad4:	f1b9 0901 	subs.w	r9, r9, #1
 8000ad8:	d505      	bpl.n	8000ae6 <_fwalk_sglue+0x22>
 8000ada:	6824      	ldr	r4, [r4, #0]
 8000adc:	2c00      	cmp	r4, #0
 8000ade:	d1f7      	bne.n	8000ad0 <_fwalk_sglue+0xc>
 8000ae0:	4630      	mov	r0, r6
 8000ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ae6:	89ab      	ldrh	r3, [r5, #12]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d907      	bls.n	8000afc <_fwalk_sglue+0x38>
 8000aec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000af0:	3301      	adds	r3, #1
 8000af2:	d003      	beq.n	8000afc <_fwalk_sglue+0x38>
 8000af4:	4629      	mov	r1, r5
 8000af6:	4638      	mov	r0, r7
 8000af8:	47c0      	blx	r8
 8000afa:	4306      	orrs	r6, r0
 8000afc:	3568      	adds	r5, #104	; 0x68
 8000afe:	e7e9      	b.n	8000ad4 <_fwalk_sglue+0x10>

08000b00 <_puts_r>:
 8000b00:	6a03      	ldr	r3, [r0, #32]
 8000b02:	b570      	push	{r4, r5, r6, lr}
 8000b04:	6884      	ldr	r4, [r0, #8]
 8000b06:	4605      	mov	r5, r0
 8000b08:	460e      	mov	r6, r1
 8000b0a:	b90b      	cbnz	r3, 8000b10 <_puts_r+0x10>
 8000b0c:	f7ff ffc2 	bl	8000a94 <__sinit>
 8000b10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b12:	07db      	lsls	r3, r3, #31
 8000b14:	d405      	bmi.n	8000b22 <_puts_r+0x22>
 8000b16:	89a3      	ldrh	r3, [r4, #12]
 8000b18:	0598      	lsls	r0, r3, #22
 8000b1a:	d402      	bmi.n	8000b22 <_puts_r+0x22>
 8000b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b1e:	f000 f99b 	bl	8000e58 <__retarget_lock_acquire_recursive>
 8000b22:	89a3      	ldrh	r3, [r4, #12]
 8000b24:	0719      	lsls	r1, r3, #28
 8000b26:	d513      	bpl.n	8000b50 <_puts_r+0x50>
 8000b28:	6923      	ldr	r3, [r4, #16]
 8000b2a:	b18b      	cbz	r3, 8000b50 <_puts_r+0x50>
 8000b2c:	3e01      	subs	r6, #1
 8000b2e:	68a3      	ldr	r3, [r4, #8]
 8000b30:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b34:	3b01      	subs	r3, #1
 8000b36:	60a3      	str	r3, [r4, #8]
 8000b38:	b9e9      	cbnz	r1, 8000b76 <_puts_r+0x76>
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	da2e      	bge.n	8000b9c <_puts_r+0x9c>
 8000b3e:	4622      	mov	r2, r4
 8000b40:	210a      	movs	r1, #10
 8000b42:	4628      	mov	r0, r5
 8000b44:	f000 f87b 	bl	8000c3e <__swbuf_r>
 8000b48:	3001      	adds	r0, #1
 8000b4a:	d007      	beq.n	8000b5c <_puts_r+0x5c>
 8000b4c:	250a      	movs	r5, #10
 8000b4e:	e007      	b.n	8000b60 <_puts_r+0x60>
 8000b50:	4621      	mov	r1, r4
 8000b52:	4628      	mov	r0, r5
 8000b54:	f000 f8b0 	bl	8000cb8 <__swsetup_r>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d0e7      	beq.n	8000b2c <_puts_r+0x2c>
 8000b5c:	f04f 35ff 	mov.w	r5, #4294967295
 8000b60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b62:	07da      	lsls	r2, r3, #31
 8000b64:	d405      	bmi.n	8000b72 <_puts_r+0x72>
 8000b66:	89a3      	ldrh	r3, [r4, #12]
 8000b68:	059b      	lsls	r3, r3, #22
 8000b6a:	d402      	bmi.n	8000b72 <_puts_r+0x72>
 8000b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b6e:	f000 f974 	bl	8000e5a <__retarget_lock_release_recursive>
 8000b72:	4628      	mov	r0, r5
 8000b74:	bd70      	pop	{r4, r5, r6, pc}
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da04      	bge.n	8000b84 <_puts_r+0x84>
 8000b7a:	69a2      	ldr	r2, [r4, #24]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dc06      	bgt.n	8000b8e <_puts_r+0x8e>
 8000b80:	290a      	cmp	r1, #10
 8000b82:	d004      	beq.n	8000b8e <_puts_r+0x8e>
 8000b84:	6823      	ldr	r3, [r4, #0]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	6022      	str	r2, [r4, #0]
 8000b8a:	7019      	strb	r1, [r3, #0]
 8000b8c:	e7cf      	b.n	8000b2e <_puts_r+0x2e>
 8000b8e:	4622      	mov	r2, r4
 8000b90:	4628      	mov	r0, r5
 8000b92:	f000 f854 	bl	8000c3e <__swbuf_r>
 8000b96:	3001      	adds	r0, #1
 8000b98:	d1c9      	bne.n	8000b2e <_puts_r+0x2e>
 8000b9a:	e7df      	b.n	8000b5c <_puts_r+0x5c>
 8000b9c:	6823      	ldr	r3, [r4, #0]
 8000b9e:	250a      	movs	r5, #10
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	6022      	str	r2, [r4, #0]
 8000ba4:	701d      	strb	r5, [r3, #0]
 8000ba6:	e7db      	b.n	8000b60 <_puts_r+0x60>

08000ba8 <puts>:
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <puts+0xc>)
 8000baa:	4601      	mov	r1, r0
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	f7ff bfa7 	b.w	8000b00 <_puts_r>
 8000bb2:	bf00      	nop
 8000bb4:	2000005c 	.word	0x2000005c

08000bb8 <__sread>:
 8000bb8:	b510      	push	{r4, lr}
 8000bba:	460c      	mov	r4, r1
 8000bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bc0:	f000 f8fc 	bl	8000dbc <_read_r>
 8000bc4:	2800      	cmp	r0, #0
 8000bc6:	bfab      	itete	ge
 8000bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000bca:	89a3      	ldrhlt	r3, [r4, #12]
 8000bcc:	181b      	addge	r3, r3, r0
 8000bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000bd2:	bfac      	ite	ge
 8000bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8000bd6:	81a3      	strhlt	r3, [r4, #12]
 8000bd8:	bd10      	pop	{r4, pc}

08000bda <__swrite>:
 8000bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bde:	461f      	mov	r7, r3
 8000be0:	898b      	ldrh	r3, [r1, #12]
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	4605      	mov	r5, r0
 8000be6:	460c      	mov	r4, r1
 8000be8:	4616      	mov	r6, r2
 8000bea:	d505      	bpl.n	8000bf8 <__swrite+0x1e>
 8000bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f000 f8d0 	bl	8000d98 <_lseek_r>
 8000bf8:	89a3      	ldrh	r3, [r4, #12]
 8000bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c02:	81a3      	strh	r3, [r4, #12]
 8000c04:	4632      	mov	r2, r6
 8000c06:	463b      	mov	r3, r7
 8000c08:	4628      	mov	r0, r5
 8000c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c0e:	f000 b8e7 	b.w	8000de0 <_write_r>

08000c12 <__sseek>:
 8000c12:	b510      	push	{r4, lr}
 8000c14:	460c      	mov	r4, r1
 8000c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c1a:	f000 f8bd 	bl	8000d98 <_lseek_r>
 8000c1e:	1c43      	adds	r3, r0, #1
 8000c20:	89a3      	ldrh	r3, [r4, #12]
 8000c22:	bf15      	itete	ne
 8000c24:	6560      	strne	r0, [r4, #84]	; 0x54
 8000c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c2e:	81a3      	strheq	r3, [r4, #12]
 8000c30:	bf18      	it	ne
 8000c32:	81a3      	strhne	r3, [r4, #12]
 8000c34:	bd10      	pop	{r4, pc}

08000c36 <__sclose>:
 8000c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c3a:	f000 b89d 	b.w	8000d78 <_close_r>

08000c3e <__swbuf_r>:
 8000c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c40:	460e      	mov	r6, r1
 8000c42:	4614      	mov	r4, r2
 8000c44:	4605      	mov	r5, r0
 8000c46:	b118      	cbz	r0, 8000c50 <__swbuf_r+0x12>
 8000c48:	6a03      	ldr	r3, [r0, #32]
 8000c4a:	b90b      	cbnz	r3, 8000c50 <__swbuf_r+0x12>
 8000c4c:	f7ff ff22 	bl	8000a94 <__sinit>
 8000c50:	69a3      	ldr	r3, [r4, #24]
 8000c52:	60a3      	str	r3, [r4, #8]
 8000c54:	89a3      	ldrh	r3, [r4, #12]
 8000c56:	071a      	lsls	r2, r3, #28
 8000c58:	d525      	bpl.n	8000ca6 <__swbuf_r+0x68>
 8000c5a:	6923      	ldr	r3, [r4, #16]
 8000c5c:	b31b      	cbz	r3, 8000ca6 <__swbuf_r+0x68>
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	6922      	ldr	r2, [r4, #16]
 8000c62:	1a98      	subs	r0, r3, r2
 8000c64:	6963      	ldr	r3, [r4, #20]
 8000c66:	b2f6      	uxtb	r6, r6
 8000c68:	4283      	cmp	r3, r0
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	dc04      	bgt.n	8000c78 <__swbuf_r+0x3a>
 8000c6e:	4621      	mov	r1, r4
 8000c70:	4628      	mov	r0, r5
 8000c72:	f000 fa71 	bl	8001158 <_fflush_r>
 8000c76:	b9e0      	cbnz	r0, 8000cb2 <__swbuf_r+0x74>
 8000c78:	68a3      	ldr	r3, [r4, #8]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	60a3      	str	r3, [r4, #8]
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	1c5a      	adds	r2, r3, #1
 8000c82:	6022      	str	r2, [r4, #0]
 8000c84:	701e      	strb	r6, [r3, #0]
 8000c86:	6962      	ldr	r2, [r4, #20]
 8000c88:	1c43      	adds	r3, r0, #1
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d004      	beq.n	8000c98 <__swbuf_r+0x5a>
 8000c8e:	89a3      	ldrh	r3, [r4, #12]
 8000c90:	07db      	lsls	r3, r3, #31
 8000c92:	d506      	bpl.n	8000ca2 <__swbuf_r+0x64>
 8000c94:	2e0a      	cmp	r6, #10
 8000c96:	d104      	bne.n	8000ca2 <__swbuf_r+0x64>
 8000c98:	4621      	mov	r1, r4
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	f000 fa5c 	bl	8001158 <_fflush_r>
 8000ca0:	b938      	cbnz	r0, 8000cb2 <__swbuf_r+0x74>
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f000 f805 	bl	8000cb8 <__swsetup_r>
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	d0d5      	beq.n	8000c5e <__swbuf_r+0x20>
 8000cb2:	f04f 37ff 	mov.w	r7, #4294967295
 8000cb6:	e7f4      	b.n	8000ca2 <__swbuf_r+0x64>

08000cb8 <__swsetup_r>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <__swsetup_r+0xac>)
 8000cbc:	4605      	mov	r5, r0
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	460c      	mov	r4, r1
 8000cc2:	b118      	cbz	r0, 8000ccc <__swsetup_r+0x14>
 8000cc4:	6a03      	ldr	r3, [r0, #32]
 8000cc6:	b90b      	cbnz	r3, 8000ccc <__swsetup_r+0x14>
 8000cc8:	f7ff fee4 	bl	8000a94 <__sinit>
 8000ccc:	89a3      	ldrh	r3, [r4, #12]
 8000cce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000cd2:	0718      	lsls	r0, r3, #28
 8000cd4:	d422      	bmi.n	8000d1c <__swsetup_r+0x64>
 8000cd6:	06d9      	lsls	r1, r3, #27
 8000cd8:	d407      	bmi.n	8000cea <__swsetup_r+0x32>
 8000cda:	2309      	movs	r3, #9
 8000cdc:	602b      	str	r3, [r5, #0]
 8000cde:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000ce2:	81a3      	strh	r3, [r4, #12]
 8000ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce8:	e034      	b.n	8000d54 <__swsetup_r+0x9c>
 8000cea:	0758      	lsls	r0, r3, #29
 8000cec:	d512      	bpl.n	8000d14 <__swsetup_r+0x5c>
 8000cee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cf0:	b141      	cbz	r1, 8000d04 <__swsetup_r+0x4c>
 8000cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d002      	beq.n	8000d00 <__swsetup_r+0x48>
 8000cfa:	4628      	mov	r0, r5
 8000cfc:	f000 f8ae 	bl	8000e5c <_free_r>
 8000d00:	2300      	movs	r3, #0
 8000d02:	6363      	str	r3, [r4, #52]	; 0x34
 8000d04:	89a3      	ldrh	r3, [r4, #12]
 8000d06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000d0a:	81a3      	strh	r3, [r4, #12]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	6063      	str	r3, [r4, #4]
 8000d10:	6923      	ldr	r3, [r4, #16]
 8000d12:	6023      	str	r3, [r4, #0]
 8000d14:	89a3      	ldrh	r3, [r4, #12]
 8000d16:	f043 0308 	orr.w	r3, r3, #8
 8000d1a:	81a3      	strh	r3, [r4, #12]
 8000d1c:	6923      	ldr	r3, [r4, #16]
 8000d1e:	b94b      	cbnz	r3, 8000d34 <__swsetup_r+0x7c>
 8000d20:	89a3      	ldrh	r3, [r4, #12]
 8000d22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000d26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d2a:	d003      	beq.n	8000d34 <__swsetup_r+0x7c>
 8000d2c:	4621      	mov	r1, r4
 8000d2e:	4628      	mov	r0, r5
 8000d30:	f000 fa60 	bl	80011f4 <__smakebuf_r>
 8000d34:	89a0      	ldrh	r0, [r4, #12]
 8000d36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d3a:	f010 0301 	ands.w	r3, r0, #1
 8000d3e:	d00a      	beq.n	8000d56 <__swsetup_r+0x9e>
 8000d40:	2300      	movs	r3, #0
 8000d42:	60a3      	str	r3, [r4, #8]
 8000d44:	6963      	ldr	r3, [r4, #20]
 8000d46:	425b      	negs	r3, r3
 8000d48:	61a3      	str	r3, [r4, #24]
 8000d4a:	6923      	ldr	r3, [r4, #16]
 8000d4c:	b943      	cbnz	r3, 8000d60 <__swsetup_r+0xa8>
 8000d4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d52:	d1c4      	bne.n	8000cde <__swsetup_r+0x26>
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	0781      	lsls	r1, r0, #30
 8000d58:	bf58      	it	pl
 8000d5a:	6963      	ldrpl	r3, [r4, #20]
 8000d5c:	60a3      	str	r3, [r4, #8]
 8000d5e:	e7f4      	b.n	8000d4a <__swsetup_r+0x92>
 8000d60:	2000      	movs	r0, #0
 8000d62:	e7f7      	b.n	8000d54 <__swsetup_r+0x9c>
 8000d64:	2000005c 	.word	0x2000005c

08000d68 <memset>:
 8000d68:	4402      	add	r2, r0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d100      	bne.n	8000d72 <memset+0xa>
 8000d70:	4770      	bx	lr
 8000d72:	f803 1b01 	strb.w	r1, [r3], #1
 8000d76:	e7f9      	b.n	8000d6c <memset+0x4>

08000d78 <_close_r>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	4d06      	ldr	r5, [pc, #24]	; (8000d94 <_close_r+0x1c>)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4608      	mov	r0, r1
 8000d82:	602b      	str	r3, [r5, #0]
 8000d84:	f7ff fd77 	bl	8000876 <_close>
 8000d88:	1c43      	adds	r3, r0, #1
 8000d8a:	d102      	bne.n	8000d92 <_close_r+0x1a>
 8000d8c:	682b      	ldr	r3, [r5, #0]
 8000d8e:	b103      	cbz	r3, 8000d92 <_close_r+0x1a>
 8000d90:	6023      	str	r3, [r4, #0]
 8000d92:	bd38      	pop	{r3, r4, r5, pc}
 8000d94:	20000210 	.word	0x20000210

08000d98 <_lseek_r>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	4d07      	ldr	r5, [pc, #28]	; (8000db8 <_lseek_r+0x20>)
 8000d9c:	4604      	mov	r4, r0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	4611      	mov	r1, r2
 8000da2:	2200      	movs	r2, #0
 8000da4:	602a      	str	r2, [r5, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	f7ff fd8c 	bl	80008c4 <_lseek>
 8000dac:	1c43      	adds	r3, r0, #1
 8000dae:	d102      	bne.n	8000db6 <_lseek_r+0x1e>
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	b103      	cbz	r3, 8000db6 <_lseek_r+0x1e>
 8000db4:	6023      	str	r3, [r4, #0]
 8000db6:	bd38      	pop	{r3, r4, r5, pc}
 8000db8:	20000210 	.word	0x20000210

08000dbc <_read_r>:
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	4d07      	ldr	r5, [pc, #28]	; (8000ddc <_read_r+0x20>)
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	602a      	str	r2, [r5, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f7ff fd1a 	bl	8000804 <_read>
 8000dd0:	1c43      	adds	r3, r0, #1
 8000dd2:	d102      	bne.n	8000dda <_read_r+0x1e>
 8000dd4:	682b      	ldr	r3, [r5, #0]
 8000dd6:	b103      	cbz	r3, 8000dda <_read_r+0x1e>
 8000dd8:	6023      	str	r3, [r4, #0]
 8000dda:	bd38      	pop	{r3, r4, r5, pc}
 8000ddc:	20000210 	.word	0x20000210

08000de0 <_write_r>:
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4d07      	ldr	r5, [pc, #28]	; (8000e00 <_write_r+0x20>)
 8000de4:	4604      	mov	r4, r0
 8000de6:	4608      	mov	r0, r1
 8000de8:	4611      	mov	r1, r2
 8000dea:	2200      	movs	r2, #0
 8000dec:	602a      	str	r2, [r5, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	f7ff fd25 	bl	800083e <_write>
 8000df4:	1c43      	adds	r3, r0, #1
 8000df6:	d102      	bne.n	8000dfe <_write_r+0x1e>
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	b103      	cbz	r3, 8000dfe <_write_r+0x1e>
 8000dfc:	6023      	str	r3, [r4, #0]
 8000dfe:	bd38      	pop	{r3, r4, r5, pc}
 8000e00:	20000210 	.word	0x20000210

08000e04 <__errno>:
 8000e04:	4b01      	ldr	r3, [pc, #4]	; (8000e0c <__errno+0x8>)
 8000e06:	6818      	ldr	r0, [r3, #0]
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	2000005c 	.word	0x2000005c

08000e10 <__libc_init_array>:
 8000e10:	b570      	push	{r4, r5, r6, lr}
 8000e12:	4d0d      	ldr	r5, [pc, #52]	; (8000e48 <__libc_init_array+0x38>)
 8000e14:	4c0d      	ldr	r4, [pc, #52]	; (8000e4c <__libc_init_array+0x3c>)
 8000e16:	1b64      	subs	r4, r4, r5
 8000e18:	10a4      	asrs	r4, r4, #2
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	42a6      	cmp	r6, r4
 8000e1e:	d109      	bne.n	8000e34 <__libc_init_array+0x24>
 8000e20:	4d0b      	ldr	r5, [pc, #44]	; (8000e50 <__libc_init_array+0x40>)
 8000e22:	4c0c      	ldr	r4, [pc, #48]	; (8000e54 <__libc_init_array+0x44>)
 8000e24:	f000 fa54 	bl	80012d0 <_init>
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	10a4      	asrs	r4, r4, #2
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	42a6      	cmp	r6, r4
 8000e30:	d105      	bne.n	8000e3e <__libc_init_array+0x2e>
 8000e32:	bd70      	pop	{r4, r5, r6, pc}
 8000e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e38:	4798      	blx	r3
 8000e3a:	3601      	adds	r6, #1
 8000e3c:	e7ee      	b.n	8000e1c <__libc_init_array+0xc>
 8000e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e42:	4798      	blx	r3
 8000e44:	3601      	adds	r6, #1
 8000e46:	e7f2      	b.n	8000e2e <__libc_init_array+0x1e>
 8000e48:	08001340 	.word	0x08001340
 8000e4c:	08001340 	.word	0x08001340
 8000e50:	08001340 	.word	0x08001340
 8000e54:	08001344 	.word	0x08001344

08000e58 <__retarget_lock_acquire_recursive>:
 8000e58:	4770      	bx	lr

08000e5a <__retarget_lock_release_recursive>:
 8000e5a:	4770      	bx	lr

08000e5c <_free_r>:
 8000e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e5e:	2900      	cmp	r1, #0
 8000e60:	d044      	beq.n	8000eec <_free_r+0x90>
 8000e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e66:	9001      	str	r0, [sp, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f1a1 0404 	sub.w	r4, r1, #4
 8000e6e:	bfb8      	it	lt
 8000e70:	18e4      	addlt	r4, r4, r3
 8000e72:	f000 f8df 	bl	8001034 <__malloc_lock>
 8000e76:	4a1e      	ldr	r2, [pc, #120]	; (8000ef0 <_free_r+0x94>)
 8000e78:	9801      	ldr	r0, [sp, #4]
 8000e7a:	6813      	ldr	r3, [r2, #0]
 8000e7c:	b933      	cbnz	r3, 8000e8c <_free_r+0x30>
 8000e7e:	6063      	str	r3, [r4, #4]
 8000e80:	6014      	str	r4, [r2, #0]
 8000e82:	b003      	add	sp, #12
 8000e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e88:	f000 b8da 	b.w	8001040 <__malloc_unlock>
 8000e8c:	42a3      	cmp	r3, r4
 8000e8e:	d908      	bls.n	8000ea2 <_free_r+0x46>
 8000e90:	6825      	ldr	r5, [r4, #0]
 8000e92:	1961      	adds	r1, r4, r5
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf01      	itttt	eq
 8000e98:	6819      	ldreq	r1, [r3, #0]
 8000e9a:	685b      	ldreq	r3, [r3, #4]
 8000e9c:	1949      	addeq	r1, r1, r5
 8000e9e:	6021      	streq	r1, [r4, #0]
 8000ea0:	e7ed      	b.n	8000e7e <_free_r+0x22>
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	b10b      	cbz	r3, 8000eac <_free_r+0x50>
 8000ea8:	42a3      	cmp	r3, r4
 8000eaa:	d9fa      	bls.n	8000ea2 <_free_r+0x46>
 8000eac:	6811      	ldr	r1, [r2, #0]
 8000eae:	1855      	adds	r5, r2, r1
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	d10b      	bne.n	8000ecc <_free_r+0x70>
 8000eb4:	6824      	ldr	r4, [r4, #0]
 8000eb6:	4421      	add	r1, r4
 8000eb8:	1854      	adds	r4, r2, r1
 8000eba:	42a3      	cmp	r3, r4
 8000ebc:	6011      	str	r1, [r2, #0]
 8000ebe:	d1e0      	bne.n	8000e82 <_free_r+0x26>
 8000ec0:	681c      	ldr	r4, [r3, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	6053      	str	r3, [r2, #4]
 8000ec6:	440c      	add	r4, r1
 8000ec8:	6014      	str	r4, [r2, #0]
 8000eca:	e7da      	b.n	8000e82 <_free_r+0x26>
 8000ecc:	d902      	bls.n	8000ed4 <_free_r+0x78>
 8000ece:	230c      	movs	r3, #12
 8000ed0:	6003      	str	r3, [r0, #0]
 8000ed2:	e7d6      	b.n	8000e82 <_free_r+0x26>
 8000ed4:	6825      	ldr	r5, [r4, #0]
 8000ed6:	1961      	adds	r1, r4, r5
 8000ed8:	428b      	cmp	r3, r1
 8000eda:	bf04      	itt	eq
 8000edc:	6819      	ldreq	r1, [r3, #0]
 8000ede:	685b      	ldreq	r3, [r3, #4]
 8000ee0:	6063      	str	r3, [r4, #4]
 8000ee2:	bf04      	itt	eq
 8000ee4:	1949      	addeq	r1, r1, r5
 8000ee6:	6021      	streq	r1, [r4, #0]
 8000ee8:	6054      	str	r4, [r2, #4]
 8000eea:	e7ca      	b.n	8000e82 <_free_r+0x26>
 8000eec:	b003      	add	sp, #12
 8000eee:	bd30      	pop	{r4, r5, pc}
 8000ef0:	20000218 	.word	0x20000218

08000ef4 <sbrk_aligned>:
 8000ef4:	b570      	push	{r4, r5, r6, lr}
 8000ef6:	4e0e      	ldr	r6, [pc, #56]	; (8000f30 <sbrk_aligned+0x3c>)
 8000ef8:	460c      	mov	r4, r1
 8000efa:	6831      	ldr	r1, [r6, #0]
 8000efc:	4605      	mov	r5, r0
 8000efe:	b911      	cbnz	r1, 8000f06 <sbrk_aligned+0x12>
 8000f00:	f000 f9d6 	bl	80012b0 <_sbrk_r>
 8000f04:	6030      	str	r0, [r6, #0]
 8000f06:	4621      	mov	r1, r4
 8000f08:	4628      	mov	r0, r5
 8000f0a:	f000 f9d1 	bl	80012b0 <_sbrk_r>
 8000f0e:	1c43      	adds	r3, r0, #1
 8000f10:	d00a      	beq.n	8000f28 <sbrk_aligned+0x34>
 8000f12:	1cc4      	adds	r4, r0, #3
 8000f14:	f024 0403 	bic.w	r4, r4, #3
 8000f18:	42a0      	cmp	r0, r4
 8000f1a:	d007      	beq.n	8000f2c <sbrk_aligned+0x38>
 8000f1c:	1a21      	subs	r1, r4, r0
 8000f1e:	4628      	mov	r0, r5
 8000f20:	f000 f9c6 	bl	80012b0 <_sbrk_r>
 8000f24:	3001      	adds	r0, #1
 8000f26:	d101      	bne.n	8000f2c <sbrk_aligned+0x38>
 8000f28:	f04f 34ff 	mov.w	r4, #4294967295
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	bd70      	pop	{r4, r5, r6, pc}
 8000f30:	2000021c 	.word	0x2000021c

08000f34 <_malloc_r>:
 8000f34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f38:	1ccd      	adds	r5, r1, #3
 8000f3a:	f025 0503 	bic.w	r5, r5, #3
 8000f3e:	3508      	adds	r5, #8
 8000f40:	2d0c      	cmp	r5, #12
 8000f42:	bf38      	it	cc
 8000f44:	250c      	movcc	r5, #12
 8000f46:	2d00      	cmp	r5, #0
 8000f48:	4607      	mov	r7, r0
 8000f4a:	db01      	blt.n	8000f50 <_malloc_r+0x1c>
 8000f4c:	42a9      	cmp	r1, r5
 8000f4e:	d905      	bls.n	8000f5c <_malloc_r+0x28>
 8000f50:	230c      	movs	r3, #12
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	2600      	movs	r6, #0
 8000f56:	4630      	mov	r0, r6
 8000f58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001030 <_malloc_r+0xfc>
 8000f60:	f000 f868 	bl	8001034 <__malloc_lock>
 8000f64:	f8d8 3000 	ldr.w	r3, [r8]
 8000f68:	461c      	mov	r4, r3
 8000f6a:	bb5c      	cbnz	r4, 8000fc4 <_malloc_r+0x90>
 8000f6c:	4629      	mov	r1, r5
 8000f6e:	4638      	mov	r0, r7
 8000f70:	f7ff ffc0 	bl	8000ef4 <sbrk_aligned>
 8000f74:	1c43      	adds	r3, r0, #1
 8000f76:	4604      	mov	r4, r0
 8000f78:	d155      	bne.n	8001026 <_malloc_r+0xf2>
 8000f7a:	f8d8 4000 	ldr.w	r4, [r8]
 8000f7e:	4626      	mov	r6, r4
 8000f80:	2e00      	cmp	r6, #0
 8000f82:	d145      	bne.n	8001010 <_malloc_r+0xdc>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d048      	beq.n	800101a <_malloc_r+0xe6>
 8000f88:	6823      	ldr	r3, [r4, #0]
 8000f8a:	4631      	mov	r1, r6
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	eb04 0903 	add.w	r9, r4, r3
 8000f92:	f000 f98d 	bl	80012b0 <_sbrk_r>
 8000f96:	4581      	cmp	r9, r0
 8000f98:	d13f      	bne.n	800101a <_malloc_r+0xe6>
 8000f9a:	6821      	ldr	r1, [r4, #0]
 8000f9c:	1a6d      	subs	r5, r5, r1
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	4638      	mov	r0, r7
 8000fa2:	f7ff ffa7 	bl	8000ef4 <sbrk_aligned>
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d037      	beq.n	800101a <_malloc_r+0xe6>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	442b      	add	r3, r5
 8000fae:	6023      	str	r3, [r4, #0]
 8000fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d038      	beq.n	800102a <_malloc_r+0xf6>
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	42a2      	cmp	r2, r4
 8000fbc:	d12b      	bne.n	8001016 <_malloc_r+0xe2>
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	e00f      	b.n	8000fe4 <_malloc_r+0xb0>
 8000fc4:	6822      	ldr	r2, [r4, #0]
 8000fc6:	1b52      	subs	r2, r2, r5
 8000fc8:	d41f      	bmi.n	800100a <_malloc_r+0xd6>
 8000fca:	2a0b      	cmp	r2, #11
 8000fcc:	d917      	bls.n	8000ffe <_malloc_r+0xca>
 8000fce:	1961      	adds	r1, r4, r5
 8000fd0:	42a3      	cmp	r3, r4
 8000fd2:	6025      	str	r5, [r4, #0]
 8000fd4:	bf18      	it	ne
 8000fd6:	6059      	strne	r1, [r3, #4]
 8000fd8:	6863      	ldr	r3, [r4, #4]
 8000fda:	bf08      	it	eq
 8000fdc:	f8c8 1000 	streq.w	r1, [r8]
 8000fe0:	5162      	str	r2, [r4, r5]
 8000fe2:	604b      	str	r3, [r1, #4]
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	f104 060b 	add.w	r6, r4, #11
 8000fea:	f000 f829 	bl	8001040 <__malloc_unlock>
 8000fee:	f026 0607 	bic.w	r6, r6, #7
 8000ff2:	1d23      	adds	r3, r4, #4
 8000ff4:	1af2      	subs	r2, r6, r3
 8000ff6:	d0ae      	beq.n	8000f56 <_malloc_r+0x22>
 8000ff8:	1b9b      	subs	r3, r3, r6
 8000ffa:	50a3      	str	r3, [r4, r2]
 8000ffc:	e7ab      	b.n	8000f56 <_malloc_r+0x22>
 8000ffe:	42a3      	cmp	r3, r4
 8001000:	6862      	ldr	r2, [r4, #4]
 8001002:	d1dd      	bne.n	8000fc0 <_malloc_r+0x8c>
 8001004:	f8c8 2000 	str.w	r2, [r8]
 8001008:	e7ec      	b.n	8000fe4 <_malloc_r+0xb0>
 800100a:	4623      	mov	r3, r4
 800100c:	6864      	ldr	r4, [r4, #4]
 800100e:	e7ac      	b.n	8000f6a <_malloc_r+0x36>
 8001010:	4634      	mov	r4, r6
 8001012:	6876      	ldr	r6, [r6, #4]
 8001014:	e7b4      	b.n	8000f80 <_malloc_r+0x4c>
 8001016:	4613      	mov	r3, r2
 8001018:	e7cc      	b.n	8000fb4 <_malloc_r+0x80>
 800101a:	230c      	movs	r3, #12
 800101c:	603b      	str	r3, [r7, #0]
 800101e:	4638      	mov	r0, r7
 8001020:	f000 f80e 	bl	8001040 <__malloc_unlock>
 8001024:	e797      	b.n	8000f56 <_malloc_r+0x22>
 8001026:	6025      	str	r5, [r4, #0]
 8001028:	e7dc      	b.n	8000fe4 <_malloc_r+0xb0>
 800102a:	605b      	str	r3, [r3, #4]
 800102c:	deff      	udf	#255	; 0xff
 800102e:	bf00      	nop
 8001030:	20000218 	.word	0x20000218

08001034 <__malloc_lock>:
 8001034:	4801      	ldr	r0, [pc, #4]	; (800103c <__malloc_lock+0x8>)
 8001036:	f7ff bf0f 	b.w	8000e58 <__retarget_lock_acquire_recursive>
 800103a:	bf00      	nop
 800103c:	20000214 	.word	0x20000214

08001040 <__malloc_unlock>:
 8001040:	4801      	ldr	r0, [pc, #4]	; (8001048 <__malloc_unlock+0x8>)
 8001042:	f7ff bf0a 	b.w	8000e5a <__retarget_lock_release_recursive>
 8001046:	bf00      	nop
 8001048:	20000214 	.word	0x20000214

0800104c <__sflush_r>:
 800104c:	898a      	ldrh	r2, [r1, #12]
 800104e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001052:	4605      	mov	r5, r0
 8001054:	0710      	lsls	r0, r2, #28
 8001056:	460c      	mov	r4, r1
 8001058:	d458      	bmi.n	800110c <__sflush_r+0xc0>
 800105a:	684b      	ldr	r3, [r1, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	dc05      	bgt.n	800106c <__sflush_r+0x20>
 8001060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001062:	2b00      	cmp	r3, #0
 8001064:	dc02      	bgt.n	800106c <__sflush_r+0x20>
 8001066:	2000      	movs	r0, #0
 8001068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800106c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800106e:	2e00      	cmp	r6, #0
 8001070:	d0f9      	beq.n	8001066 <__sflush_r+0x1a>
 8001072:	2300      	movs	r3, #0
 8001074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001078:	682f      	ldr	r7, [r5, #0]
 800107a:	6a21      	ldr	r1, [r4, #32]
 800107c:	602b      	str	r3, [r5, #0]
 800107e:	d032      	beq.n	80010e6 <__sflush_r+0x9a>
 8001080:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001082:	89a3      	ldrh	r3, [r4, #12]
 8001084:	075a      	lsls	r2, r3, #29
 8001086:	d505      	bpl.n	8001094 <__sflush_r+0x48>
 8001088:	6863      	ldr	r3, [r4, #4]
 800108a:	1ac0      	subs	r0, r0, r3
 800108c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800108e:	b10b      	cbz	r3, 8001094 <__sflush_r+0x48>
 8001090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001092:	1ac0      	subs	r0, r0, r3
 8001094:	2300      	movs	r3, #0
 8001096:	4602      	mov	r2, r0
 8001098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800109a:	6a21      	ldr	r1, [r4, #32]
 800109c:	4628      	mov	r0, r5
 800109e:	47b0      	blx	r6
 80010a0:	1c43      	adds	r3, r0, #1
 80010a2:	89a3      	ldrh	r3, [r4, #12]
 80010a4:	d106      	bne.n	80010b4 <__sflush_r+0x68>
 80010a6:	6829      	ldr	r1, [r5, #0]
 80010a8:	291d      	cmp	r1, #29
 80010aa:	d82b      	bhi.n	8001104 <__sflush_r+0xb8>
 80010ac:	4a29      	ldr	r2, [pc, #164]	; (8001154 <__sflush_r+0x108>)
 80010ae:	410a      	asrs	r2, r1
 80010b0:	07d6      	lsls	r6, r2, #31
 80010b2:	d427      	bmi.n	8001104 <__sflush_r+0xb8>
 80010b4:	2200      	movs	r2, #0
 80010b6:	6062      	str	r2, [r4, #4]
 80010b8:	04d9      	lsls	r1, r3, #19
 80010ba:	6922      	ldr	r2, [r4, #16]
 80010bc:	6022      	str	r2, [r4, #0]
 80010be:	d504      	bpl.n	80010ca <__sflush_r+0x7e>
 80010c0:	1c42      	adds	r2, r0, #1
 80010c2:	d101      	bne.n	80010c8 <__sflush_r+0x7c>
 80010c4:	682b      	ldr	r3, [r5, #0]
 80010c6:	b903      	cbnz	r3, 80010ca <__sflush_r+0x7e>
 80010c8:	6560      	str	r0, [r4, #84]	; 0x54
 80010ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010cc:	602f      	str	r7, [r5, #0]
 80010ce:	2900      	cmp	r1, #0
 80010d0:	d0c9      	beq.n	8001066 <__sflush_r+0x1a>
 80010d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010d6:	4299      	cmp	r1, r3
 80010d8:	d002      	beq.n	80010e0 <__sflush_r+0x94>
 80010da:	4628      	mov	r0, r5
 80010dc:	f7ff febe 	bl	8000e5c <_free_r>
 80010e0:	2000      	movs	r0, #0
 80010e2:	6360      	str	r0, [r4, #52]	; 0x34
 80010e4:	e7c0      	b.n	8001068 <__sflush_r+0x1c>
 80010e6:	2301      	movs	r3, #1
 80010e8:	4628      	mov	r0, r5
 80010ea:	47b0      	blx	r6
 80010ec:	1c41      	adds	r1, r0, #1
 80010ee:	d1c8      	bne.n	8001082 <__sflush_r+0x36>
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0c5      	beq.n	8001082 <__sflush_r+0x36>
 80010f6:	2b1d      	cmp	r3, #29
 80010f8:	d001      	beq.n	80010fe <__sflush_r+0xb2>
 80010fa:	2b16      	cmp	r3, #22
 80010fc:	d101      	bne.n	8001102 <__sflush_r+0xb6>
 80010fe:	602f      	str	r7, [r5, #0]
 8001100:	e7b1      	b.n	8001066 <__sflush_r+0x1a>
 8001102:	89a3      	ldrh	r3, [r4, #12]
 8001104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001108:	81a3      	strh	r3, [r4, #12]
 800110a:	e7ad      	b.n	8001068 <__sflush_r+0x1c>
 800110c:	690f      	ldr	r7, [r1, #16]
 800110e:	2f00      	cmp	r7, #0
 8001110:	d0a9      	beq.n	8001066 <__sflush_r+0x1a>
 8001112:	0793      	lsls	r3, r2, #30
 8001114:	680e      	ldr	r6, [r1, #0]
 8001116:	bf08      	it	eq
 8001118:	694b      	ldreq	r3, [r1, #20]
 800111a:	600f      	str	r7, [r1, #0]
 800111c:	bf18      	it	ne
 800111e:	2300      	movne	r3, #0
 8001120:	eba6 0807 	sub.w	r8, r6, r7
 8001124:	608b      	str	r3, [r1, #8]
 8001126:	f1b8 0f00 	cmp.w	r8, #0
 800112a:	dd9c      	ble.n	8001066 <__sflush_r+0x1a>
 800112c:	6a21      	ldr	r1, [r4, #32]
 800112e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001130:	4643      	mov	r3, r8
 8001132:	463a      	mov	r2, r7
 8001134:	4628      	mov	r0, r5
 8001136:	47b0      	blx	r6
 8001138:	2800      	cmp	r0, #0
 800113a:	dc06      	bgt.n	800114a <__sflush_r+0xfe>
 800113c:	89a3      	ldrh	r3, [r4, #12]
 800113e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001142:	81a3      	strh	r3, [r4, #12]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	e78e      	b.n	8001068 <__sflush_r+0x1c>
 800114a:	4407      	add	r7, r0
 800114c:	eba8 0800 	sub.w	r8, r8, r0
 8001150:	e7e9      	b.n	8001126 <__sflush_r+0xda>
 8001152:	bf00      	nop
 8001154:	dfbffffe 	.word	0xdfbffffe

08001158 <_fflush_r>:
 8001158:	b538      	push	{r3, r4, r5, lr}
 800115a:	690b      	ldr	r3, [r1, #16]
 800115c:	4605      	mov	r5, r0
 800115e:	460c      	mov	r4, r1
 8001160:	b913      	cbnz	r3, 8001168 <_fflush_r+0x10>
 8001162:	2500      	movs	r5, #0
 8001164:	4628      	mov	r0, r5
 8001166:	bd38      	pop	{r3, r4, r5, pc}
 8001168:	b118      	cbz	r0, 8001172 <_fflush_r+0x1a>
 800116a:	6a03      	ldr	r3, [r0, #32]
 800116c:	b90b      	cbnz	r3, 8001172 <_fflush_r+0x1a>
 800116e:	f7ff fc91 	bl	8000a94 <__sinit>
 8001172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0f3      	beq.n	8001162 <_fflush_r+0xa>
 800117a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800117c:	07d0      	lsls	r0, r2, #31
 800117e:	d404      	bmi.n	800118a <_fflush_r+0x32>
 8001180:	0599      	lsls	r1, r3, #22
 8001182:	d402      	bmi.n	800118a <_fflush_r+0x32>
 8001184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001186:	f7ff fe67 	bl	8000e58 <__retarget_lock_acquire_recursive>
 800118a:	4628      	mov	r0, r5
 800118c:	4621      	mov	r1, r4
 800118e:	f7ff ff5d 	bl	800104c <__sflush_r>
 8001192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001194:	07da      	lsls	r2, r3, #31
 8001196:	4605      	mov	r5, r0
 8001198:	d4e4      	bmi.n	8001164 <_fflush_r+0xc>
 800119a:	89a3      	ldrh	r3, [r4, #12]
 800119c:	059b      	lsls	r3, r3, #22
 800119e:	d4e1      	bmi.n	8001164 <_fflush_r+0xc>
 80011a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80011a2:	f7ff fe5a 	bl	8000e5a <__retarget_lock_release_recursive>
 80011a6:	e7dd      	b.n	8001164 <_fflush_r+0xc>

080011a8 <__swhatbuf_r>:
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	460c      	mov	r4, r1
 80011ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b0:	2900      	cmp	r1, #0
 80011b2:	b096      	sub	sp, #88	; 0x58
 80011b4:	4615      	mov	r5, r2
 80011b6:	461e      	mov	r6, r3
 80011b8:	da0d      	bge.n	80011d6 <__swhatbuf_r+0x2e>
 80011ba:	89a3      	ldrh	r3, [r4, #12]
 80011bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	bf0c      	ite	eq
 80011c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80011ca:	2340      	movne	r3, #64	; 0x40
 80011cc:	2000      	movs	r0, #0
 80011ce:	6031      	str	r1, [r6, #0]
 80011d0:	602b      	str	r3, [r5, #0]
 80011d2:	b016      	add	sp, #88	; 0x58
 80011d4:	bd70      	pop	{r4, r5, r6, pc}
 80011d6:	466a      	mov	r2, sp
 80011d8:	f000 f848 	bl	800126c <_fstat_r>
 80011dc:	2800      	cmp	r0, #0
 80011de:	dbec      	blt.n	80011ba <__swhatbuf_r+0x12>
 80011e0:	9901      	ldr	r1, [sp, #4]
 80011e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80011e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80011ea:	4259      	negs	r1, r3
 80011ec:	4159      	adcs	r1, r3
 80011ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f2:	e7eb      	b.n	80011cc <__swhatbuf_r+0x24>

080011f4 <__smakebuf_r>:
 80011f4:	898b      	ldrh	r3, [r1, #12]
 80011f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80011f8:	079d      	lsls	r5, r3, #30
 80011fa:	4606      	mov	r6, r0
 80011fc:	460c      	mov	r4, r1
 80011fe:	d507      	bpl.n	8001210 <__smakebuf_r+0x1c>
 8001200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001204:	6023      	str	r3, [r4, #0]
 8001206:	6123      	str	r3, [r4, #16]
 8001208:	2301      	movs	r3, #1
 800120a:	6163      	str	r3, [r4, #20]
 800120c:	b002      	add	sp, #8
 800120e:	bd70      	pop	{r4, r5, r6, pc}
 8001210:	ab01      	add	r3, sp, #4
 8001212:	466a      	mov	r2, sp
 8001214:	f7ff ffc8 	bl	80011a8 <__swhatbuf_r>
 8001218:	9900      	ldr	r1, [sp, #0]
 800121a:	4605      	mov	r5, r0
 800121c:	4630      	mov	r0, r6
 800121e:	f7ff fe89 	bl	8000f34 <_malloc_r>
 8001222:	b948      	cbnz	r0, 8001238 <__smakebuf_r+0x44>
 8001224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001228:	059a      	lsls	r2, r3, #22
 800122a:	d4ef      	bmi.n	800120c <__smakebuf_r+0x18>
 800122c:	f023 0303 	bic.w	r3, r3, #3
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	81a3      	strh	r3, [r4, #12]
 8001236:	e7e3      	b.n	8001200 <__smakebuf_r+0xc>
 8001238:	89a3      	ldrh	r3, [r4, #12]
 800123a:	6020      	str	r0, [r4, #0]
 800123c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001240:	81a3      	strh	r3, [r4, #12]
 8001242:	9b00      	ldr	r3, [sp, #0]
 8001244:	6163      	str	r3, [r4, #20]
 8001246:	9b01      	ldr	r3, [sp, #4]
 8001248:	6120      	str	r0, [r4, #16]
 800124a:	b15b      	cbz	r3, 8001264 <__smakebuf_r+0x70>
 800124c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001250:	4630      	mov	r0, r6
 8001252:	f000 f81d 	bl	8001290 <_isatty_r>
 8001256:	b128      	cbz	r0, 8001264 <__smakebuf_r+0x70>
 8001258:	89a3      	ldrh	r3, [r4, #12]
 800125a:	f023 0303 	bic.w	r3, r3, #3
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	81a3      	strh	r3, [r4, #12]
 8001264:	89a3      	ldrh	r3, [r4, #12]
 8001266:	431d      	orrs	r5, r3
 8001268:	81a5      	strh	r5, [r4, #12]
 800126a:	e7cf      	b.n	800120c <__smakebuf_r+0x18>

0800126c <_fstat_r>:
 800126c:	b538      	push	{r3, r4, r5, lr}
 800126e:	4d07      	ldr	r5, [pc, #28]	; (800128c <_fstat_r+0x20>)
 8001270:	2300      	movs	r3, #0
 8001272:	4604      	mov	r4, r0
 8001274:	4608      	mov	r0, r1
 8001276:	4611      	mov	r1, r2
 8001278:	602b      	str	r3, [r5, #0]
 800127a:	f7ff fb08 	bl	800088e <_fstat>
 800127e:	1c43      	adds	r3, r0, #1
 8001280:	d102      	bne.n	8001288 <_fstat_r+0x1c>
 8001282:	682b      	ldr	r3, [r5, #0]
 8001284:	b103      	cbz	r3, 8001288 <_fstat_r+0x1c>
 8001286:	6023      	str	r3, [r4, #0]
 8001288:	bd38      	pop	{r3, r4, r5, pc}
 800128a:	bf00      	nop
 800128c:	20000210 	.word	0x20000210

08001290 <_isatty_r>:
 8001290:	b538      	push	{r3, r4, r5, lr}
 8001292:	4d06      	ldr	r5, [pc, #24]	; (80012ac <_isatty_r+0x1c>)
 8001294:	2300      	movs	r3, #0
 8001296:	4604      	mov	r4, r0
 8001298:	4608      	mov	r0, r1
 800129a:	602b      	str	r3, [r5, #0]
 800129c:	f7ff fb07 	bl	80008ae <_isatty>
 80012a0:	1c43      	adds	r3, r0, #1
 80012a2:	d102      	bne.n	80012aa <_isatty_r+0x1a>
 80012a4:	682b      	ldr	r3, [r5, #0]
 80012a6:	b103      	cbz	r3, 80012aa <_isatty_r+0x1a>
 80012a8:	6023      	str	r3, [r4, #0]
 80012aa:	bd38      	pop	{r3, r4, r5, pc}
 80012ac:	20000210 	.word	0x20000210

080012b0 <_sbrk_r>:
 80012b0:	b538      	push	{r3, r4, r5, lr}
 80012b2:	4d06      	ldr	r5, [pc, #24]	; (80012cc <_sbrk_r+0x1c>)
 80012b4:	2300      	movs	r3, #0
 80012b6:	4604      	mov	r4, r0
 80012b8:	4608      	mov	r0, r1
 80012ba:	602b      	str	r3, [r5, #0]
 80012bc:	f7ff fb10 	bl	80008e0 <_sbrk>
 80012c0:	1c43      	adds	r3, r0, #1
 80012c2:	d102      	bne.n	80012ca <_sbrk_r+0x1a>
 80012c4:	682b      	ldr	r3, [r5, #0]
 80012c6:	b103      	cbz	r3, 80012ca <_sbrk_r+0x1a>
 80012c8:	6023      	str	r3, [r4, #0]
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
 80012cc:	20000210 	.word	0x20000210

080012d0 <_init>:
 80012d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d2:	bf00      	nop
 80012d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012d6:	bc08      	pop	{r3}
 80012d8:	469e      	mov	lr, r3
 80012da:	4770      	bx	lr

080012dc <_fini>:
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012de:	bf00      	nop
 80012e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012e2:	bc08      	pop	{r3}
 80012e4:	469e      	mov	lr, r3
 80012e6:	4770      	bx	lr
