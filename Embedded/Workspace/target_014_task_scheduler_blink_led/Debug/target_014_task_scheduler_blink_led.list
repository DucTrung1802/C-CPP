
target_014_task_scheduler_blink_led.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e98  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08001030  08001030  00011030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010c8  080010c8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080010c8  080010c8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010c8  080010c8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010c8  080010c8  000110c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010cc  080010cc  000110cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080010d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000005c  0800112c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  0800112c  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b8c  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000414  00000000  00000000  00020c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00021070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000125  00000000  00000000  00021210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002bc8  00000000  00000000  00021335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001688  00000000  00000000  00023efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009b54  00000000  00000000  00025585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000bb8  00000000  00000000  0002f0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0002fc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001018 	.word	0x08001018

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08001018 	.word	0x08001018

080001d8 <main>:
} TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	printf("Hello\n");
 80001dc:	4809      	ldr	r0, [pc, #36]	; (8000204 <main+0x2c>)
 80001de:	f000 fb87 	bl	80008f0 <puts>

	enableProcessorFaults();
 80001e2:	f000 f833 	bl	800024c <enableProcessorFaults>

	initSchedulerStack(SCHED_STACK_START);
 80001e6:	4808      	ldr	r0, [pc, #32]	; (8000208 <main+0x30>)
 80001e8:	f000 f888 	bl	80002fc <initSchedulerStack>

	initTaskStacks();
 80001ec:	f000 f88c 	bl	8000308 <initTaskStacks>

	initSystickTimer(TICK_HZ);
 80001f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f4:	f000 f84a 	bl	800028c <initSystickTimer>

	switchToPSP();
 80001f8:	f000 f900 	bl	80003fc <switchToPSP>

	task1_handler();
 80001fc:	f000 f806 	bl	800020c <task1_handler>

	/* Loop forever */
	for (;;)
 8000200:	e7fe      	b.n	8000200 <main+0x28>
 8000202:	bf00      	nop
 8000204:	08001030 	.word	0x08001030
 8000208:	2001f000 	.word	0x2001f000

0800020c <task1_handler>:
		;
}

void task1_handler()
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	while (1)
	{
		printf("This is task 1\n");
 8000210:	4801      	ldr	r0, [pc, #4]	; (8000218 <task1_handler+0xc>)
 8000212:	f000 fb6d 	bl	80008f0 <puts>
 8000216:	e7fb      	b.n	8000210 <task1_handler+0x4>
 8000218:	08001038 	.word	0x08001038

0800021c <task2_handler>:
	}
}

void task2_handler()
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	while (1)
	{
		printf("This is task 2\n");
 8000220:	4801      	ldr	r0, [pc, #4]	; (8000228 <task2_handler+0xc>)
 8000222:	f000 fb65 	bl	80008f0 <puts>
 8000226:	e7fb      	b.n	8000220 <task2_handler+0x4>
 8000228:	08001048 	.word	0x08001048

0800022c <task3_handler>:
	}
}

void task3_handler()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	while (1)
	{
		printf("This is task 3\n");
 8000230:	4801      	ldr	r0, [pc, #4]	; (8000238 <task3_handler+0xc>)
 8000232:	f000 fb5d 	bl	80008f0 <puts>
 8000236:	e7fb      	b.n	8000230 <task3_handler+0x4>
 8000238:	08001058 	.word	0x08001058

0800023c <task4_handler>:
	}
}

void task4_handler()
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	while (1)
	{
		printf("This is task 4\n");
 8000240:	4801      	ldr	r0, [pc, #4]	; (8000248 <task4_handler+0xc>)
 8000242:	f000 fb55 	bl	80008f0 <puts>
 8000246:	e7fb      	b.n	8000240 <task4_handler+0x4>
 8000248:	08001068 	.word	0x08001068

0800024c <enableProcessorFaults>:
	}
}

void enableProcessorFaults()
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*) 0xE000ED24;
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <enableProcessorFaults+0x3c>)
 8000254:	607b      	str	r3, [r7, #4]

	*pSHCSR |= (1 << 16); // mem manage
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 17); // bus fault
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1 << 18); // usage fault
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	601a      	str	r2, [r3, #0]
}
 800027a:	bf00      	nop
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	e000ed24 	.word	0xe000ed24

0800028c <initSystickTimer>:

void initSystickTimer(uint32_t tick_hz)
{
 800028c:	b480      	push	{r7}
 800028e:	b087      	sub	sp, #28
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	// SysTick Reload Value Register
	uint32_t volatile *const pSRVR = (uint32_t*) 0xE000E014;
 8000294:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <initSystickTimer+0x64>)
 8000296:	617b      	str	r3, [r7, #20]

	// SysTick Control and Status Register
	uint32_t volatile *const pSCSR = (uint32_t*) 0xE000E010;
 8000298:	4b16      	ldr	r3, [pc, #88]	; (80002f4 <initSystickTimer+0x68>)
 800029a:	613b      	str	r3, [r7, #16]

	uint32_t count_value = (SYSTICK_TIM_CLK / tick_hz) - 1;
 800029c:	4a16      	ldr	r2, [pc, #88]	; (80002f8 <initSystickTimer+0x6c>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002a4:	3b01      	subs	r3, #1
 80002a6:	60fb      	str	r3, [r7, #12]

	// Clear the value of pSRVR
	*pSRVR &= ~(0x00FFFFFF);
 80002a8:	697b      	ldr	r3, [r7, #20]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	601a      	str	r2, [r3, #0]

	// Load the reload value into pSRVR
	*pSRVR |= count_value;
 80002b4:	697b      	ldr	r3, [r7, #20]
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	431a      	orrs	r2, r3
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	601a      	str	r2, [r3, #0]

	// Do some configuration
	*pSCSR |= (1 << 1);
 80002c0:	693b      	ldr	r3, [r7, #16]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f043 0202 	orr.w	r2, r3, #2
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2);
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f043 0204 	orr.w	r2, r3, #4
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	601a      	str	r2, [r3, #0]

	// Enable the systick
	*pSCSR |= (1 << 0);
 80002d8:	693b      	ldr	r3, [r7, #16]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f043 0201 	orr.w	r2, r3, #1
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	601a      	str	r2, [r3, #0]
}
 80002e4:	bf00      	nop
 80002e6:	371c      	adds	r7, #28
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000e014 	.word	0xe000e014
 80002f4:	e000e010 	.word	0xe000e010
 80002f8:	00f42400 	.word	0x00f42400

080002fc <initSchedulerStack>:

__attribute__((naked)) void initSchedulerStack(
		uint32_t const sched_top_of_stack)
{
 80002fc:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP,%0"::"r"(sched_top_of_stack):);
 80002fe:	f383 8808 	msr	MSP, r3

	// Return from function call ( main() )
	__asm volatile ("BX LR");
 8000302:	4770      	bx	lr
}
 8000304:	bf00      	nop
	...

08000308 <initTaskStacks>:

void initTaskStacks()
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0

	uint32_t *pPSP;

	user_tasks[0].psp_value = T1_STACK_START;
 800030e:	4b32      	ldr	r3, [pc, #200]	; (80003d8 <initTaskStacks+0xd0>)
 8000310:	4a32      	ldr	r2, [pc, #200]	; (80003dc <initTaskStacks+0xd4>)
 8000312:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T2_STACK_START;
 8000314:	4b30      	ldr	r3, [pc, #192]	; (80003d8 <initTaskStacks+0xd0>)
 8000316:	4a32      	ldr	r2, [pc, #200]	; (80003e0 <initTaskStacks+0xd8>)
 8000318:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T3_STACK_START;
 800031a:	4b2f      	ldr	r3, [pc, #188]	; (80003d8 <initTaskStacks+0xd0>)
 800031c:	4a31      	ldr	r2, [pc, #196]	; (80003e4 <initTaskStacks+0xdc>)
 800031e:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T4_STACK_START;
 8000320:	4b2d      	ldr	r3, [pc, #180]	; (80003d8 <initTaskStacks+0xd0>)
 8000322:	4a31      	ldr	r2, [pc, #196]	; (80003e8 <initTaskStacks+0xe0>)
 8000324:	631a      	str	r2, [r3, #48]	; 0x30

	user_tasks[0].task_handler = task1_handler;
 8000326:	4b2c      	ldr	r3, [pc, #176]	; (80003d8 <initTaskStacks+0xd0>)
 8000328:	4a30      	ldr	r2, [pc, #192]	; (80003ec <initTaskStacks+0xe4>)
 800032a:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task2_handler;
 800032c:	4b2a      	ldr	r3, [pc, #168]	; (80003d8 <initTaskStacks+0xd0>)
 800032e:	4a30      	ldr	r2, [pc, #192]	; (80003f0 <initTaskStacks+0xe8>)
 8000330:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task3_handler;
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <initTaskStacks+0xd0>)
 8000334:	4a2f      	ldr	r2, [pc, #188]	; (80003f4 <initTaskStacks+0xec>)
 8000336:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task4_handler;
 8000338:	4b27      	ldr	r3, [pc, #156]	; (80003d8 <initTaskStacks+0xd0>)
 800033a:	4a2f      	ldr	r2, [pc, #188]	; (80003f8 <initTaskStacks+0xf0>)
 800033c:	63da      	str	r2, [r3, #60]	; 0x3c

	for (int i = 0; i < MAX_TASKS; i++)
 800033e:	2300      	movs	r3, #0
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	e03e      	b.n	80003c2 <initTaskStacks+0xba>
	{
		user_tasks[i].current_state = TASK_RUNNING_STATE;
 8000344:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <initTaskStacks+0xd0>)
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	011b      	lsls	r3, r3, #4
 800034a:	4413      	add	r3, r2
 800034c:	3308      	adds	r3, #8
 800034e:	2200      	movs	r2, #0
 8000350:	701a      	strb	r2, [r3, #0]

		pPSP = (uint32_t*) user_tasks[i].psp_value;
 8000352:	4a21      	ldr	r2, [pc, #132]	; (80003d8 <initTaskStacks+0xd0>)
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	011b      	lsls	r3, r3, #4
 8000358:	4413      	add	r3, r2
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	60fb      	str	r3, [r7, #12]

		// XPSR
		pPSP--;
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	3b04      	subs	r3, #4
 8000362:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // 0x01000000 - just turn on T bit
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800036a:	601a      	str	r2, [r3, #0]

		// PC
		pPSP--;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	3b04      	subs	r3, #4
 8000370:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t) user_tasks[i].task_handler;
 8000372:	4a19      	ldr	r2, [pc, #100]	; (80003d8 <initTaskStacks+0xd0>)
 8000374:	68bb      	ldr	r3, [r7, #8]
 8000376:	011b      	lsls	r3, r3, #4
 8000378:	4413      	add	r3, r2
 800037a:	330c      	adds	r3, #12
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	461a      	mov	r2, r3
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	601a      	str	r2, [r3, #0]

		// LR
		pPSP--;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	3b04      	subs	r3, #4
 8000388:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	f06f 0202 	mvn.w	r2, #2
 8000390:	601a      	str	r2, [r3, #0]

		for (int j = 0; j < 13; j++)
 8000392:	2300      	movs	r3, #0
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	e008      	b.n	80003aa <initTaskStacks+0xa2>
		{
			pPSP--;
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	3b04      	subs	r3, #4
 800039c:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 13; j++)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3301      	adds	r3, #1
 80003a8:	607b      	str	r3, [r7, #4]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	2b0c      	cmp	r3, #12
 80003ae:	ddf3      	ble.n	8000398 <initTaskStacks+0x90>
		}

		user_tasks[i].psp_value = (uint32_t) pPSP;
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	4909      	ldr	r1, [pc, #36]	; (80003d8 <initTaskStacks+0xd0>)
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	011b      	lsls	r3, r3, #4
 80003b8:	440b      	add	r3, r1
 80003ba:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < MAX_TASKS; i++)
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	3301      	adds	r3, #1
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d9bd      	bls.n	8000344 <initTaskStacks+0x3c>
	}
}
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	3714      	adds	r7, #20
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	2000007c 	.word	0x2000007c
 80003dc:	20020000 	.word	0x20020000
 80003e0:	2001fc00 	.word	0x2001fc00
 80003e4:	2001f800 	.word	0x2001f800
 80003e8:	2001f400 	.word	0x2001f400
 80003ec:	0800020d 	.word	0x0800020d
 80003f0:	0800021d 	.word	0x0800021d
 80003f4:	0800022d 	.word	0x0800022d
 80003f8:	0800023d 	.word	0x0800023d

080003fc <switchToPSP>:
	// 1. Initialize the PSP with task 1 stack start

	// Get the value of PSP of current stack

	// Preserve LR which connects back to main()
	__asm volatile ("PUSH {LR}");
 80003fc:	b500      	push	{lr}
	__asm volatile ("BL getPSPValue");
 80003fe:	f000 f821 	bl	8000444 <getPSPValue>

	// Initialize PSP
	__asm volatile ("MSR PSP,R0");
 8000402:	f380 8809 	msr	PSP, r0

	// Pops back LR value
	__asm volatile ("POP {LR}");
 8000406:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. Change SP to PSP using CONTROL register
	__asm volatile ("MOV R0,#0x02");
 800040a:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 800040e:	f380 8814 	msr	CONTROL, r0

	// Return from function call ( main() )
	__asm volatile ("BX LR");
 8000412:	4770      	bx	lr
}
 8000414:	bf00      	nop
	...

08000418 <savePSPValue>:

void savePSPValue(uint32_t const stack_addr)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = stack_addr;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <savePSPValue+0x24>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	4a06      	ldr	r2, [pc, #24]	; (8000440 <savePSPValue+0x28>)
 8000426:	011b      	lsls	r3, r3, #4
 8000428:	4413      	add	r3, r2
 800042a:	687a      	ldr	r2, [r7, #4]
 800042c:	601a      	str	r2, [r3, #0]
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	20000078 	.word	0x20000078
 8000440:	2000007c 	.word	0x2000007c

08000444 <getPSPValue>:

uint32_t getPSPValue()
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 8000448:	4b05      	ldr	r3, [pc, #20]	; (8000460 <getPSPValue+0x1c>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	4a05      	ldr	r2, [pc, #20]	; (8000464 <getPSPValue+0x20>)
 800044e:	011b      	lsls	r3, r3, #4
 8000450:	4413      	add	r3, r2
 8000452:	681b      	ldr	r3, [r3, #0]
}
 8000454:	4618      	mov	r0, r3
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000078 	.word	0x20000078
 8000464:	2000007c 	.word	0x2000007c

08000468 <updateNextTask>:

void updateNextTask()
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
	current_task++;
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <updateNextTask+0x28>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	3301      	adds	r3, #1
 8000472:	b2da      	uxtb	r2, r3
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <updateNextTask+0x28>)
 8000476:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <updateNextTask+0x28>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	f003 0303 	and.w	r3, r3, #3
 8000480:	b2da      	uxtb	r2, r3
 8000482:	4b03      	ldr	r3, [pc, #12]	; (8000490 <updateNextTask+0x28>)
 8000484:	701a      	strb	r2, [r3, #0]
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	20000078 	.word	0x20000078

08000494 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler()
{
	/* Save the context of current task */

	// 1. Get current running task's PSP value
	__asm volatile ("MRS R0,PSP");
 8000494:	f3ef 8009 	mrs	r0, PSP
	// Just like PUSH instruction but CANNOT use PUSH instruction
	// since this is handler, MSP will be affected.
	// => Use STORE operation
	// Use STMDB instruction (Example syntax: "STMDB R1!,{R3-R6,R11,R12}")
	// "Rn!" symbol is use to load final address to Rn register
	__asm volatile ("STMDB R0!,{R4-R11}");
 8000498:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 3. PUSH LR
	__asm volatile ("PUSH {LR}");
 800049c:	b500      	push	{lr}

	// 4. Save the current value of PSP
	__asm volatile ("BL savePSPValue");
 800049e:	f7ff ffbb 	bl	8000418 <savePSPValue>

	/* Retrieve the context of next task */

	// 1. Decide the next task to run
	__asm volatile ("BL updateNextTask");
 80004a2:	f7ff ffe1 	bl	8000468 <updateNextTask>

	// 2. Get its past PSP value
	__asm volatile ("BL getPSPValue");
 80004a6:	f7ff ffcd 	bl	8000444 <getPSPValue>
	// at this moment, PSP value is in R0 register

	// 3. Using that PSP value retrieve SF2 (R4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 80004aa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// 4. Update PSP and exit
	__asm volatile ("MSR PSP,R0");
 80004ae:	f380 8809 	msr	PSP, r0

	// 5. POP LR
	__asm volatile ("POP {LR}");
 80004b2:	f85d eb04 	ldr.w	lr, [sp], #4

	// 6. Return from function call
	__asm volatile ("BX LR");
 80004b6:	4770      	bx	lr
}
 80004b8:	bf00      	nop
	...

080004bc <MemManage_Handler>:

void MemManage_Handler()
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	printf("MemManage_Handler\n");
 80004c0:	4801      	ldr	r0, [pc, #4]	; (80004c8 <MemManage_Handler+0xc>)
 80004c2:	f000 fa15 	bl	80008f0 <puts>
	while (1)
 80004c6:	e7fe      	b.n	80004c6 <MemManage_Handler+0xa>
 80004c8:	08001078 	.word	0x08001078

080004cc <BusFault_Handler>:
		;
}

void BusFault_Handler()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	printf("BusFault_Handler\n");
 80004d0:	4801      	ldr	r0, [pc, #4]	; (80004d8 <BusFault_Handler+0xc>)
 80004d2:	f000 fa0d 	bl	80008f0 <puts>
	while (1)
 80004d6:	e7fe      	b.n	80004d6 <BusFault_Handler+0xa>
 80004d8:	0800108c 	.word	0x0800108c

080004dc <UsageFault_Handler>:
		;
}

void UsageFault_Handler()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	printf("UsageFault_Handler\n");
 80004e0:	4801      	ldr	r0, [pc, #4]	; (80004e8 <UsageFault_Handler+0xc>)
 80004e2:	f000 fa05 	bl	80008f0 <puts>
	while (1)
 80004e6:	e7fe      	b.n	80004e6 <UsageFault_Handler+0xa>
 80004e8:	080010a0 	.word	0x080010a0

080004ec <HardFault_Handler>:
		;
}

void HardFault_Handler()
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	printf("HardFault_Handler\n");
 80004f0:	4801      	ldr	r0, [pc, #4]	; (80004f8 <HardFault_Handler+0xc>)
 80004f2:	f000 f9fd 	bl	80008f0 <puts>
	while (1)
 80004f6:	e7fe      	b.n	80004f6 <HardFault_Handler+0xa>
 80004f8:	080010b4 	.word	0x080010b4

080004fc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <ITM_SendChar+0x48>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0e      	ldr	r2, [pc, #56]	; (8000544 <ITM_SendChar+0x48>)
 800050c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000510:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <ITM_SendChar+0x4c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a0c      	ldr	r2, [pc, #48]	; (8000548 <ITM_SendChar+0x4c>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800051e:	bf00      	nop
 8000520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f8      	beq.n	8000520 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800052e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	6013      	str	r3, [r2, #0]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	e000edfc 	.word	0xe000edfc
 8000548:	e0000e00 	.word	0xe0000e00

0800054c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000558:	2300      	movs	r3, #0
 800055a:	617b      	str	r3, [r7, #20]
 800055c:	e00a      	b.n	8000574 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800055e:	f3af 8000 	nop.w
 8000562:	4601      	mov	r1, r0
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	1c5a      	adds	r2, r3, #1
 8000568:	60ba      	str	r2, [r7, #8]
 800056a:	b2ca      	uxtb	r2, r1
 800056c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056e:	697b      	ldr	r3, [r7, #20]
 8000570:	3301      	adds	r3, #1
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	697a      	ldr	r2, [r7, #20]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	429a      	cmp	r2, r3
 800057a:	dbf0      	blt.n	800055e <_read+0x12>
  }

  return len;
 800057c:	687b      	ldr	r3, [r7, #4]
}
 800057e:	4618      	mov	r0, r3
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	b086      	sub	sp, #24
 800058a:	af00      	add	r7, sp, #0
 800058c:	60f8      	str	r0, [r7, #12]
 800058e:	60b9      	str	r1, [r7, #8]
 8000590:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
 8000596:	e009      	b.n	80005ac <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	1c5a      	adds	r2, r3, #1
 800059c:	60ba      	str	r2, [r7, #8]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f7ff ffab 	bl	80004fc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	3301      	adds	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dbf1      	blt.n	8000598 <_write+0x12>
//    __io_putchar(*ptr++);
  }
  return len;
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <_close>:

int _close(int file)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr

080005d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005d6:	b480      	push	{r7}
 80005d8:	b083      	sub	sp, #12
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005e6:	605a      	str	r2, [r3, #4]
  return 0;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr

080005f6 <_isatty>:

int _isatty(int file)
{
 80005f6:	b480      	push	{r7}
 80005f8:	b083      	sub	sp, #12
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000618:	2300      	movs	r3, #0
}
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000630:	4a14      	ldr	r2, [pc, #80]	; (8000684 <_sbrk+0x5c>)
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <_sbrk+0x60>)
 8000634:	1ad3      	subs	r3, r2, r3
 8000636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800063c:	4b13      	ldr	r3, [pc, #76]	; (800068c <_sbrk+0x64>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d102      	bne.n	800064a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <_sbrk+0x64>)
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <_sbrk+0x68>)
 8000648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064a:	4b10      	ldr	r3, [pc, #64]	; (800068c <_sbrk+0x64>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	693a      	ldr	r2, [r7, #16]
 8000654:	429a      	cmp	r2, r3
 8000656:	d207      	bcs.n	8000668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000658:	f000 fa78 	bl	8000b4c <__errno>
 800065c:	4603      	mov	r3, r0
 800065e:	220c      	movs	r2, #12
 8000660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
 8000666:	e009      	b.n	800067c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <_sbrk+0x64>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4413      	add	r3, r2
 8000676:	4a05      	ldr	r2, [pc, #20]	; (800068c <_sbrk+0x64>)
 8000678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3718      	adds	r7, #24
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20020000 	.word	0x20020000
 8000688:	00000400 	.word	0x00000400
 800068c:	200000bc 	.word	0x200000bc
 8000690:	20000210 	.word	0x20000210

08000694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000696:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000698:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800069e:	490d      	ldr	r1, [pc, #52]	; (80006d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <LoopForever+0xe>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b4:	4c0a      	ldr	r4, [pc, #40]	; (80006e0 <LoopForever+0x16>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006c2:	f000 fa49 	bl	8000b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c6:	f7ff fd87 	bl	80001d8 <main>

080006ca <LoopForever>:

LoopForever:
  b LoopForever
 80006ca:	e7fe      	b.n	80006ca <LoopForever>
  ldr   r0, =_estack
 80006cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006d8:	080010d0 	.word	0x080010d0
  ldr r2, =_sbss
 80006dc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006e0:	2000020c 	.word	0x2000020c

080006e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC_IRQHandler>
	...

080006e8 <std>:
 80006e8:	2300      	movs	r3, #0
 80006ea:	b510      	push	{r4, lr}
 80006ec:	4604      	mov	r4, r0
 80006ee:	e9c0 3300 	strd	r3, r3, [r0]
 80006f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006f6:	6083      	str	r3, [r0, #8]
 80006f8:	8181      	strh	r1, [r0, #12]
 80006fa:	6643      	str	r3, [r0, #100]	; 0x64
 80006fc:	81c2      	strh	r2, [r0, #14]
 80006fe:	6183      	str	r3, [r0, #24]
 8000700:	4619      	mov	r1, r3
 8000702:	2208      	movs	r2, #8
 8000704:	305c      	adds	r0, #92	; 0x5c
 8000706:	f000 f9d3 	bl	8000ab0 <memset>
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <std+0x38>)
 800070c:	6263      	str	r3, [r4, #36]	; 0x24
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <std+0x3c>)
 8000710:	62a3      	str	r3, [r4, #40]	; 0x28
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <std+0x40>)
 8000714:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000716:	4b05      	ldr	r3, [pc, #20]	; (800072c <std+0x44>)
 8000718:	6224      	str	r4, [r4, #32]
 800071a:	6323      	str	r3, [r4, #48]	; 0x30
 800071c:	bd10      	pop	{r4, pc}
 800071e:	bf00      	nop
 8000720:	08000901 	.word	0x08000901
 8000724:	08000923 	.word	0x08000923
 8000728:	0800095b 	.word	0x0800095b
 800072c:	0800097f 	.word	0x0800097f

08000730 <stdio_exit_handler>:
 8000730:	4a02      	ldr	r2, [pc, #8]	; (800073c <stdio_exit_handler+0xc>)
 8000732:	4903      	ldr	r1, [pc, #12]	; (8000740 <stdio_exit_handler+0x10>)
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <stdio_exit_handler+0x14>)
 8000736:	f000 b869 	b.w	800080c <_fwalk_sglue>
 800073a:	bf00      	nop
 800073c:	20000000 	.word	0x20000000
 8000740:	08000ea1 	.word	0x08000ea1
 8000744:	2000000c 	.word	0x2000000c

08000748 <cleanup_stdio>:
 8000748:	6841      	ldr	r1, [r0, #4]
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <cleanup_stdio+0x34>)
 800074c:	4299      	cmp	r1, r3
 800074e:	b510      	push	{r4, lr}
 8000750:	4604      	mov	r4, r0
 8000752:	d001      	beq.n	8000758 <cleanup_stdio+0x10>
 8000754:	f000 fba4 	bl	8000ea0 <_fflush_r>
 8000758:	68a1      	ldr	r1, [r4, #8]
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <cleanup_stdio+0x38>)
 800075c:	4299      	cmp	r1, r3
 800075e:	d002      	beq.n	8000766 <cleanup_stdio+0x1e>
 8000760:	4620      	mov	r0, r4
 8000762:	f000 fb9d 	bl	8000ea0 <_fflush_r>
 8000766:	68e1      	ldr	r1, [r4, #12]
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <cleanup_stdio+0x3c>)
 800076a:	4299      	cmp	r1, r3
 800076c:	d004      	beq.n	8000778 <cleanup_stdio+0x30>
 800076e:	4620      	mov	r0, r4
 8000770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000774:	f000 bb94 	b.w	8000ea0 <_fflush_r>
 8000778:	bd10      	pop	{r4, pc}
 800077a:	bf00      	nop
 800077c:	200000c0 	.word	0x200000c0
 8000780:	20000128 	.word	0x20000128
 8000784:	20000190 	.word	0x20000190

08000788 <global_stdio_init.part.0>:
 8000788:	b510      	push	{r4, lr}
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <global_stdio_init.part.0+0x30>)
 800078c:	4c0b      	ldr	r4, [pc, #44]	; (80007bc <global_stdio_init.part.0+0x34>)
 800078e:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <global_stdio_init.part.0+0x38>)
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	4620      	mov	r0, r4
 8000794:	2200      	movs	r2, #0
 8000796:	2104      	movs	r1, #4
 8000798:	f7ff ffa6 	bl	80006e8 <std>
 800079c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80007a0:	2201      	movs	r2, #1
 80007a2:	2109      	movs	r1, #9
 80007a4:	f7ff ffa0 	bl	80006e8 <std>
 80007a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80007ac:	2202      	movs	r2, #2
 80007ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007b2:	2112      	movs	r1, #18
 80007b4:	f7ff bf98 	b.w	80006e8 <std>
 80007b8:	200001f8 	.word	0x200001f8
 80007bc:	200000c0 	.word	0x200000c0
 80007c0:	08000731 	.word	0x08000731

080007c4 <__sfp_lock_acquire>:
 80007c4:	4801      	ldr	r0, [pc, #4]	; (80007cc <__sfp_lock_acquire+0x8>)
 80007c6:	f000 b9eb 	b.w	8000ba0 <__retarget_lock_acquire_recursive>
 80007ca:	bf00      	nop
 80007cc:	20000201 	.word	0x20000201

080007d0 <__sfp_lock_release>:
 80007d0:	4801      	ldr	r0, [pc, #4]	; (80007d8 <__sfp_lock_release+0x8>)
 80007d2:	f000 b9e6 	b.w	8000ba2 <__retarget_lock_release_recursive>
 80007d6:	bf00      	nop
 80007d8:	20000201 	.word	0x20000201

080007dc <__sinit>:
 80007dc:	b510      	push	{r4, lr}
 80007de:	4604      	mov	r4, r0
 80007e0:	f7ff fff0 	bl	80007c4 <__sfp_lock_acquire>
 80007e4:	6a23      	ldr	r3, [r4, #32]
 80007e6:	b11b      	cbz	r3, 80007f0 <__sinit+0x14>
 80007e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ec:	f7ff bff0 	b.w	80007d0 <__sfp_lock_release>
 80007f0:	4b04      	ldr	r3, [pc, #16]	; (8000804 <__sinit+0x28>)
 80007f2:	6223      	str	r3, [r4, #32]
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <__sinit+0x2c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d1f5      	bne.n	80007e8 <__sinit+0xc>
 80007fc:	f7ff ffc4 	bl	8000788 <global_stdio_init.part.0>
 8000800:	e7f2      	b.n	80007e8 <__sinit+0xc>
 8000802:	bf00      	nop
 8000804:	08000749 	.word	0x08000749
 8000808:	200001f8 	.word	0x200001f8

0800080c <_fwalk_sglue>:
 800080c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000810:	4607      	mov	r7, r0
 8000812:	4688      	mov	r8, r1
 8000814:	4614      	mov	r4, r2
 8000816:	2600      	movs	r6, #0
 8000818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800081c:	f1b9 0901 	subs.w	r9, r9, #1
 8000820:	d505      	bpl.n	800082e <_fwalk_sglue+0x22>
 8000822:	6824      	ldr	r4, [r4, #0]
 8000824:	2c00      	cmp	r4, #0
 8000826:	d1f7      	bne.n	8000818 <_fwalk_sglue+0xc>
 8000828:	4630      	mov	r0, r6
 800082a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800082e:	89ab      	ldrh	r3, [r5, #12]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d907      	bls.n	8000844 <_fwalk_sglue+0x38>
 8000834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000838:	3301      	adds	r3, #1
 800083a:	d003      	beq.n	8000844 <_fwalk_sglue+0x38>
 800083c:	4629      	mov	r1, r5
 800083e:	4638      	mov	r0, r7
 8000840:	47c0      	blx	r8
 8000842:	4306      	orrs	r6, r0
 8000844:	3568      	adds	r5, #104	; 0x68
 8000846:	e7e9      	b.n	800081c <_fwalk_sglue+0x10>

08000848 <_puts_r>:
 8000848:	6a03      	ldr	r3, [r0, #32]
 800084a:	b570      	push	{r4, r5, r6, lr}
 800084c:	6884      	ldr	r4, [r0, #8]
 800084e:	4605      	mov	r5, r0
 8000850:	460e      	mov	r6, r1
 8000852:	b90b      	cbnz	r3, 8000858 <_puts_r+0x10>
 8000854:	f7ff ffc2 	bl	80007dc <__sinit>
 8000858:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800085a:	07db      	lsls	r3, r3, #31
 800085c:	d405      	bmi.n	800086a <_puts_r+0x22>
 800085e:	89a3      	ldrh	r3, [r4, #12]
 8000860:	0598      	lsls	r0, r3, #22
 8000862:	d402      	bmi.n	800086a <_puts_r+0x22>
 8000864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000866:	f000 f99b 	bl	8000ba0 <__retarget_lock_acquire_recursive>
 800086a:	89a3      	ldrh	r3, [r4, #12]
 800086c:	0719      	lsls	r1, r3, #28
 800086e:	d513      	bpl.n	8000898 <_puts_r+0x50>
 8000870:	6923      	ldr	r3, [r4, #16]
 8000872:	b18b      	cbz	r3, 8000898 <_puts_r+0x50>
 8000874:	3e01      	subs	r6, #1
 8000876:	68a3      	ldr	r3, [r4, #8]
 8000878:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800087c:	3b01      	subs	r3, #1
 800087e:	60a3      	str	r3, [r4, #8]
 8000880:	b9e9      	cbnz	r1, 80008be <_puts_r+0x76>
 8000882:	2b00      	cmp	r3, #0
 8000884:	da2e      	bge.n	80008e4 <_puts_r+0x9c>
 8000886:	4622      	mov	r2, r4
 8000888:	210a      	movs	r1, #10
 800088a:	4628      	mov	r0, r5
 800088c:	f000 f87b 	bl	8000986 <__swbuf_r>
 8000890:	3001      	adds	r0, #1
 8000892:	d007      	beq.n	80008a4 <_puts_r+0x5c>
 8000894:	250a      	movs	r5, #10
 8000896:	e007      	b.n	80008a8 <_puts_r+0x60>
 8000898:	4621      	mov	r1, r4
 800089a:	4628      	mov	r0, r5
 800089c:	f000 f8b0 	bl	8000a00 <__swsetup_r>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d0e7      	beq.n	8000874 <_puts_r+0x2c>
 80008a4:	f04f 35ff 	mov.w	r5, #4294967295
 80008a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008aa:	07da      	lsls	r2, r3, #31
 80008ac:	d405      	bmi.n	80008ba <_puts_r+0x72>
 80008ae:	89a3      	ldrh	r3, [r4, #12]
 80008b0:	059b      	lsls	r3, r3, #22
 80008b2:	d402      	bmi.n	80008ba <_puts_r+0x72>
 80008b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008b6:	f000 f974 	bl	8000ba2 <__retarget_lock_release_recursive>
 80008ba:	4628      	mov	r0, r5
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da04      	bge.n	80008cc <_puts_r+0x84>
 80008c2:	69a2      	ldr	r2, [r4, #24]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	dc06      	bgt.n	80008d6 <_puts_r+0x8e>
 80008c8:	290a      	cmp	r1, #10
 80008ca:	d004      	beq.n	80008d6 <_puts_r+0x8e>
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	1c5a      	adds	r2, r3, #1
 80008d0:	6022      	str	r2, [r4, #0]
 80008d2:	7019      	strb	r1, [r3, #0]
 80008d4:	e7cf      	b.n	8000876 <_puts_r+0x2e>
 80008d6:	4622      	mov	r2, r4
 80008d8:	4628      	mov	r0, r5
 80008da:	f000 f854 	bl	8000986 <__swbuf_r>
 80008de:	3001      	adds	r0, #1
 80008e0:	d1c9      	bne.n	8000876 <_puts_r+0x2e>
 80008e2:	e7df      	b.n	80008a4 <_puts_r+0x5c>
 80008e4:	6823      	ldr	r3, [r4, #0]
 80008e6:	250a      	movs	r5, #10
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	6022      	str	r2, [r4, #0]
 80008ec:	701d      	strb	r5, [r3, #0]
 80008ee:	e7db      	b.n	80008a8 <_puts_r+0x60>

080008f0 <puts>:
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <puts+0xc>)
 80008f2:	4601      	mov	r1, r0
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	f7ff bfa7 	b.w	8000848 <_puts_r>
 80008fa:	bf00      	nop
 80008fc:	20000058 	.word	0x20000058

08000900 <__sread>:
 8000900:	b510      	push	{r4, lr}
 8000902:	460c      	mov	r4, r1
 8000904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000908:	f000 f8fc 	bl	8000b04 <_read_r>
 800090c:	2800      	cmp	r0, #0
 800090e:	bfab      	itete	ge
 8000910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000912:	89a3      	ldrhlt	r3, [r4, #12]
 8000914:	181b      	addge	r3, r3, r0
 8000916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800091a:	bfac      	ite	ge
 800091c:	6563      	strge	r3, [r4, #84]	; 0x54
 800091e:	81a3      	strhlt	r3, [r4, #12]
 8000920:	bd10      	pop	{r4, pc}

08000922 <__swrite>:
 8000922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000926:	461f      	mov	r7, r3
 8000928:	898b      	ldrh	r3, [r1, #12]
 800092a:	05db      	lsls	r3, r3, #23
 800092c:	4605      	mov	r5, r0
 800092e:	460c      	mov	r4, r1
 8000930:	4616      	mov	r6, r2
 8000932:	d505      	bpl.n	8000940 <__swrite+0x1e>
 8000934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000938:	2302      	movs	r3, #2
 800093a:	2200      	movs	r2, #0
 800093c:	f000 f8d0 	bl	8000ae0 <_lseek_r>
 8000940:	89a3      	ldrh	r3, [r4, #12]
 8000942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800094a:	81a3      	strh	r3, [r4, #12]
 800094c:	4632      	mov	r2, r6
 800094e:	463b      	mov	r3, r7
 8000950:	4628      	mov	r0, r5
 8000952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000956:	f000 b8e7 	b.w	8000b28 <_write_r>

0800095a <__sseek>:
 800095a:	b510      	push	{r4, lr}
 800095c:	460c      	mov	r4, r1
 800095e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000962:	f000 f8bd 	bl	8000ae0 <_lseek_r>
 8000966:	1c43      	adds	r3, r0, #1
 8000968:	89a3      	ldrh	r3, [r4, #12]
 800096a:	bf15      	itete	ne
 800096c:	6560      	strne	r0, [r4, #84]	; 0x54
 800096e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000976:	81a3      	strheq	r3, [r4, #12]
 8000978:	bf18      	it	ne
 800097a:	81a3      	strhne	r3, [r4, #12]
 800097c:	bd10      	pop	{r4, pc}

0800097e <__sclose>:
 800097e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000982:	f000 b89d 	b.w	8000ac0 <_close_r>

08000986 <__swbuf_r>:
 8000986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000988:	460e      	mov	r6, r1
 800098a:	4614      	mov	r4, r2
 800098c:	4605      	mov	r5, r0
 800098e:	b118      	cbz	r0, 8000998 <__swbuf_r+0x12>
 8000990:	6a03      	ldr	r3, [r0, #32]
 8000992:	b90b      	cbnz	r3, 8000998 <__swbuf_r+0x12>
 8000994:	f7ff ff22 	bl	80007dc <__sinit>
 8000998:	69a3      	ldr	r3, [r4, #24]
 800099a:	60a3      	str	r3, [r4, #8]
 800099c:	89a3      	ldrh	r3, [r4, #12]
 800099e:	071a      	lsls	r2, r3, #28
 80009a0:	d525      	bpl.n	80009ee <__swbuf_r+0x68>
 80009a2:	6923      	ldr	r3, [r4, #16]
 80009a4:	b31b      	cbz	r3, 80009ee <__swbuf_r+0x68>
 80009a6:	6823      	ldr	r3, [r4, #0]
 80009a8:	6922      	ldr	r2, [r4, #16]
 80009aa:	1a98      	subs	r0, r3, r2
 80009ac:	6963      	ldr	r3, [r4, #20]
 80009ae:	b2f6      	uxtb	r6, r6
 80009b0:	4283      	cmp	r3, r0
 80009b2:	4637      	mov	r7, r6
 80009b4:	dc04      	bgt.n	80009c0 <__swbuf_r+0x3a>
 80009b6:	4621      	mov	r1, r4
 80009b8:	4628      	mov	r0, r5
 80009ba:	f000 fa71 	bl	8000ea0 <_fflush_r>
 80009be:	b9e0      	cbnz	r0, 80009fa <__swbuf_r+0x74>
 80009c0:	68a3      	ldr	r3, [r4, #8]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	60a3      	str	r3, [r4, #8]
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	6022      	str	r2, [r4, #0]
 80009cc:	701e      	strb	r6, [r3, #0]
 80009ce:	6962      	ldr	r2, [r4, #20]
 80009d0:	1c43      	adds	r3, r0, #1
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d004      	beq.n	80009e0 <__swbuf_r+0x5a>
 80009d6:	89a3      	ldrh	r3, [r4, #12]
 80009d8:	07db      	lsls	r3, r3, #31
 80009da:	d506      	bpl.n	80009ea <__swbuf_r+0x64>
 80009dc:	2e0a      	cmp	r6, #10
 80009de:	d104      	bne.n	80009ea <__swbuf_r+0x64>
 80009e0:	4621      	mov	r1, r4
 80009e2:	4628      	mov	r0, r5
 80009e4:	f000 fa5c 	bl	8000ea0 <_fflush_r>
 80009e8:	b938      	cbnz	r0, 80009fa <__swbuf_r+0x74>
 80009ea:	4638      	mov	r0, r7
 80009ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ee:	4621      	mov	r1, r4
 80009f0:	4628      	mov	r0, r5
 80009f2:	f000 f805 	bl	8000a00 <__swsetup_r>
 80009f6:	2800      	cmp	r0, #0
 80009f8:	d0d5      	beq.n	80009a6 <__swbuf_r+0x20>
 80009fa:	f04f 37ff 	mov.w	r7, #4294967295
 80009fe:	e7f4      	b.n	80009ea <__swbuf_r+0x64>

08000a00 <__swsetup_r>:
 8000a00:	b538      	push	{r3, r4, r5, lr}
 8000a02:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <__swsetup_r+0xac>)
 8000a04:	4605      	mov	r5, r0
 8000a06:	6818      	ldr	r0, [r3, #0]
 8000a08:	460c      	mov	r4, r1
 8000a0a:	b118      	cbz	r0, 8000a14 <__swsetup_r+0x14>
 8000a0c:	6a03      	ldr	r3, [r0, #32]
 8000a0e:	b90b      	cbnz	r3, 8000a14 <__swsetup_r+0x14>
 8000a10:	f7ff fee4 	bl	80007dc <__sinit>
 8000a14:	89a3      	ldrh	r3, [r4, #12]
 8000a16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a1a:	0718      	lsls	r0, r3, #28
 8000a1c:	d422      	bmi.n	8000a64 <__swsetup_r+0x64>
 8000a1e:	06d9      	lsls	r1, r3, #27
 8000a20:	d407      	bmi.n	8000a32 <__swsetup_r+0x32>
 8000a22:	2309      	movs	r3, #9
 8000a24:	602b      	str	r3, [r5, #0]
 8000a26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a2a:	81a3      	strh	r3, [r4, #12]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	e034      	b.n	8000a9c <__swsetup_r+0x9c>
 8000a32:	0758      	lsls	r0, r3, #29
 8000a34:	d512      	bpl.n	8000a5c <__swsetup_r+0x5c>
 8000a36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a38:	b141      	cbz	r1, 8000a4c <__swsetup_r+0x4c>
 8000a3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a3e:	4299      	cmp	r1, r3
 8000a40:	d002      	beq.n	8000a48 <__swsetup_r+0x48>
 8000a42:	4628      	mov	r0, r5
 8000a44:	f000 f8ae 	bl	8000ba4 <_free_r>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	6363      	str	r3, [r4, #52]	; 0x34
 8000a4c:	89a3      	ldrh	r3, [r4, #12]
 8000a4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a52:	81a3      	strh	r3, [r4, #12]
 8000a54:	2300      	movs	r3, #0
 8000a56:	6063      	str	r3, [r4, #4]
 8000a58:	6923      	ldr	r3, [r4, #16]
 8000a5a:	6023      	str	r3, [r4, #0]
 8000a5c:	89a3      	ldrh	r3, [r4, #12]
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	81a3      	strh	r3, [r4, #12]
 8000a64:	6923      	ldr	r3, [r4, #16]
 8000a66:	b94b      	cbnz	r3, 8000a7c <__swsetup_r+0x7c>
 8000a68:	89a3      	ldrh	r3, [r4, #12]
 8000a6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a72:	d003      	beq.n	8000a7c <__swsetup_r+0x7c>
 8000a74:	4621      	mov	r1, r4
 8000a76:	4628      	mov	r0, r5
 8000a78:	f000 fa60 	bl	8000f3c <__smakebuf_r>
 8000a7c:	89a0      	ldrh	r0, [r4, #12]
 8000a7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a82:	f010 0301 	ands.w	r3, r0, #1
 8000a86:	d00a      	beq.n	8000a9e <__swsetup_r+0x9e>
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60a3      	str	r3, [r4, #8]
 8000a8c:	6963      	ldr	r3, [r4, #20]
 8000a8e:	425b      	negs	r3, r3
 8000a90:	61a3      	str	r3, [r4, #24]
 8000a92:	6923      	ldr	r3, [r4, #16]
 8000a94:	b943      	cbnz	r3, 8000aa8 <__swsetup_r+0xa8>
 8000a96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a9a:	d1c4      	bne.n	8000a26 <__swsetup_r+0x26>
 8000a9c:	bd38      	pop	{r3, r4, r5, pc}
 8000a9e:	0781      	lsls	r1, r0, #30
 8000aa0:	bf58      	it	pl
 8000aa2:	6963      	ldrpl	r3, [r4, #20]
 8000aa4:	60a3      	str	r3, [r4, #8]
 8000aa6:	e7f4      	b.n	8000a92 <__swsetup_r+0x92>
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e7f7      	b.n	8000a9c <__swsetup_r+0x9c>
 8000aac:	20000058 	.word	0x20000058

08000ab0 <memset>:
 8000ab0:	4402      	add	r2, r0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d100      	bne.n	8000aba <memset+0xa>
 8000ab8:	4770      	bx	lr
 8000aba:	f803 1b01 	strb.w	r1, [r3], #1
 8000abe:	e7f9      	b.n	8000ab4 <memset+0x4>

08000ac0 <_close_r>:
 8000ac0:	b538      	push	{r3, r4, r5, lr}
 8000ac2:	4d06      	ldr	r5, [pc, #24]	; (8000adc <_close_r+0x1c>)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	4604      	mov	r4, r0
 8000ac8:	4608      	mov	r0, r1
 8000aca:	602b      	str	r3, [r5, #0]
 8000acc:	f7ff fd77 	bl	80005be <_close>
 8000ad0:	1c43      	adds	r3, r0, #1
 8000ad2:	d102      	bne.n	8000ada <_close_r+0x1a>
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	b103      	cbz	r3, 8000ada <_close_r+0x1a>
 8000ad8:	6023      	str	r3, [r4, #0]
 8000ada:	bd38      	pop	{r3, r4, r5, pc}
 8000adc:	200001fc 	.word	0x200001fc

08000ae0 <_lseek_r>:
 8000ae0:	b538      	push	{r3, r4, r5, lr}
 8000ae2:	4d07      	ldr	r5, [pc, #28]	; (8000b00 <_lseek_r+0x20>)
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	4608      	mov	r0, r1
 8000ae8:	4611      	mov	r1, r2
 8000aea:	2200      	movs	r2, #0
 8000aec:	602a      	str	r2, [r5, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	f7ff fd8c 	bl	800060c <_lseek>
 8000af4:	1c43      	adds	r3, r0, #1
 8000af6:	d102      	bne.n	8000afe <_lseek_r+0x1e>
 8000af8:	682b      	ldr	r3, [r5, #0]
 8000afa:	b103      	cbz	r3, 8000afe <_lseek_r+0x1e>
 8000afc:	6023      	str	r3, [r4, #0]
 8000afe:	bd38      	pop	{r3, r4, r5, pc}
 8000b00:	200001fc 	.word	0x200001fc

08000b04 <_read_r>:
 8000b04:	b538      	push	{r3, r4, r5, lr}
 8000b06:	4d07      	ldr	r5, [pc, #28]	; (8000b24 <_read_r+0x20>)
 8000b08:	4604      	mov	r4, r0
 8000b0a:	4608      	mov	r0, r1
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	2200      	movs	r2, #0
 8000b10:	602a      	str	r2, [r5, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	f7ff fd1a 	bl	800054c <_read>
 8000b18:	1c43      	adds	r3, r0, #1
 8000b1a:	d102      	bne.n	8000b22 <_read_r+0x1e>
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	b103      	cbz	r3, 8000b22 <_read_r+0x1e>
 8000b20:	6023      	str	r3, [r4, #0]
 8000b22:	bd38      	pop	{r3, r4, r5, pc}
 8000b24:	200001fc 	.word	0x200001fc

08000b28 <_write_r>:
 8000b28:	b538      	push	{r3, r4, r5, lr}
 8000b2a:	4d07      	ldr	r5, [pc, #28]	; (8000b48 <_write_r+0x20>)
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	4611      	mov	r1, r2
 8000b32:	2200      	movs	r2, #0
 8000b34:	602a      	str	r2, [r5, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	f7ff fd25 	bl	8000586 <_write>
 8000b3c:	1c43      	adds	r3, r0, #1
 8000b3e:	d102      	bne.n	8000b46 <_write_r+0x1e>
 8000b40:	682b      	ldr	r3, [r5, #0]
 8000b42:	b103      	cbz	r3, 8000b46 <_write_r+0x1e>
 8000b44:	6023      	str	r3, [r4, #0]
 8000b46:	bd38      	pop	{r3, r4, r5, pc}
 8000b48:	200001fc 	.word	0x200001fc

08000b4c <__errno>:
 8000b4c:	4b01      	ldr	r3, [pc, #4]	; (8000b54 <__errno+0x8>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000058 	.word	0x20000058

08000b58 <__libc_init_array>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	4d0d      	ldr	r5, [pc, #52]	; (8000b90 <__libc_init_array+0x38>)
 8000b5c:	4c0d      	ldr	r4, [pc, #52]	; (8000b94 <__libc_init_array+0x3c>)
 8000b5e:	1b64      	subs	r4, r4, r5
 8000b60:	10a4      	asrs	r4, r4, #2
 8000b62:	2600      	movs	r6, #0
 8000b64:	42a6      	cmp	r6, r4
 8000b66:	d109      	bne.n	8000b7c <__libc_init_array+0x24>
 8000b68:	4d0b      	ldr	r5, [pc, #44]	; (8000b98 <__libc_init_array+0x40>)
 8000b6a:	4c0c      	ldr	r4, [pc, #48]	; (8000b9c <__libc_init_array+0x44>)
 8000b6c:	f000 fa54 	bl	8001018 <_init>
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	10a4      	asrs	r4, r4, #2
 8000b74:	2600      	movs	r6, #0
 8000b76:	42a6      	cmp	r6, r4
 8000b78:	d105      	bne.n	8000b86 <__libc_init_array+0x2e>
 8000b7a:	bd70      	pop	{r4, r5, r6, pc}
 8000b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b80:	4798      	blx	r3
 8000b82:	3601      	adds	r6, #1
 8000b84:	e7ee      	b.n	8000b64 <__libc_init_array+0xc>
 8000b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b8a:	4798      	blx	r3
 8000b8c:	3601      	adds	r6, #1
 8000b8e:	e7f2      	b.n	8000b76 <__libc_init_array+0x1e>
 8000b90:	080010c8 	.word	0x080010c8
 8000b94:	080010c8 	.word	0x080010c8
 8000b98:	080010c8 	.word	0x080010c8
 8000b9c:	080010cc 	.word	0x080010cc

08000ba0 <__retarget_lock_acquire_recursive>:
 8000ba0:	4770      	bx	lr

08000ba2 <__retarget_lock_release_recursive>:
 8000ba2:	4770      	bx	lr

08000ba4 <_free_r>:
 8000ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ba6:	2900      	cmp	r1, #0
 8000ba8:	d044      	beq.n	8000c34 <_free_r+0x90>
 8000baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bae:	9001      	str	r0, [sp, #4]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8000bb6:	bfb8      	it	lt
 8000bb8:	18e4      	addlt	r4, r4, r3
 8000bba:	f000 f8df 	bl	8000d7c <__malloc_lock>
 8000bbe:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <_free_r+0x94>)
 8000bc0:	9801      	ldr	r0, [sp, #4]
 8000bc2:	6813      	ldr	r3, [r2, #0]
 8000bc4:	b933      	cbnz	r3, 8000bd4 <_free_r+0x30>
 8000bc6:	6063      	str	r3, [r4, #4]
 8000bc8:	6014      	str	r4, [r2, #0]
 8000bca:	b003      	add	sp, #12
 8000bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000bd0:	f000 b8da 	b.w	8000d88 <__malloc_unlock>
 8000bd4:	42a3      	cmp	r3, r4
 8000bd6:	d908      	bls.n	8000bea <_free_r+0x46>
 8000bd8:	6825      	ldr	r5, [r4, #0]
 8000bda:	1961      	adds	r1, r4, r5
 8000bdc:	428b      	cmp	r3, r1
 8000bde:	bf01      	itttt	eq
 8000be0:	6819      	ldreq	r1, [r3, #0]
 8000be2:	685b      	ldreq	r3, [r3, #4]
 8000be4:	1949      	addeq	r1, r1, r5
 8000be6:	6021      	streq	r1, [r4, #0]
 8000be8:	e7ed      	b.n	8000bc6 <_free_r+0x22>
 8000bea:	461a      	mov	r2, r3
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	b10b      	cbz	r3, 8000bf4 <_free_r+0x50>
 8000bf0:	42a3      	cmp	r3, r4
 8000bf2:	d9fa      	bls.n	8000bea <_free_r+0x46>
 8000bf4:	6811      	ldr	r1, [r2, #0]
 8000bf6:	1855      	adds	r5, r2, r1
 8000bf8:	42a5      	cmp	r5, r4
 8000bfa:	d10b      	bne.n	8000c14 <_free_r+0x70>
 8000bfc:	6824      	ldr	r4, [r4, #0]
 8000bfe:	4421      	add	r1, r4
 8000c00:	1854      	adds	r4, r2, r1
 8000c02:	42a3      	cmp	r3, r4
 8000c04:	6011      	str	r1, [r2, #0]
 8000c06:	d1e0      	bne.n	8000bca <_free_r+0x26>
 8000c08:	681c      	ldr	r4, [r3, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	6053      	str	r3, [r2, #4]
 8000c0e:	440c      	add	r4, r1
 8000c10:	6014      	str	r4, [r2, #0]
 8000c12:	e7da      	b.n	8000bca <_free_r+0x26>
 8000c14:	d902      	bls.n	8000c1c <_free_r+0x78>
 8000c16:	230c      	movs	r3, #12
 8000c18:	6003      	str	r3, [r0, #0]
 8000c1a:	e7d6      	b.n	8000bca <_free_r+0x26>
 8000c1c:	6825      	ldr	r5, [r4, #0]
 8000c1e:	1961      	adds	r1, r4, r5
 8000c20:	428b      	cmp	r3, r1
 8000c22:	bf04      	itt	eq
 8000c24:	6819      	ldreq	r1, [r3, #0]
 8000c26:	685b      	ldreq	r3, [r3, #4]
 8000c28:	6063      	str	r3, [r4, #4]
 8000c2a:	bf04      	itt	eq
 8000c2c:	1949      	addeq	r1, r1, r5
 8000c2e:	6021      	streq	r1, [r4, #0]
 8000c30:	6054      	str	r4, [r2, #4]
 8000c32:	e7ca      	b.n	8000bca <_free_r+0x26>
 8000c34:	b003      	add	sp, #12
 8000c36:	bd30      	pop	{r4, r5, pc}
 8000c38:	20000204 	.word	0x20000204

08000c3c <sbrk_aligned>:
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	4e0e      	ldr	r6, [pc, #56]	; (8000c78 <sbrk_aligned+0x3c>)
 8000c40:	460c      	mov	r4, r1
 8000c42:	6831      	ldr	r1, [r6, #0]
 8000c44:	4605      	mov	r5, r0
 8000c46:	b911      	cbnz	r1, 8000c4e <sbrk_aligned+0x12>
 8000c48:	f000 f9d6 	bl	8000ff8 <_sbrk_r>
 8000c4c:	6030      	str	r0, [r6, #0]
 8000c4e:	4621      	mov	r1, r4
 8000c50:	4628      	mov	r0, r5
 8000c52:	f000 f9d1 	bl	8000ff8 <_sbrk_r>
 8000c56:	1c43      	adds	r3, r0, #1
 8000c58:	d00a      	beq.n	8000c70 <sbrk_aligned+0x34>
 8000c5a:	1cc4      	adds	r4, r0, #3
 8000c5c:	f024 0403 	bic.w	r4, r4, #3
 8000c60:	42a0      	cmp	r0, r4
 8000c62:	d007      	beq.n	8000c74 <sbrk_aligned+0x38>
 8000c64:	1a21      	subs	r1, r4, r0
 8000c66:	4628      	mov	r0, r5
 8000c68:	f000 f9c6 	bl	8000ff8 <_sbrk_r>
 8000c6c:	3001      	adds	r0, #1
 8000c6e:	d101      	bne.n	8000c74 <sbrk_aligned+0x38>
 8000c70:	f04f 34ff 	mov.w	r4, #4294967295
 8000c74:	4620      	mov	r0, r4
 8000c76:	bd70      	pop	{r4, r5, r6, pc}
 8000c78:	20000208 	.word	0x20000208

08000c7c <_malloc_r>:
 8000c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c80:	1ccd      	adds	r5, r1, #3
 8000c82:	f025 0503 	bic.w	r5, r5, #3
 8000c86:	3508      	adds	r5, #8
 8000c88:	2d0c      	cmp	r5, #12
 8000c8a:	bf38      	it	cc
 8000c8c:	250c      	movcc	r5, #12
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	4607      	mov	r7, r0
 8000c92:	db01      	blt.n	8000c98 <_malloc_r+0x1c>
 8000c94:	42a9      	cmp	r1, r5
 8000c96:	d905      	bls.n	8000ca4 <_malloc_r+0x28>
 8000c98:	230c      	movs	r3, #12
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ca4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000d78 <_malloc_r+0xfc>
 8000ca8:	f000 f868 	bl	8000d7c <__malloc_lock>
 8000cac:	f8d8 3000 	ldr.w	r3, [r8]
 8000cb0:	461c      	mov	r4, r3
 8000cb2:	bb5c      	cbnz	r4, 8000d0c <_malloc_r+0x90>
 8000cb4:	4629      	mov	r1, r5
 8000cb6:	4638      	mov	r0, r7
 8000cb8:	f7ff ffc0 	bl	8000c3c <sbrk_aligned>
 8000cbc:	1c43      	adds	r3, r0, #1
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	d155      	bne.n	8000d6e <_malloc_r+0xf2>
 8000cc2:	f8d8 4000 	ldr.w	r4, [r8]
 8000cc6:	4626      	mov	r6, r4
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d145      	bne.n	8000d58 <_malloc_r+0xdc>
 8000ccc:	2c00      	cmp	r4, #0
 8000cce:	d048      	beq.n	8000d62 <_malloc_r+0xe6>
 8000cd0:	6823      	ldr	r3, [r4, #0]
 8000cd2:	4631      	mov	r1, r6
 8000cd4:	4638      	mov	r0, r7
 8000cd6:	eb04 0903 	add.w	r9, r4, r3
 8000cda:	f000 f98d 	bl	8000ff8 <_sbrk_r>
 8000cde:	4581      	cmp	r9, r0
 8000ce0:	d13f      	bne.n	8000d62 <_malloc_r+0xe6>
 8000ce2:	6821      	ldr	r1, [r4, #0]
 8000ce4:	1a6d      	subs	r5, r5, r1
 8000ce6:	4629      	mov	r1, r5
 8000ce8:	4638      	mov	r0, r7
 8000cea:	f7ff ffa7 	bl	8000c3c <sbrk_aligned>
 8000cee:	3001      	adds	r0, #1
 8000cf0:	d037      	beq.n	8000d62 <_malloc_r+0xe6>
 8000cf2:	6823      	ldr	r3, [r4, #0]
 8000cf4:	442b      	add	r3, r5
 8000cf6:	6023      	str	r3, [r4, #0]
 8000cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d038      	beq.n	8000d72 <_malloc_r+0xf6>
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	42a2      	cmp	r2, r4
 8000d04:	d12b      	bne.n	8000d5e <_malloc_r+0xe2>
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	e00f      	b.n	8000d2c <_malloc_r+0xb0>
 8000d0c:	6822      	ldr	r2, [r4, #0]
 8000d0e:	1b52      	subs	r2, r2, r5
 8000d10:	d41f      	bmi.n	8000d52 <_malloc_r+0xd6>
 8000d12:	2a0b      	cmp	r2, #11
 8000d14:	d917      	bls.n	8000d46 <_malloc_r+0xca>
 8000d16:	1961      	adds	r1, r4, r5
 8000d18:	42a3      	cmp	r3, r4
 8000d1a:	6025      	str	r5, [r4, #0]
 8000d1c:	bf18      	it	ne
 8000d1e:	6059      	strne	r1, [r3, #4]
 8000d20:	6863      	ldr	r3, [r4, #4]
 8000d22:	bf08      	it	eq
 8000d24:	f8c8 1000 	streq.w	r1, [r8]
 8000d28:	5162      	str	r2, [r4, r5]
 8000d2a:	604b      	str	r3, [r1, #4]
 8000d2c:	4638      	mov	r0, r7
 8000d2e:	f104 060b 	add.w	r6, r4, #11
 8000d32:	f000 f829 	bl	8000d88 <__malloc_unlock>
 8000d36:	f026 0607 	bic.w	r6, r6, #7
 8000d3a:	1d23      	adds	r3, r4, #4
 8000d3c:	1af2      	subs	r2, r6, r3
 8000d3e:	d0ae      	beq.n	8000c9e <_malloc_r+0x22>
 8000d40:	1b9b      	subs	r3, r3, r6
 8000d42:	50a3      	str	r3, [r4, r2]
 8000d44:	e7ab      	b.n	8000c9e <_malloc_r+0x22>
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	6862      	ldr	r2, [r4, #4]
 8000d4a:	d1dd      	bne.n	8000d08 <_malloc_r+0x8c>
 8000d4c:	f8c8 2000 	str.w	r2, [r8]
 8000d50:	e7ec      	b.n	8000d2c <_malloc_r+0xb0>
 8000d52:	4623      	mov	r3, r4
 8000d54:	6864      	ldr	r4, [r4, #4]
 8000d56:	e7ac      	b.n	8000cb2 <_malloc_r+0x36>
 8000d58:	4634      	mov	r4, r6
 8000d5a:	6876      	ldr	r6, [r6, #4]
 8000d5c:	e7b4      	b.n	8000cc8 <_malloc_r+0x4c>
 8000d5e:	4613      	mov	r3, r2
 8000d60:	e7cc      	b.n	8000cfc <_malloc_r+0x80>
 8000d62:	230c      	movs	r3, #12
 8000d64:	603b      	str	r3, [r7, #0]
 8000d66:	4638      	mov	r0, r7
 8000d68:	f000 f80e 	bl	8000d88 <__malloc_unlock>
 8000d6c:	e797      	b.n	8000c9e <_malloc_r+0x22>
 8000d6e:	6025      	str	r5, [r4, #0]
 8000d70:	e7dc      	b.n	8000d2c <_malloc_r+0xb0>
 8000d72:	605b      	str	r3, [r3, #4]
 8000d74:	deff      	udf	#255	; 0xff
 8000d76:	bf00      	nop
 8000d78:	20000204 	.word	0x20000204

08000d7c <__malloc_lock>:
 8000d7c:	4801      	ldr	r0, [pc, #4]	; (8000d84 <__malloc_lock+0x8>)
 8000d7e:	f7ff bf0f 	b.w	8000ba0 <__retarget_lock_acquire_recursive>
 8000d82:	bf00      	nop
 8000d84:	20000200 	.word	0x20000200

08000d88 <__malloc_unlock>:
 8000d88:	4801      	ldr	r0, [pc, #4]	; (8000d90 <__malloc_unlock+0x8>)
 8000d8a:	f7ff bf0a 	b.w	8000ba2 <__retarget_lock_release_recursive>
 8000d8e:	bf00      	nop
 8000d90:	20000200 	.word	0x20000200

08000d94 <__sflush_r>:
 8000d94:	898a      	ldrh	r2, [r1, #12]
 8000d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d9a:	4605      	mov	r5, r0
 8000d9c:	0710      	lsls	r0, r2, #28
 8000d9e:	460c      	mov	r4, r1
 8000da0:	d458      	bmi.n	8000e54 <__sflush_r+0xc0>
 8000da2:	684b      	ldr	r3, [r1, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dc05      	bgt.n	8000db4 <__sflush_r+0x20>
 8000da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	dc02      	bgt.n	8000db4 <__sflush_r+0x20>
 8000dae:	2000      	movs	r0, #0
 8000db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d0f9      	beq.n	8000dae <__sflush_r+0x1a>
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000dc0:	682f      	ldr	r7, [r5, #0]
 8000dc2:	6a21      	ldr	r1, [r4, #32]
 8000dc4:	602b      	str	r3, [r5, #0]
 8000dc6:	d032      	beq.n	8000e2e <__sflush_r+0x9a>
 8000dc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000dca:	89a3      	ldrh	r3, [r4, #12]
 8000dcc:	075a      	lsls	r2, r3, #29
 8000dce:	d505      	bpl.n	8000ddc <__sflush_r+0x48>
 8000dd0:	6863      	ldr	r3, [r4, #4]
 8000dd2:	1ac0      	subs	r0, r0, r3
 8000dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000dd6:	b10b      	cbz	r3, 8000ddc <__sflush_r+0x48>
 8000dd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dda:	1ac0      	subs	r0, r0, r3
 8000ddc:	2300      	movs	r3, #0
 8000dde:	4602      	mov	r2, r0
 8000de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000de2:	6a21      	ldr	r1, [r4, #32]
 8000de4:	4628      	mov	r0, r5
 8000de6:	47b0      	blx	r6
 8000de8:	1c43      	adds	r3, r0, #1
 8000dea:	89a3      	ldrh	r3, [r4, #12]
 8000dec:	d106      	bne.n	8000dfc <__sflush_r+0x68>
 8000dee:	6829      	ldr	r1, [r5, #0]
 8000df0:	291d      	cmp	r1, #29
 8000df2:	d82b      	bhi.n	8000e4c <__sflush_r+0xb8>
 8000df4:	4a29      	ldr	r2, [pc, #164]	; (8000e9c <__sflush_r+0x108>)
 8000df6:	410a      	asrs	r2, r1
 8000df8:	07d6      	lsls	r6, r2, #31
 8000dfa:	d427      	bmi.n	8000e4c <__sflush_r+0xb8>
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6062      	str	r2, [r4, #4]
 8000e00:	04d9      	lsls	r1, r3, #19
 8000e02:	6922      	ldr	r2, [r4, #16]
 8000e04:	6022      	str	r2, [r4, #0]
 8000e06:	d504      	bpl.n	8000e12 <__sflush_r+0x7e>
 8000e08:	1c42      	adds	r2, r0, #1
 8000e0a:	d101      	bne.n	8000e10 <__sflush_r+0x7c>
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	b903      	cbnz	r3, 8000e12 <__sflush_r+0x7e>
 8000e10:	6560      	str	r0, [r4, #84]	; 0x54
 8000e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000e14:	602f      	str	r7, [r5, #0]
 8000e16:	2900      	cmp	r1, #0
 8000e18:	d0c9      	beq.n	8000dae <__sflush_r+0x1a>
 8000e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d002      	beq.n	8000e28 <__sflush_r+0x94>
 8000e22:	4628      	mov	r0, r5
 8000e24:	f7ff febe 	bl	8000ba4 <_free_r>
 8000e28:	2000      	movs	r0, #0
 8000e2a:	6360      	str	r0, [r4, #52]	; 0x34
 8000e2c:	e7c0      	b.n	8000db0 <__sflush_r+0x1c>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	4628      	mov	r0, r5
 8000e32:	47b0      	blx	r6
 8000e34:	1c41      	adds	r1, r0, #1
 8000e36:	d1c8      	bne.n	8000dca <__sflush_r+0x36>
 8000e38:	682b      	ldr	r3, [r5, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0c5      	beq.n	8000dca <__sflush_r+0x36>
 8000e3e:	2b1d      	cmp	r3, #29
 8000e40:	d001      	beq.n	8000e46 <__sflush_r+0xb2>
 8000e42:	2b16      	cmp	r3, #22
 8000e44:	d101      	bne.n	8000e4a <__sflush_r+0xb6>
 8000e46:	602f      	str	r7, [r5, #0]
 8000e48:	e7b1      	b.n	8000dae <__sflush_r+0x1a>
 8000e4a:	89a3      	ldrh	r3, [r4, #12]
 8000e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e50:	81a3      	strh	r3, [r4, #12]
 8000e52:	e7ad      	b.n	8000db0 <__sflush_r+0x1c>
 8000e54:	690f      	ldr	r7, [r1, #16]
 8000e56:	2f00      	cmp	r7, #0
 8000e58:	d0a9      	beq.n	8000dae <__sflush_r+0x1a>
 8000e5a:	0793      	lsls	r3, r2, #30
 8000e5c:	680e      	ldr	r6, [r1, #0]
 8000e5e:	bf08      	it	eq
 8000e60:	694b      	ldreq	r3, [r1, #20]
 8000e62:	600f      	str	r7, [r1, #0]
 8000e64:	bf18      	it	ne
 8000e66:	2300      	movne	r3, #0
 8000e68:	eba6 0807 	sub.w	r8, r6, r7
 8000e6c:	608b      	str	r3, [r1, #8]
 8000e6e:	f1b8 0f00 	cmp.w	r8, #0
 8000e72:	dd9c      	ble.n	8000dae <__sflush_r+0x1a>
 8000e74:	6a21      	ldr	r1, [r4, #32]
 8000e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e78:	4643      	mov	r3, r8
 8000e7a:	463a      	mov	r2, r7
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	47b0      	blx	r6
 8000e80:	2800      	cmp	r0, #0
 8000e82:	dc06      	bgt.n	8000e92 <__sflush_r+0xfe>
 8000e84:	89a3      	ldrh	r3, [r4, #12]
 8000e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e8a:	81a3      	strh	r3, [r4, #12]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	e78e      	b.n	8000db0 <__sflush_r+0x1c>
 8000e92:	4407      	add	r7, r0
 8000e94:	eba8 0800 	sub.w	r8, r8, r0
 8000e98:	e7e9      	b.n	8000e6e <__sflush_r+0xda>
 8000e9a:	bf00      	nop
 8000e9c:	dfbffffe 	.word	0xdfbffffe

08000ea0 <_fflush_r>:
 8000ea0:	b538      	push	{r3, r4, r5, lr}
 8000ea2:	690b      	ldr	r3, [r1, #16]
 8000ea4:	4605      	mov	r5, r0
 8000ea6:	460c      	mov	r4, r1
 8000ea8:	b913      	cbnz	r3, 8000eb0 <_fflush_r+0x10>
 8000eaa:	2500      	movs	r5, #0
 8000eac:	4628      	mov	r0, r5
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
 8000eb0:	b118      	cbz	r0, 8000eba <_fflush_r+0x1a>
 8000eb2:	6a03      	ldr	r3, [r0, #32]
 8000eb4:	b90b      	cbnz	r3, 8000eba <_fflush_r+0x1a>
 8000eb6:	f7ff fc91 	bl	80007dc <__sinit>
 8000eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0f3      	beq.n	8000eaa <_fflush_r+0xa>
 8000ec2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ec4:	07d0      	lsls	r0, r2, #31
 8000ec6:	d404      	bmi.n	8000ed2 <_fflush_r+0x32>
 8000ec8:	0599      	lsls	r1, r3, #22
 8000eca:	d402      	bmi.n	8000ed2 <_fflush_r+0x32>
 8000ecc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ece:	f7ff fe67 	bl	8000ba0 <__retarget_lock_acquire_recursive>
 8000ed2:	4628      	mov	r0, r5
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	f7ff ff5d 	bl	8000d94 <__sflush_r>
 8000eda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000edc:	07da      	lsls	r2, r3, #31
 8000ede:	4605      	mov	r5, r0
 8000ee0:	d4e4      	bmi.n	8000eac <_fflush_r+0xc>
 8000ee2:	89a3      	ldrh	r3, [r4, #12]
 8000ee4:	059b      	lsls	r3, r3, #22
 8000ee6:	d4e1      	bmi.n	8000eac <_fflush_r+0xc>
 8000ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000eea:	f7ff fe5a 	bl	8000ba2 <__retarget_lock_release_recursive>
 8000eee:	e7dd      	b.n	8000eac <_fflush_r+0xc>

08000ef0 <__swhatbuf_r>:
 8000ef0:	b570      	push	{r4, r5, r6, lr}
 8000ef2:	460c      	mov	r4, r1
 8000ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	b096      	sub	sp, #88	; 0x58
 8000efc:	4615      	mov	r5, r2
 8000efe:	461e      	mov	r6, r3
 8000f00:	da0d      	bge.n	8000f1e <__swhatbuf_r+0x2e>
 8000f02:	89a3      	ldrh	r3, [r4, #12]
 8000f04:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000f08:	f04f 0100 	mov.w	r1, #0
 8000f0c:	bf0c      	ite	eq
 8000f0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000f12:	2340      	movne	r3, #64	; 0x40
 8000f14:	2000      	movs	r0, #0
 8000f16:	6031      	str	r1, [r6, #0]
 8000f18:	602b      	str	r3, [r5, #0]
 8000f1a:	b016      	add	sp, #88	; 0x58
 8000f1c:	bd70      	pop	{r4, r5, r6, pc}
 8000f1e:	466a      	mov	r2, sp
 8000f20:	f000 f848 	bl	8000fb4 <_fstat_r>
 8000f24:	2800      	cmp	r0, #0
 8000f26:	dbec      	blt.n	8000f02 <__swhatbuf_r+0x12>
 8000f28:	9901      	ldr	r1, [sp, #4]
 8000f2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000f2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000f32:	4259      	negs	r1, r3
 8000f34:	4159      	adcs	r1, r3
 8000f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3a:	e7eb      	b.n	8000f14 <__swhatbuf_r+0x24>

08000f3c <__smakebuf_r>:
 8000f3c:	898b      	ldrh	r3, [r1, #12]
 8000f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000f40:	079d      	lsls	r5, r3, #30
 8000f42:	4606      	mov	r6, r0
 8000f44:	460c      	mov	r4, r1
 8000f46:	d507      	bpl.n	8000f58 <__smakebuf_r+0x1c>
 8000f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000f4c:	6023      	str	r3, [r4, #0]
 8000f4e:	6123      	str	r3, [r4, #16]
 8000f50:	2301      	movs	r3, #1
 8000f52:	6163      	str	r3, [r4, #20]
 8000f54:	b002      	add	sp, #8
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	ab01      	add	r3, sp, #4
 8000f5a:	466a      	mov	r2, sp
 8000f5c:	f7ff ffc8 	bl	8000ef0 <__swhatbuf_r>
 8000f60:	9900      	ldr	r1, [sp, #0]
 8000f62:	4605      	mov	r5, r0
 8000f64:	4630      	mov	r0, r6
 8000f66:	f7ff fe89 	bl	8000c7c <_malloc_r>
 8000f6a:	b948      	cbnz	r0, 8000f80 <__smakebuf_r+0x44>
 8000f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f70:	059a      	lsls	r2, r3, #22
 8000f72:	d4ef      	bmi.n	8000f54 <__smakebuf_r+0x18>
 8000f74:	f023 0303 	bic.w	r3, r3, #3
 8000f78:	f043 0302 	orr.w	r3, r3, #2
 8000f7c:	81a3      	strh	r3, [r4, #12]
 8000f7e:	e7e3      	b.n	8000f48 <__smakebuf_r+0xc>
 8000f80:	89a3      	ldrh	r3, [r4, #12]
 8000f82:	6020      	str	r0, [r4, #0]
 8000f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f88:	81a3      	strh	r3, [r4, #12]
 8000f8a:	9b00      	ldr	r3, [sp, #0]
 8000f8c:	6163      	str	r3, [r4, #20]
 8000f8e:	9b01      	ldr	r3, [sp, #4]
 8000f90:	6120      	str	r0, [r4, #16]
 8000f92:	b15b      	cbz	r3, 8000fac <__smakebuf_r+0x70>
 8000f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f98:	4630      	mov	r0, r6
 8000f9a:	f000 f81d 	bl	8000fd8 <_isatty_r>
 8000f9e:	b128      	cbz	r0, 8000fac <__smakebuf_r+0x70>
 8000fa0:	89a3      	ldrh	r3, [r4, #12]
 8000fa2:	f023 0303 	bic.w	r3, r3, #3
 8000fa6:	f043 0301 	orr.w	r3, r3, #1
 8000faa:	81a3      	strh	r3, [r4, #12]
 8000fac:	89a3      	ldrh	r3, [r4, #12]
 8000fae:	431d      	orrs	r5, r3
 8000fb0:	81a5      	strh	r5, [r4, #12]
 8000fb2:	e7cf      	b.n	8000f54 <__smakebuf_r+0x18>

08000fb4 <_fstat_r>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	4d07      	ldr	r5, [pc, #28]	; (8000fd4 <_fstat_r+0x20>)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	602b      	str	r3, [r5, #0]
 8000fc2:	f7ff fb08 	bl	80005d6 <_fstat>
 8000fc6:	1c43      	adds	r3, r0, #1
 8000fc8:	d102      	bne.n	8000fd0 <_fstat_r+0x1c>
 8000fca:	682b      	ldr	r3, [r5, #0]
 8000fcc:	b103      	cbz	r3, 8000fd0 <_fstat_r+0x1c>
 8000fce:	6023      	str	r3, [r4, #0]
 8000fd0:	bd38      	pop	{r3, r4, r5, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200001fc 	.word	0x200001fc

08000fd8 <_isatty_r>:
 8000fd8:	b538      	push	{r3, r4, r5, lr}
 8000fda:	4d06      	ldr	r5, [pc, #24]	; (8000ff4 <_isatty_r+0x1c>)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	4604      	mov	r4, r0
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	602b      	str	r3, [r5, #0]
 8000fe4:	f7ff fb07 	bl	80005f6 <_isatty>
 8000fe8:	1c43      	adds	r3, r0, #1
 8000fea:	d102      	bne.n	8000ff2 <_isatty_r+0x1a>
 8000fec:	682b      	ldr	r3, [r5, #0]
 8000fee:	b103      	cbz	r3, 8000ff2 <_isatty_r+0x1a>
 8000ff0:	6023      	str	r3, [r4, #0]
 8000ff2:	bd38      	pop	{r3, r4, r5, pc}
 8000ff4:	200001fc 	.word	0x200001fc

08000ff8 <_sbrk_r>:
 8000ff8:	b538      	push	{r3, r4, r5, lr}
 8000ffa:	4d06      	ldr	r5, [pc, #24]	; (8001014 <_sbrk_r+0x1c>)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4604      	mov	r4, r0
 8001000:	4608      	mov	r0, r1
 8001002:	602b      	str	r3, [r5, #0]
 8001004:	f7ff fb10 	bl	8000628 <_sbrk>
 8001008:	1c43      	adds	r3, r0, #1
 800100a:	d102      	bne.n	8001012 <_sbrk_r+0x1a>
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	b103      	cbz	r3, 8001012 <_sbrk_r+0x1a>
 8001010:	6023      	str	r3, [r4, #0]
 8001012:	bd38      	pop	{r3, r4, r5, pc}
 8001014:	200001fc 	.word	0x200001fc

08001018 <_init>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	bf00      	nop
 800101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101e:	bc08      	pop	{r3}
 8001020:	469e      	mov	lr, r3
 8001022:	4770      	bx	lr

08001024 <_fini>:
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001026:	bf00      	nop
 8001028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800102a:	bc08      	pop	{r3}
 800102c:	469e      	mov	lr, r3
 800102e:	4770      	bx	lr
