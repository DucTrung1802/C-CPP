
target_007_keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000e50  08000e50  00010e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e60  08000e60  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000e60  08000e60  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e60  08000e60  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e60  08000e60  00010e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e64  08000e64  00010e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000ec4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000ec4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f68  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000039f  00000000  00000000  00021031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  000213d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000bf  00000000  00000000  000214e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000298f  00000000  00000000  000215a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001355  00000000  00000000  00023f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009a63  00000000  00000000  0002528b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009cc  00000000  00000000  0002ecf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0002f6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000e38 	.word	0x08000e38

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08000e38 	.word	0x08000e38

080001d8 <main>:
 * PB1 - R1 (output)
 *
 */

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b090      	sub	sp, #64	; 0x40
 80001dc:	af00      	add	r7, sp, #0
	/* Reset and clock control reg */
	RCC_AHB1_ENR_t
	volatile *const p_clock_control_reg = (RCC_AHB1_ENR_t*) RCC;
 80001de:	4b50      	ldr	r3, [pc, #320]	; (8000320 <main+0x148>)
 80001e0:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* GPIO A Configuration */
	p_clock_control_reg->gpio_a_en = 1;
 80001e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80001e4:	6813      	ldr	r3, [r2, #0]
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6013      	str	r3, [r2, #0]
	GPIOx_MODE_REG_t volatile *const p_port_a_mode_reg =
 80001ec:	4b4d      	ldr	r3, [pc, #308]	; (8000324 <main+0x14c>)
 80001ee:	63bb      	str	r3, [r7, #56]	; 0x38
			(GPIOx_MODE_REG_t*) GPIO_A;
	GPIOx_PUPDR_t volatile *const p_port_a_pull_reg = (GPIOx_PUPDR_t*) GPIO_A;
 80001f0:	4b4c      	ldr	r3, [pc, #304]	; (8000324 <main+0x14c>)
 80001f2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIOx_IDR_t volatile const *const p_port_a_input_reg = (GPIOx_IDR_t*) GPIO_A;
 80001f4:	4b4b      	ldr	r3, [pc, #300]	; (8000324 <main+0x14c>)
 80001f6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIOx_ODR_t volatile *const p_port_a_output_reg = (GPIOx_ODR_t*) GPIO_A;
 80001f8:	4b4a      	ldr	r3, [pc, #296]	; (8000324 <main+0x14c>)
 80001fa:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* GPIO B Configuration */
	p_clock_control_reg->gpio_b_en = 1;
 80001fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80001fe:	6813      	ldr	r3, [r2, #0]
 8000200:	f043 0302 	orr.w	r3, r3, #2
 8000204:	6013      	str	r3, [r2, #0]
	GPIOx_MODE_REG_t volatile *const p_port_b_mode_reg =
 8000206:	4b48      	ldr	r3, [pc, #288]	; (8000328 <main+0x150>)
 8000208:	62bb      	str	r3, [r7, #40]	; 0x28
			(GPIOx_MODE_REG_t*) GPIO_B;
	GPIOx_PUPDR_t volatile *const p_port_b_pull_reg = (GPIOx_PUPDR_t*) GPIO_B;
 800020a:	4b47      	ldr	r3, [pc, #284]	; (8000328 <main+0x150>)
 800020c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIOx_IDR_t volatile const *const p_port_b_input_reg = (GPIOx_IDR_t*) GPIO_B;
 800020e:	4b46      	ldr	r3, [pc, #280]	; (8000328 <main+0x150>)
 8000210:	623b      	str	r3, [r7, #32]
	GPIOx_ODR_t volatile *const p_port_b_output_reg = (GPIOx_ODR_t*) GPIO_B;
 8000212:	4b45      	ldr	r3, [pc, #276]	; (8000328 <main+0x150>)
 8000214:	61fb      	str	r3, [r7, #28]

	/* GPIO C Configuration */
	p_clock_control_reg->gpio_c_en = 1;
 8000216:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000218:	6813      	ldr	r3, [r2, #0]
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6013      	str	r3, [r2, #0]
	GPIOx_MODE_REG_t volatile *const p_port_c_mode_reg =
 8000220:	4b42      	ldr	r3, [pc, #264]	; (800032c <main+0x154>)
 8000222:	61bb      	str	r3, [r7, #24]
			(GPIOx_MODE_REG_t*) GPIO_C;
	GPIOx_PUPDR_t volatile *const p_port_c_pull_reg = (GPIOx_PUPDR_t*) GPIO_C;
 8000224:	4b41      	ldr	r3, [pc, #260]	; (800032c <main+0x154>)
 8000226:	617b      	str	r3, [r7, #20]
	GPIOx_IDR_t volatile const *const p_port_c_input_reg = (GPIOx_IDR_t*) GPIO_C;
 8000228:	4b40      	ldr	r3, [pc, #256]	; (800032c <main+0x154>)
 800022a:	613b      	str	r3, [r7, #16]
	GPIOx_ODR_t volatile *const p_port_c_output_reg = (GPIOx_ODR_t*) GPIO_C;
 800022c:	4b3f      	ldr	r3, [pc, #252]	; (800032c <main+0x154>)
 800022e:	60fb      	str	r3, [r7, #12]

	/* Input pins */
	/* PC1 - C4 (input) */
	p_port_c_mode_reg->pin_1 = INPUT_MODE;
 8000230:	69ba      	ldr	r2, [r7, #24]
 8000232:	6813      	ldr	r3, [r2, #0]
 8000234:	f36f 0383 	bfc	r3, #2, #2
 8000238:	6013      	str	r3, [r2, #0]
	p_port_c_pull_reg->pin_1 = PULL_UP;
 800023a:	697a      	ldr	r2, [r7, #20]
 800023c:	6813      	ldr	r3, [r2, #0]
 800023e:	2101      	movs	r1, #1
 8000240:	f361 0383 	bfi	r3, r1, #2, #2
 8000244:	6013      	str	r3, [r2, #0]

	/* PC3 - C3 (input) */
	p_port_c_mode_reg->pin_3 = INPUT_MODE;
 8000246:	69ba      	ldr	r2, [r7, #24]
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	f36f 1387 	bfc	r3, #6, #2
 800024e:	6013      	str	r3, [r2, #0]
	p_port_c_pull_reg->pin_3 = PULL_UP;
 8000250:	697a      	ldr	r2, [r7, #20]
 8000252:	6813      	ldr	r3, [r2, #0]
 8000254:	2101      	movs	r1, #1
 8000256:	f361 1387 	bfi	r3, r1, #6, #2
 800025a:	6013      	str	r3, [r2, #0]

	/* PA1 - C2 (input) */
	p_port_a_mode_reg->pin_1 = INPUT_MODE;
 800025c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800025e:	6813      	ldr	r3, [r2, #0]
 8000260:	f36f 0383 	bfc	r3, #2, #2
 8000264:	6013      	str	r3, [r2, #0]
	p_port_a_pull_reg->pin_1 = PULL_UP;
 8000266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000268:	6813      	ldr	r3, [r2, #0]
 800026a:	2101      	movs	r1, #1
 800026c:	f361 0383 	bfi	r3, r1, #2, #2
 8000270:	6013      	str	r3, [r2, #0]

	/* PA3 - C1 (input) */
	p_port_a_mode_reg->pin_3 = INPUT_MODE;
 8000272:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000274:	6813      	ldr	r3, [r2, #0]
 8000276:	f36f 1387 	bfc	r3, #6, #2
 800027a:	6013      	str	r3, [r2, #0]
	p_port_a_pull_reg->pin_3 = PULL_UP;
 800027c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800027e:	6813      	ldr	r3, [r2, #0]
 8000280:	2101      	movs	r1, #1
 8000282:	f361 1387 	bfi	r3, r1, #6, #2
 8000286:	6013      	str	r3, [r2, #0]

	/* Output pins */
	/* PA5 - R4 (output) */
	p_port_a_mode_reg->pin_5 = OUTPUT_MODE;
 8000288:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	2101      	movs	r1, #1
 800028e:	f361 238b 	bfi	r3, r1, #10, #2
 8000292:	6013      	str	r3, [r2, #0]

	/* PA7 - R3 (output) */
	p_port_a_mode_reg->pin_7 = OUTPUT_MODE;
 8000294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000296:	6813      	ldr	r3, [r2, #0]
 8000298:	2101      	movs	r1, #1
 800029a:	f361 338f 	bfi	r3, r1, #14, #2
 800029e:	6013      	str	r3, [r2, #0]

	/* PC5 - R2 (output) */
	p_port_c_mode_reg->pin_5 = OUTPUT_MODE;
 80002a0:	69ba      	ldr	r2, [r7, #24]
 80002a2:	6813      	ldr	r3, [r2, #0]
 80002a4:	2101      	movs	r1, #1
 80002a6:	f361 238b 	bfi	r3, r1, #10, #2
 80002aa:	6013      	str	r3, [r2, #0]

	/* PB1 - R1 (output) */
	p_port_b_mode_reg->pin_1 = OUTPUT_MODE;
 80002ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80002ae:	6813      	ldr	r3, [r2, #0]
 80002b0:	2101      	movs	r1, #1
 80002b2:	f361 0383 	bfi	r3, r1, #2, #2
 80002b6:	6013      	str	r3, [r2, #0]

	uint8_t row_output_address[4] =
	{ p_port_b_output_reg->pin_1, p_port_c_output_reg->pin_5,
 80002b8:	69fb      	ldr	r3, [r7, #28]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80002c0:	b2db      	uxtb	r3, r3
	uint8_t row_output_address[4] =
 80002c2:	723b      	strb	r3, [r7, #8]
	{ p_port_b_output_reg->pin_1, p_port_c_output_reg->pin_5,
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80002cc:	b2db      	uxtb	r3, r3
	uint8_t row_output_address[4] =
 80002ce:	727b      	strb	r3, [r7, #9]
			p_port_a_output_reg->pin_7, p_port_a_output_reg->pin_5 };
 80002d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80002d8:	b2db      	uxtb	r3, r3
	uint8_t row_output_address[4] =
 80002da:	72bb      	strb	r3, [r7, #10]
			p_port_a_output_reg->pin_7, p_port_a_output_reg->pin_5 };
 80002dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80002e4:	b2db      	uxtb	r3, r3
	uint8_t row_output_address[4] =
 80002e6:	72fb      	strb	r3, [r7, #11]

	uint8_t col_input_address[4] =
	{ p_port_a_input_reg->pin_3, p_port_a_input_reg->pin_1,
 80002e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80002f0:	b2db      	uxtb	r3, r3
	uint8_t col_input_address[4] =
 80002f2:	713b      	strb	r3, [r7, #4]
	{ p_port_a_input_reg->pin_3, p_port_a_input_reg->pin_1,
 80002f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80002fc:	b2db      	uxtb	r3, r3
	uint8_t col_input_address[4] =
 80002fe:	717b      	strb	r3, [r7, #5]
			p_port_c_input_reg->pin_3, p_port_c_input_reg->pin_1 };
 8000300:	693b      	ldr	r3, [r7, #16]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000308:	b2db      	uxtb	r3, r3
	uint8_t col_input_address[4] =
 800030a:	71bb      	strb	r3, [r7, #6]
			p_port_c_input_reg->pin_3, p_port_c_input_reg->pin_1 };
 800030c:	693b      	ldr	r3, [r7, #16]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000314:	b2db      	uxtb	r3, r3
	uint8_t col_input_address[4] =
 8000316:	71fb      	strb	r3, [r7, #7]

	printf("Hello world!\n");
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <main+0x158>)
 800031a:	f000 f9ff 	bl	800071c <puts>
	/* Loop forever */
	while (1)
 800031e:	e7fe      	b.n	800031e <main+0x146>
 8000320:	40023800 	.word	0x40023800
 8000324:	40020000 	.word	0x40020000
 8000328:	40020400 	.word	0x40020400
 800032c:	40020800 	.word	0x40020800
 8000330:	08000e50 	.word	0x08000e50

08000334 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800033e:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <ITM_SendChar+0x44>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <ITM_SendChar+0x44>)
 8000344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000348:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800034a:	4b0c      	ldr	r3, [pc, #48]	; (800037c <ITM_SendChar+0x48>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a0b      	ldr	r2, [pc, #44]	; (800037c <ITM_SendChar+0x48>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000356:	bf00      	nop
 8000358:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f8      	beq.n	8000358 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000366:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	6013      	str	r3, [r2, #0]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	e000edfc 	.word	0xe000edfc
 800037c:	e0000e00 	.word	0xe0000e00

08000380 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800038c:	2300      	movs	r3, #0
 800038e:	617b      	str	r3, [r7, #20]
 8000390:	e00a      	b.n	80003a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000392:	f3af 8000 	nop.w
 8000396:	4601      	mov	r1, r0
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	1c5a      	adds	r2, r3, #1
 800039c:	60ba      	str	r2, [r7, #8]
 800039e:	b2ca      	uxtb	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	3301      	adds	r3, #1
 80003a6:	617b      	str	r3, [r7, #20]
 80003a8:	697a      	ldr	r2, [r7, #20]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	429a      	cmp	r2, r3
 80003ae:	dbf0      	blt.n	8000392 <_read+0x12>
  }

  return len;
 80003b0:	687b      	ldr	r3, [r7, #4]
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3718      	adds	r7, #24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b086      	sub	sp, #24
 80003be:	af00      	add	r7, sp, #0
 80003c0:	60f8      	str	r0, [r7, #12]
 80003c2:	60b9      	str	r1, [r7, #8]
 80003c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	e009      	b.n	80003e0 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	1c5a      	adds	r2, r3, #1
 80003d0:	60ba      	str	r2, [r7, #8]
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ffad 	bl	8000334 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	3301      	adds	r3, #1
 80003de:	617b      	str	r3, [r7, #20]
 80003e0:	697a      	ldr	r2, [r7, #20]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	429a      	cmp	r2, r3
 80003e6:	dbf1      	blt.n	80003cc <_write+0x12>
//    __io_putchar(*ptr++);
  }
  return len;
 80003e8:	687b      	ldr	r3, [r7, #4]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3718      	adds	r7, #24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <_close>:

int _close(int file)
{
 80003f2:	b480      	push	{r7}
 80003f4:	b083      	sub	sp, #12
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80003fe:	4618      	mov	r0, r3
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000418:	605a      	str	r2, [r3, #4]
  return 0;
 800041a:	2300      	movs	r3, #0
}
 800041c:	4618      	mov	r0, r3
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr

08000426 <_isatty>:

int _isatty(int file)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800042e:	2301      	movs	r3, #1
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800043a:	b480      	push	{r7}
 800043c:	b085      	sub	sp, #20
 800043e:	af00      	add	r7, sp, #0
 8000440:	60f8      	str	r0, [r7, #12]
 8000442:	60b9      	str	r1, [r7, #8]
 8000444:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	3714      	adds	r7, #20
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
	...

08000454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800045c:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <_sbrk+0x5c>)
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <_sbrk+0x60>)
 8000460:	1ad3      	subs	r3, r2, r3
 8000462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000468:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <_sbrk+0x64>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d102      	bne.n	8000476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000470:	4b11      	ldr	r3, [pc, #68]	; (80004b8 <_sbrk+0x64>)
 8000472:	4a12      	ldr	r2, [pc, #72]	; (80004bc <_sbrk+0x68>)
 8000474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000476:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <_sbrk+0x64>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	693a      	ldr	r2, [r7, #16]
 8000480:	429a      	cmp	r2, r3
 8000482:	d207      	bcs.n	8000494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000484:	f000 fa78 	bl	8000978 <__errno>
 8000488:	4603      	mov	r3, r0
 800048a:	220c      	movs	r2, #12
 800048c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800048e:	f04f 33ff 	mov.w	r3, #4294967295
 8000492:	e009      	b.n	80004a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <_sbrk+0x64>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800049a:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <_sbrk+0x64>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <_sbrk+0x64>)
 80004a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004a6:	68fb      	ldr	r3, [r7, #12]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20020000 	.word	0x20020000
 80004b4:	00000400 	.word	0x00000400
 80004b8:	20000078 	.word	0x20000078
 80004bc:	200001c8 	.word	0x200001c8

080004c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004c0:	480d      	ldr	r0, [pc, #52]	; (80004f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <LoopForever+0x6>)
  ldr r1, =_edata
 80004ca:	490d      	ldr	r1, [pc, #52]	; (8000500 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <LoopForever+0xe>)
  movs r3, #0
 80004ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d0:	e002      	b.n	80004d8 <LoopCopyDataInit>

080004d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d6:	3304      	adds	r3, #4

080004d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004dc:	d3f9      	bcc.n	80004d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004de:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <LoopForever+0x16>)
  movs r3, #0
 80004e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e4:	e001      	b.n	80004ea <LoopFillZerobss>

080004e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e8:	3204      	adds	r2, #4

080004ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004ec:	d3fb      	bcc.n	80004e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ee:	f000 fa49 	bl	8000984 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f2:	f7ff fe71 	bl	80001d8 <main>

080004f6 <LoopForever>:

LoopForever:
  b LoopForever
 80004f6:	e7fe      	b.n	80004f6 <LoopForever>
  ldr   r0, =_estack
 80004f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000500:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000504:	08000e68 	.word	0x08000e68
  ldr r2, =_sbss
 8000508:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800050c:	200001c8 	.word	0x200001c8

08000510 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000510:	e7fe      	b.n	8000510 <ADC_IRQHandler>
	...

08000514 <std>:
 8000514:	2300      	movs	r3, #0
 8000516:	b510      	push	{r4, lr}
 8000518:	4604      	mov	r4, r0
 800051a:	e9c0 3300 	strd	r3, r3, [r0]
 800051e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000522:	6083      	str	r3, [r0, #8]
 8000524:	8181      	strh	r1, [r0, #12]
 8000526:	6643      	str	r3, [r0, #100]	; 0x64
 8000528:	81c2      	strh	r2, [r0, #14]
 800052a:	6183      	str	r3, [r0, #24]
 800052c:	4619      	mov	r1, r3
 800052e:	2208      	movs	r2, #8
 8000530:	305c      	adds	r0, #92	; 0x5c
 8000532:	f000 f9d3 	bl	80008dc <memset>
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <std+0x38>)
 8000538:	6263      	str	r3, [r4, #36]	; 0x24
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <std+0x3c>)
 800053c:	62a3      	str	r3, [r4, #40]	; 0x28
 800053e:	4b05      	ldr	r3, [pc, #20]	; (8000554 <std+0x40>)
 8000540:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <std+0x44>)
 8000544:	6224      	str	r4, [r4, #32]
 8000546:	6323      	str	r3, [r4, #48]	; 0x30
 8000548:	bd10      	pop	{r4, pc}
 800054a:	bf00      	nop
 800054c:	0800072d 	.word	0x0800072d
 8000550:	0800074f 	.word	0x0800074f
 8000554:	08000787 	.word	0x08000787
 8000558:	080007ab 	.word	0x080007ab

0800055c <stdio_exit_handler>:
 800055c:	4a02      	ldr	r2, [pc, #8]	; (8000568 <stdio_exit_handler+0xc>)
 800055e:	4903      	ldr	r1, [pc, #12]	; (800056c <stdio_exit_handler+0x10>)
 8000560:	4803      	ldr	r0, [pc, #12]	; (8000570 <stdio_exit_handler+0x14>)
 8000562:	f000 b869 	b.w	8000638 <_fwalk_sglue>
 8000566:	bf00      	nop
 8000568:	20000000 	.word	0x20000000
 800056c:	08000cc1 	.word	0x08000cc1
 8000570:	2000000c 	.word	0x2000000c

08000574 <cleanup_stdio>:
 8000574:	6841      	ldr	r1, [r0, #4]
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <cleanup_stdio+0x34>)
 8000578:	4299      	cmp	r1, r3
 800057a:	b510      	push	{r4, lr}
 800057c:	4604      	mov	r4, r0
 800057e:	d001      	beq.n	8000584 <cleanup_stdio+0x10>
 8000580:	f000 fb9e 	bl	8000cc0 <_fflush_r>
 8000584:	68a1      	ldr	r1, [r4, #8]
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <cleanup_stdio+0x38>)
 8000588:	4299      	cmp	r1, r3
 800058a:	d002      	beq.n	8000592 <cleanup_stdio+0x1e>
 800058c:	4620      	mov	r0, r4
 800058e:	f000 fb97 	bl	8000cc0 <_fflush_r>
 8000592:	68e1      	ldr	r1, [r4, #12]
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <cleanup_stdio+0x3c>)
 8000596:	4299      	cmp	r1, r3
 8000598:	d004      	beq.n	80005a4 <cleanup_stdio+0x30>
 800059a:	4620      	mov	r0, r4
 800059c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005a0:	f000 bb8e 	b.w	8000cc0 <_fflush_r>
 80005a4:	bd10      	pop	{r4, pc}
 80005a6:	bf00      	nop
 80005a8:	2000007c 	.word	0x2000007c
 80005ac:	200000e4 	.word	0x200000e4
 80005b0:	2000014c 	.word	0x2000014c

080005b4 <global_stdio_init.part.0>:
 80005b4:	b510      	push	{r4, lr}
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <global_stdio_init.part.0+0x30>)
 80005b8:	4c0b      	ldr	r4, [pc, #44]	; (80005e8 <global_stdio_init.part.0+0x34>)
 80005ba:	4a0c      	ldr	r2, [pc, #48]	; (80005ec <global_stdio_init.part.0+0x38>)
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	4620      	mov	r0, r4
 80005c0:	2200      	movs	r2, #0
 80005c2:	2104      	movs	r1, #4
 80005c4:	f7ff ffa6 	bl	8000514 <std>
 80005c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80005cc:	2201      	movs	r2, #1
 80005ce:	2109      	movs	r1, #9
 80005d0:	f7ff ffa0 	bl	8000514 <std>
 80005d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80005d8:	2202      	movs	r2, #2
 80005da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005de:	2112      	movs	r1, #18
 80005e0:	f7ff bf98 	b.w	8000514 <std>
 80005e4:	200001b4 	.word	0x200001b4
 80005e8:	2000007c 	.word	0x2000007c
 80005ec:	0800055d 	.word	0x0800055d

080005f0 <__sfp_lock_acquire>:
 80005f0:	4801      	ldr	r0, [pc, #4]	; (80005f8 <__sfp_lock_acquire+0x8>)
 80005f2:	f000 b9eb 	b.w	80009cc <__retarget_lock_acquire_recursive>
 80005f6:	bf00      	nop
 80005f8:	200001bd 	.word	0x200001bd

080005fc <__sfp_lock_release>:
 80005fc:	4801      	ldr	r0, [pc, #4]	; (8000604 <__sfp_lock_release+0x8>)
 80005fe:	f000 b9e6 	b.w	80009ce <__retarget_lock_release_recursive>
 8000602:	bf00      	nop
 8000604:	200001bd 	.word	0x200001bd

08000608 <__sinit>:
 8000608:	b510      	push	{r4, lr}
 800060a:	4604      	mov	r4, r0
 800060c:	f7ff fff0 	bl	80005f0 <__sfp_lock_acquire>
 8000610:	6a23      	ldr	r3, [r4, #32]
 8000612:	b11b      	cbz	r3, 800061c <__sinit+0x14>
 8000614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000618:	f7ff bff0 	b.w	80005fc <__sfp_lock_release>
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <__sinit+0x28>)
 800061e:	6223      	str	r3, [r4, #32]
 8000620:	4b04      	ldr	r3, [pc, #16]	; (8000634 <__sinit+0x2c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f5      	bne.n	8000614 <__sinit+0xc>
 8000628:	f7ff ffc4 	bl	80005b4 <global_stdio_init.part.0>
 800062c:	e7f2      	b.n	8000614 <__sinit+0xc>
 800062e:	bf00      	nop
 8000630:	08000575 	.word	0x08000575
 8000634:	200001b4 	.word	0x200001b4

08000638 <_fwalk_sglue>:
 8000638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800063c:	4607      	mov	r7, r0
 800063e:	4688      	mov	r8, r1
 8000640:	4614      	mov	r4, r2
 8000642:	2600      	movs	r6, #0
 8000644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000648:	f1b9 0901 	subs.w	r9, r9, #1
 800064c:	d505      	bpl.n	800065a <_fwalk_sglue+0x22>
 800064e:	6824      	ldr	r4, [r4, #0]
 8000650:	2c00      	cmp	r4, #0
 8000652:	d1f7      	bne.n	8000644 <_fwalk_sglue+0xc>
 8000654:	4630      	mov	r0, r6
 8000656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800065a:	89ab      	ldrh	r3, [r5, #12]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d907      	bls.n	8000670 <_fwalk_sglue+0x38>
 8000660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000664:	3301      	adds	r3, #1
 8000666:	d003      	beq.n	8000670 <_fwalk_sglue+0x38>
 8000668:	4629      	mov	r1, r5
 800066a:	4638      	mov	r0, r7
 800066c:	47c0      	blx	r8
 800066e:	4306      	orrs	r6, r0
 8000670:	3568      	adds	r5, #104	; 0x68
 8000672:	e7e9      	b.n	8000648 <_fwalk_sglue+0x10>

08000674 <_puts_r>:
 8000674:	6a03      	ldr	r3, [r0, #32]
 8000676:	b570      	push	{r4, r5, r6, lr}
 8000678:	6884      	ldr	r4, [r0, #8]
 800067a:	4605      	mov	r5, r0
 800067c:	460e      	mov	r6, r1
 800067e:	b90b      	cbnz	r3, 8000684 <_puts_r+0x10>
 8000680:	f7ff ffc2 	bl	8000608 <__sinit>
 8000684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000686:	07db      	lsls	r3, r3, #31
 8000688:	d405      	bmi.n	8000696 <_puts_r+0x22>
 800068a:	89a3      	ldrh	r3, [r4, #12]
 800068c:	0598      	lsls	r0, r3, #22
 800068e:	d402      	bmi.n	8000696 <_puts_r+0x22>
 8000690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000692:	f000 f99b 	bl	80009cc <__retarget_lock_acquire_recursive>
 8000696:	89a3      	ldrh	r3, [r4, #12]
 8000698:	0719      	lsls	r1, r3, #28
 800069a:	d513      	bpl.n	80006c4 <_puts_r+0x50>
 800069c:	6923      	ldr	r3, [r4, #16]
 800069e:	b18b      	cbz	r3, 80006c4 <_puts_r+0x50>
 80006a0:	3e01      	subs	r6, #1
 80006a2:	68a3      	ldr	r3, [r4, #8]
 80006a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006a8:	3b01      	subs	r3, #1
 80006aa:	60a3      	str	r3, [r4, #8]
 80006ac:	b9e9      	cbnz	r1, 80006ea <_puts_r+0x76>
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	da2e      	bge.n	8000710 <_puts_r+0x9c>
 80006b2:	4622      	mov	r2, r4
 80006b4:	210a      	movs	r1, #10
 80006b6:	4628      	mov	r0, r5
 80006b8:	f000 f87b 	bl	80007b2 <__swbuf_r>
 80006bc:	3001      	adds	r0, #1
 80006be:	d007      	beq.n	80006d0 <_puts_r+0x5c>
 80006c0:	250a      	movs	r5, #10
 80006c2:	e007      	b.n	80006d4 <_puts_r+0x60>
 80006c4:	4621      	mov	r1, r4
 80006c6:	4628      	mov	r0, r5
 80006c8:	f000 f8b0 	bl	800082c <__swsetup_r>
 80006cc:	2800      	cmp	r0, #0
 80006ce:	d0e7      	beq.n	80006a0 <_puts_r+0x2c>
 80006d0:	f04f 35ff 	mov.w	r5, #4294967295
 80006d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006d6:	07da      	lsls	r2, r3, #31
 80006d8:	d405      	bmi.n	80006e6 <_puts_r+0x72>
 80006da:	89a3      	ldrh	r3, [r4, #12]
 80006dc:	059b      	lsls	r3, r3, #22
 80006de:	d402      	bmi.n	80006e6 <_puts_r+0x72>
 80006e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006e2:	f000 f974 	bl	80009ce <__retarget_lock_release_recursive>
 80006e6:	4628      	mov	r0, r5
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	da04      	bge.n	80006f8 <_puts_r+0x84>
 80006ee:	69a2      	ldr	r2, [r4, #24]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dc06      	bgt.n	8000702 <_puts_r+0x8e>
 80006f4:	290a      	cmp	r1, #10
 80006f6:	d004      	beq.n	8000702 <_puts_r+0x8e>
 80006f8:	6823      	ldr	r3, [r4, #0]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	6022      	str	r2, [r4, #0]
 80006fe:	7019      	strb	r1, [r3, #0]
 8000700:	e7cf      	b.n	80006a2 <_puts_r+0x2e>
 8000702:	4622      	mov	r2, r4
 8000704:	4628      	mov	r0, r5
 8000706:	f000 f854 	bl	80007b2 <__swbuf_r>
 800070a:	3001      	adds	r0, #1
 800070c:	d1c9      	bne.n	80006a2 <_puts_r+0x2e>
 800070e:	e7df      	b.n	80006d0 <_puts_r+0x5c>
 8000710:	6823      	ldr	r3, [r4, #0]
 8000712:	250a      	movs	r5, #10
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	6022      	str	r2, [r4, #0]
 8000718:	701d      	strb	r5, [r3, #0]
 800071a:	e7db      	b.n	80006d4 <_puts_r+0x60>

0800071c <puts>:
 800071c:	4b02      	ldr	r3, [pc, #8]	; (8000728 <puts+0xc>)
 800071e:	4601      	mov	r1, r0
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	f7ff bfa7 	b.w	8000674 <_puts_r>
 8000726:	bf00      	nop
 8000728:	20000058 	.word	0x20000058

0800072c <__sread>:
 800072c:	b510      	push	{r4, lr}
 800072e:	460c      	mov	r4, r1
 8000730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000734:	f000 f8fc 	bl	8000930 <_read_r>
 8000738:	2800      	cmp	r0, #0
 800073a:	bfab      	itete	ge
 800073c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800073e:	89a3      	ldrhlt	r3, [r4, #12]
 8000740:	181b      	addge	r3, r3, r0
 8000742:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000746:	bfac      	ite	ge
 8000748:	6563      	strge	r3, [r4, #84]	; 0x54
 800074a:	81a3      	strhlt	r3, [r4, #12]
 800074c:	bd10      	pop	{r4, pc}

0800074e <__swrite>:
 800074e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000752:	461f      	mov	r7, r3
 8000754:	898b      	ldrh	r3, [r1, #12]
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	4605      	mov	r5, r0
 800075a:	460c      	mov	r4, r1
 800075c:	4616      	mov	r6, r2
 800075e:	d505      	bpl.n	800076c <__swrite+0x1e>
 8000760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000764:	2302      	movs	r3, #2
 8000766:	2200      	movs	r2, #0
 8000768:	f000 f8d0 	bl	800090c <_lseek_r>
 800076c:	89a3      	ldrh	r3, [r4, #12]
 800076e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000772:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000776:	81a3      	strh	r3, [r4, #12]
 8000778:	4632      	mov	r2, r6
 800077a:	463b      	mov	r3, r7
 800077c:	4628      	mov	r0, r5
 800077e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000782:	f000 b8e7 	b.w	8000954 <_write_r>

08000786 <__sseek>:
 8000786:	b510      	push	{r4, lr}
 8000788:	460c      	mov	r4, r1
 800078a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800078e:	f000 f8bd 	bl	800090c <_lseek_r>
 8000792:	1c43      	adds	r3, r0, #1
 8000794:	89a3      	ldrh	r3, [r4, #12]
 8000796:	bf15      	itete	ne
 8000798:	6560      	strne	r0, [r4, #84]	; 0x54
 800079a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800079e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80007a2:	81a3      	strheq	r3, [r4, #12]
 80007a4:	bf18      	it	ne
 80007a6:	81a3      	strhne	r3, [r4, #12]
 80007a8:	bd10      	pop	{r4, pc}

080007aa <__sclose>:
 80007aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007ae:	f000 b89d 	b.w	80008ec <_close_r>

080007b2 <__swbuf_r>:
 80007b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b4:	460e      	mov	r6, r1
 80007b6:	4614      	mov	r4, r2
 80007b8:	4605      	mov	r5, r0
 80007ba:	b118      	cbz	r0, 80007c4 <__swbuf_r+0x12>
 80007bc:	6a03      	ldr	r3, [r0, #32]
 80007be:	b90b      	cbnz	r3, 80007c4 <__swbuf_r+0x12>
 80007c0:	f7ff ff22 	bl	8000608 <__sinit>
 80007c4:	69a3      	ldr	r3, [r4, #24]
 80007c6:	60a3      	str	r3, [r4, #8]
 80007c8:	89a3      	ldrh	r3, [r4, #12]
 80007ca:	071a      	lsls	r2, r3, #28
 80007cc:	d525      	bpl.n	800081a <__swbuf_r+0x68>
 80007ce:	6923      	ldr	r3, [r4, #16]
 80007d0:	b31b      	cbz	r3, 800081a <__swbuf_r+0x68>
 80007d2:	6823      	ldr	r3, [r4, #0]
 80007d4:	6922      	ldr	r2, [r4, #16]
 80007d6:	1a98      	subs	r0, r3, r2
 80007d8:	6963      	ldr	r3, [r4, #20]
 80007da:	b2f6      	uxtb	r6, r6
 80007dc:	4283      	cmp	r3, r0
 80007de:	4637      	mov	r7, r6
 80007e0:	dc04      	bgt.n	80007ec <__swbuf_r+0x3a>
 80007e2:	4621      	mov	r1, r4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f000 fa6b 	bl	8000cc0 <_fflush_r>
 80007ea:	b9e0      	cbnz	r0, 8000826 <__swbuf_r+0x74>
 80007ec:	68a3      	ldr	r3, [r4, #8]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	60a3      	str	r3, [r4, #8]
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	1c5a      	adds	r2, r3, #1
 80007f6:	6022      	str	r2, [r4, #0]
 80007f8:	701e      	strb	r6, [r3, #0]
 80007fa:	6962      	ldr	r2, [r4, #20]
 80007fc:	1c43      	adds	r3, r0, #1
 80007fe:	429a      	cmp	r2, r3
 8000800:	d004      	beq.n	800080c <__swbuf_r+0x5a>
 8000802:	89a3      	ldrh	r3, [r4, #12]
 8000804:	07db      	lsls	r3, r3, #31
 8000806:	d506      	bpl.n	8000816 <__swbuf_r+0x64>
 8000808:	2e0a      	cmp	r6, #10
 800080a:	d104      	bne.n	8000816 <__swbuf_r+0x64>
 800080c:	4621      	mov	r1, r4
 800080e:	4628      	mov	r0, r5
 8000810:	f000 fa56 	bl	8000cc0 <_fflush_r>
 8000814:	b938      	cbnz	r0, 8000826 <__swbuf_r+0x74>
 8000816:	4638      	mov	r0, r7
 8000818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081a:	4621      	mov	r1, r4
 800081c:	4628      	mov	r0, r5
 800081e:	f000 f805 	bl	800082c <__swsetup_r>
 8000822:	2800      	cmp	r0, #0
 8000824:	d0d5      	beq.n	80007d2 <__swbuf_r+0x20>
 8000826:	f04f 37ff 	mov.w	r7, #4294967295
 800082a:	e7f4      	b.n	8000816 <__swbuf_r+0x64>

0800082c <__swsetup_r>:
 800082c:	b538      	push	{r3, r4, r5, lr}
 800082e:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <__swsetup_r+0xac>)
 8000830:	4605      	mov	r5, r0
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	460c      	mov	r4, r1
 8000836:	b118      	cbz	r0, 8000840 <__swsetup_r+0x14>
 8000838:	6a03      	ldr	r3, [r0, #32]
 800083a:	b90b      	cbnz	r3, 8000840 <__swsetup_r+0x14>
 800083c:	f7ff fee4 	bl	8000608 <__sinit>
 8000840:	89a3      	ldrh	r3, [r4, #12]
 8000842:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000846:	0718      	lsls	r0, r3, #28
 8000848:	d422      	bmi.n	8000890 <__swsetup_r+0x64>
 800084a:	06d9      	lsls	r1, r3, #27
 800084c:	d407      	bmi.n	800085e <__swsetup_r+0x32>
 800084e:	2309      	movs	r3, #9
 8000850:	602b      	str	r3, [r5, #0]
 8000852:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000856:	81a3      	strh	r3, [r4, #12]
 8000858:	f04f 30ff 	mov.w	r0, #4294967295
 800085c:	e034      	b.n	80008c8 <__swsetup_r+0x9c>
 800085e:	0758      	lsls	r0, r3, #29
 8000860:	d512      	bpl.n	8000888 <__swsetup_r+0x5c>
 8000862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000864:	b141      	cbz	r1, 8000878 <__swsetup_r+0x4c>
 8000866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800086a:	4299      	cmp	r1, r3
 800086c:	d002      	beq.n	8000874 <__swsetup_r+0x48>
 800086e:	4628      	mov	r0, r5
 8000870:	f000 f8ae 	bl	80009d0 <_free_r>
 8000874:	2300      	movs	r3, #0
 8000876:	6363      	str	r3, [r4, #52]	; 0x34
 8000878:	89a3      	ldrh	r3, [r4, #12]
 800087a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800087e:	81a3      	strh	r3, [r4, #12]
 8000880:	2300      	movs	r3, #0
 8000882:	6063      	str	r3, [r4, #4]
 8000884:	6923      	ldr	r3, [r4, #16]
 8000886:	6023      	str	r3, [r4, #0]
 8000888:	89a3      	ldrh	r3, [r4, #12]
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	81a3      	strh	r3, [r4, #12]
 8000890:	6923      	ldr	r3, [r4, #16]
 8000892:	b94b      	cbnz	r3, 80008a8 <__swsetup_r+0x7c>
 8000894:	89a3      	ldrh	r3, [r4, #12]
 8000896:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800089a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800089e:	d003      	beq.n	80008a8 <__swsetup_r+0x7c>
 80008a0:	4621      	mov	r1, r4
 80008a2:	4628      	mov	r0, r5
 80008a4:	f000 fa5a 	bl	8000d5c <__smakebuf_r>
 80008a8:	89a0      	ldrh	r0, [r4, #12]
 80008aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008ae:	f010 0301 	ands.w	r3, r0, #1
 80008b2:	d00a      	beq.n	80008ca <__swsetup_r+0x9e>
 80008b4:	2300      	movs	r3, #0
 80008b6:	60a3      	str	r3, [r4, #8]
 80008b8:	6963      	ldr	r3, [r4, #20]
 80008ba:	425b      	negs	r3, r3
 80008bc:	61a3      	str	r3, [r4, #24]
 80008be:	6923      	ldr	r3, [r4, #16]
 80008c0:	b943      	cbnz	r3, 80008d4 <__swsetup_r+0xa8>
 80008c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80008c6:	d1c4      	bne.n	8000852 <__swsetup_r+0x26>
 80008c8:	bd38      	pop	{r3, r4, r5, pc}
 80008ca:	0781      	lsls	r1, r0, #30
 80008cc:	bf58      	it	pl
 80008ce:	6963      	ldrpl	r3, [r4, #20]
 80008d0:	60a3      	str	r3, [r4, #8]
 80008d2:	e7f4      	b.n	80008be <__swsetup_r+0x92>
 80008d4:	2000      	movs	r0, #0
 80008d6:	e7f7      	b.n	80008c8 <__swsetup_r+0x9c>
 80008d8:	20000058 	.word	0x20000058

080008dc <memset>:
 80008dc:	4402      	add	r2, r0
 80008de:	4603      	mov	r3, r0
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d100      	bne.n	80008e6 <memset+0xa>
 80008e4:	4770      	bx	lr
 80008e6:	f803 1b01 	strb.w	r1, [r3], #1
 80008ea:	e7f9      	b.n	80008e0 <memset+0x4>

080008ec <_close_r>:
 80008ec:	b538      	push	{r3, r4, r5, lr}
 80008ee:	4d06      	ldr	r5, [pc, #24]	; (8000908 <_close_r+0x1c>)
 80008f0:	2300      	movs	r3, #0
 80008f2:	4604      	mov	r4, r0
 80008f4:	4608      	mov	r0, r1
 80008f6:	602b      	str	r3, [r5, #0]
 80008f8:	f7ff fd7b 	bl	80003f2 <_close>
 80008fc:	1c43      	adds	r3, r0, #1
 80008fe:	d102      	bne.n	8000906 <_close_r+0x1a>
 8000900:	682b      	ldr	r3, [r5, #0]
 8000902:	b103      	cbz	r3, 8000906 <_close_r+0x1a>
 8000904:	6023      	str	r3, [r4, #0]
 8000906:	bd38      	pop	{r3, r4, r5, pc}
 8000908:	200001b8 	.word	0x200001b8

0800090c <_lseek_r>:
 800090c:	b538      	push	{r3, r4, r5, lr}
 800090e:	4d07      	ldr	r5, [pc, #28]	; (800092c <_lseek_r+0x20>)
 8000910:	4604      	mov	r4, r0
 8000912:	4608      	mov	r0, r1
 8000914:	4611      	mov	r1, r2
 8000916:	2200      	movs	r2, #0
 8000918:	602a      	str	r2, [r5, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	f7ff fd8d 	bl	800043a <_lseek>
 8000920:	1c43      	adds	r3, r0, #1
 8000922:	d102      	bne.n	800092a <_lseek_r+0x1e>
 8000924:	682b      	ldr	r3, [r5, #0]
 8000926:	b103      	cbz	r3, 800092a <_lseek_r+0x1e>
 8000928:	6023      	str	r3, [r4, #0]
 800092a:	bd38      	pop	{r3, r4, r5, pc}
 800092c:	200001b8 	.word	0x200001b8

08000930 <_read_r>:
 8000930:	b538      	push	{r3, r4, r5, lr}
 8000932:	4d07      	ldr	r5, [pc, #28]	; (8000950 <_read_r+0x20>)
 8000934:	4604      	mov	r4, r0
 8000936:	4608      	mov	r0, r1
 8000938:	4611      	mov	r1, r2
 800093a:	2200      	movs	r2, #0
 800093c:	602a      	str	r2, [r5, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	f7ff fd1e 	bl	8000380 <_read>
 8000944:	1c43      	adds	r3, r0, #1
 8000946:	d102      	bne.n	800094e <_read_r+0x1e>
 8000948:	682b      	ldr	r3, [r5, #0]
 800094a:	b103      	cbz	r3, 800094e <_read_r+0x1e>
 800094c:	6023      	str	r3, [r4, #0]
 800094e:	bd38      	pop	{r3, r4, r5, pc}
 8000950:	200001b8 	.word	0x200001b8

08000954 <_write_r>:
 8000954:	b538      	push	{r3, r4, r5, lr}
 8000956:	4d07      	ldr	r5, [pc, #28]	; (8000974 <_write_r+0x20>)
 8000958:	4604      	mov	r4, r0
 800095a:	4608      	mov	r0, r1
 800095c:	4611      	mov	r1, r2
 800095e:	2200      	movs	r2, #0
 8000960:	602a      	str	r2, [r5, #0]
 8000962:	461a      	mov	r2, r3
 8000964:	f7ff fd29 	bl	80003ba <_write>
 8000968:	1c43      	adds	r3, r0, #1
 800096a:	d102      	bne.n	8000972 <_write_r+0x1e>
 800096c:	682b      	ldr	r3, [r5, #0]
 800096e:	b103      	cbz	r3, 8000972 <_write_r+0x1e>
 8000970:	6023      	str	r3, [r4, #0]
 8000972:	bd38      	pop	{r3, r4, r5, pc}
 8000974:	200001b8 	.word	0x200001b8

08000978 <__errno>:
 8000978:	4b01      	ldr	r3, [pc, #4]	; (8000980 <__errno+0x8>)
 800097a:	6818      	ldr	r0, [r3, #0]
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000058 	.word	0x20000058

08000984 <__libc_init_array>:
 8000984:	b570      	push	{r4, r5, r6, lr}
 8000986:	4d0d      	ldr	r5, [pc, #52]	; (80009bc <__libc_init_array+0x38>)
 8000988:	4c0d      	ldr	r4, [pc, #52]	; (80009c0 <__libc_init_array+0x3c>)
 800098a:	1b64      	subs	r4, r4, r5
 800098c:	10a4      	asrs	r4, r4, #2
 800098e:	2600      	movs	r6, #0
 8000990:	42a6      	cmp	r6, r4
 8000992:	d109      	bne.n	80009a8 <__libc_init_array+0x24>
 8000994:	4d0b      	ldr	r5, [pc, #44]	; (80009c4 <__libc_init_array+0x40>)
 8000996:	4c0c      	ldr	r4, [pc, #48]	; (80009c8 <__libc_init_array+0x44>)
 8000998:	f000 fa4e 	bl	8000e38 <_init>
 800099c:	1b64      	subs	r4, r4, r5
 800099e:	10a4      	asrs	r4, r4, #2
 80009a0:	2600      	movs	r6, #0
 80009a2:	42a6      	cmp	r6, r4
 80009a4:	d105      	bne.n	80009b2 <__libc_init_array+0x2e>
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ac:	4798      	blx	r3
 80009ae:	3601      	adds	r6, #1
 80009b0:	e7ee      	b.n	8000990 <__libc_init_array+0xc>
 80009b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009b6:	4798      	blx	r3
 80009b8:	3601      	adds	r6, #1
 80009ba:	e7f2      	b.n	80009a2 <__libc_init_array+0x1e>
 80009bc:	08000e60 	.word	0x08000e60
 80009c0:	08000e60 	.word	0x08000e60
 80009c4:	08000e60 	.word	0x08000e60
 80009c8:	08000e64 	.word	0x08000e64

080009cc <__retarget_lock_acquire_recursive>:
 80009cc:	4770      	bx	lr

080009ce <__retarget_lock_release_recursive>:
 80009ce:	4770      	bx	lr

080009d0 <_free_r>:
 80009d0:	b538      	push	{r3, r4, r5, lr}
 80009d2:	4605      	mov	r5, r0
 80009d4:	2900      	cmp	r1, #0
 80009d6:	d041      	beq.n	8000a5c <_free_r+0x8c>
 80009d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009dc:	1f0c      	subs	r4, r1, #4
 80009de:	2b00      	cmp	r3, #0
 80009e0:	bfb8      	it	lt
 80009e2:	18e4      	addlt	r4, r4, r3
 80009e4:	f000 f8de 	bl	8000ba4 <__malloc_lock>
 80009e8:	4a1d      	ldr	r2, [pc, #116]	; (8000a60 <_free_r+0x90>)
 80009ea:	6813      	ldr	r3, [r2, #0]
 80009ec:	b933      	cbnz	r3, 80009fc <_free_r+0x2c>
 80009ee:	6063      	str	r3, [r4, #4]
 80009f0:	6014      	str	r4, [r2, #0]
 80009f2:	4628      	mov	r0, r5
 80009f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009f8:	f000 b8da 	b.w	8000bb0 <__malloc_unlock>
 80009fc:	42a3      	cmp	r3, r4
 80009fe:	d908      	bls.n	8000a12 <_free_r+0x42>
 8000a00:	6820      	ldr	r0, [r4, #0]
 8000a02:	1821      	adds	r1, r4, r0
 8000a04:	428b      	cmp	r3, r1
 8000a06:	bf01      	itttt	eq
 8000a08:	6819      	ldreq	r1, [r3, #0]
 8000a0a:	685b      	ldreq	r3, [r3, #4]
 8000a0c:	1809      	addeq	r1, r1, r0
 8000a0e:	6021      	streq	r1, [r4, #0]
 8000a10:	e7ed      	b.n	80009ee <_free_r+0x1e>
 8000a12:	461a      	mov	r2, r3
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	b10b      	cbz	r3, 8000a1c <_free_r+0x4c>
 8000a18:	42a3      	cmp	r3, r4
 8000a1a:	d9fa      	bls.n	8000a12 <_free_r+0x42>
 8000a1c:	6811      	ldr	r1, [r2, #0]
 8000a1e:	1850      	adds	r0, r2, r1
 8000a20:	42a0      	cmp	r0, r4
 8000a22:	d10b      	bne.n	8000a3c <_free_r+0x6c>
 8000a24:	6820      	ldr	r0, [r4, #0]
 8000a26:	4401      	add	r1, r0
 8000a28:	1850      	adds	r0, r2, r1
 8000a2a:	4283      	cmp	r3, r0
 8000a2c:	6011      	str	r1, [r2, #0]
 8000a2e:	d1e0      	bne.n	80009f2 <_free_r+0x22>
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	6053      	str	r3, [r2, #4]
 8000a36:	4408      	add	r0, r1
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	e7da      	b.n	80009f2 <_free_r+0x22>
 8000a3c:	d902      	bls.n	8000a44 <_free_r+0x74>
 8000a3e:	230c      	movs	r3, #12
 8000a40:	602b      	str	r3, [r5, #0]
 8000a42:	e7d6      	b.n	80009f2 <_free_r+0x22>
 8000a44:	6820      	ldr	r0, [r4, #0]
 8000a46:	1821      	adds	r1, r4, r0
 8000a48:	428b      	cmp	r3, r1
 8000a4a:	bf04      	itt	eq
 8000a4c:	6819      	ldreq	r1, [r3, #0]
 8000a4e:	685b      	ldreq	r3, [r3, #4]
 8000a50:	6063      	str	r3, [r4, #4]
 8000a52:	bf04      	itt	eq
 8000a54:	1809      	addeq	r1, r1, r0
 8000a56:	6021      	streq	r1, [r4, #0]
 8000a58:	6054      	str	r4, [r2, #4]
 8000a5a:	e7ca      	b.n	80009f2 <_free_r+0x22>
 8000a5c:	bd38      	pop	{r3, r4, r5, pc}
 8000a5e:	bf00      	nop
 8000a60:	200001c0 	.word	0x200001c0

08000a64 <sbrk_aligned>:
 8000a64:	b570      	push	{r4, r5, r6, lr}
 8000a66:	4e0e      	ldr	r6, [pc, #56]	; (8000aa0 <sbrk_aligned+0x3c>)
 8000a68:	460c      	mov	r4, r1
 8000a6a:	6831      	ldr	r1, [r6, #0]
 8000a6c:	4605      	mov	r5, r0
 8000a6e:	b911      	cbnz	r1, 8000a76 <sbrk_aligned+0x12>
 8000a70:	f000 f9d2 	bl	8000e18 <_sbrk_r>
 8000a74:	6030      	str	r0, [r6, #0]
 8000a76:	4621      	mov	r1, r4
 8000a78:	4628      	mov	r0, r5
 8000a7a:	f000 f9cd 	bl	8000e18 <_sbrk_r>
 8000a7e:	1c43      	adds	r3, r0, #1
 8000a80:	d00a      	beq.n	8000a98 <sbrk_aligned+0x34>
 8000a82:	1cc4      	adds	r4, r0, #3
 8000a84:	f024 0403 	bic.w	r4, r4, #3
 8000a88:	42a0      	cmp	r0, r4
 8000a8a:	d007      	beq.n	8000a9c <sbrk_aligned+0x38>
 8000a8c:	1a21      	subs	r1, r4, r0
 8000a8e:	4628      	mov	r0, r5
 8000a90:	f000 f9c2 	bl	8000e18 <_sbrk_r>
 8000a94:	3001      	adds	r0, #1
 8000a96:	d101      	bne.n	8000a9c <sbrk_aligned+0x38>
 8000a98:	f04f 34ff 	mov.w	r4, #4294967295
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	200001c4 	.word	0x200001c4

08000aa4 <_malloc_r>:
 8000aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aa8:	1ccd      	adds	r5, r1, #3
 8000aaa:	f025 0503 	bic.w	r5, r5, #3
 8000aae:	3508      	adds	r5, #8
 8000ab0:	2d0c      	cmp	r5, #12
 8000ab2:	bf38      	it	cc
 8000ab4:	250c      	movcc	r5, #12
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	4607      	mov	r7, r0
 8000aba:	db01      	blt.n	8000ac0 <_malloc_r+0x1c>
 8000abc:	42a9      	cmp	r1, r5
 8000abe:	d905      	bls.n	8000acc <_malloc_r+0x28>
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	2600      	movs	r6, #0
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000acc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ba0 <_malloc_r+0xfc>
 8000ad0:	f000 f868 	bl	8000ba4 <__malloc_lock>
 8000ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8000ad8:	461c      	mov	r4, r3
 8000ada:	bb5c      	cbnz	r4, 8000b34 <_malloc_r+0x90>
 8000adc:	4629      	mov	r1, r5
 8000ade:	4638      	mov	r0, r7
 8000ae0:	f7ff ffc0 	bl	8000a64 <sbrk_aligned>
 8000ae4:	1c43      	adds	r3, r0, #1
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	d155      	bne.n	8000b96 <_malloc_r+0xf2>
 8000aea:	f8d8 4000 	ldr.w	r4, [r8]
 8000aee:	4626      	mov	r6, r4
 8000af0:	2e00      	cmp	r6, #0
 8000af2:	d145      	bne.n	8000b80 <_malloc_r+0xdc>
 8000af4:	2c00      	cmp	r4, #0
 8000af6:	d048      	beq.n	8000b8a <_malloc_r+0xe6>
 8000af8:	6823      	ldr	r3, [r4, #0]
 8000afa:	4631      	mov	r1, r6
 8000afc:	4638      	mov	r0, r7
 8000afe:	eb04 0903 	add.w	r9, r4, r3
 8000b02:	f000 f989 	bl	8000e18 <_sbrk_r>
 8000b06:	4581      	cmp	r9, r0
 8000b08:	d13f      	bne.n	8000b8a <_malloc_r+0xe6>
 8000b0a:	6821      	ldr	r1, [r4, #0]
 8000b0c:	1a6d      	subs	r5, r5, r1
 8000b0e:	4629      	mov	r1, r5
 8000b10:	4638      	mov	r0, r7
 8000b12:	f7ff ffa7 	bl	8000a64 <sbrk_aligned>
 8000b16:	3001      	adds	r0, #1
 8000b18:	d037      	beq.n	8000b8a <_malloc_r+0xe6>
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	442b      	add	r3, r5
 8000b1e:	6023      	str	r3, [r4, #0]
 8000b20:	f8d8 3000 	ldr.w	r3, [r8]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d038      	beq.n	8000b9a <_malloc_r+0xf6>
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	42a2      	cmp	r2, r4
 8000b2c:	d12b      	bne.n	8000b86 <_malloc_r+0xe2>
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	e00f      	b.n	8000b54 <_malloc_r+0xb0>
 8000b34:	6822      	ldr	r2, [r4, #0]
 8000b36:	1b52      	subs	r2, r2, r5
 8000b38:	d41f      	bmi.n	8000b7a <_malloc_r+0xd6>
 8000b3a:	2a0b      	cmp	r2, #11
 8000b3c:	d917      	bls.n	8000b6e <_malloc_r+0xca>
 8000b3e:	1961      	adds	r1, r4, r5
 8000b40:	42a3      	cmp	r3, r4
 8000b42:	6025      	str	r5, [r4, #0]
 8000b44:	bf18      	it	ne
 8000b46:	6059      	strne	r1, [r3, #4]
 8000b48:	6863      	ldr	r3, [r4, #4]
 8000b4a:	bf08      	it	eq
 8000b4c:	f8c8 1000 	streq.w	r1, [r8]
 8000b50:	5162      	str	r2, [r4, r5]
 8000b52:	604b      	str	r3, [r1, #4]
 8000b54:	4638      	mov	r0, r7
 8000b56:	f104 060b 	add.w	r6, r4, #11
 8000b5a:	f000 f829 	bl	8000bb0 <__malloc_unlock>
 8000b5e:	f026 0607 	bic.w	r6, r6, #7
 8000b62:	1d23      	adds	r3, r4, #4
 8000b64:	1af2      	subs	r2, r6, r3
 8000b66:	d0ae      	beq.n	8000ac6 <_malloc_r+0x22>
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	50a3      	str	r3, [r4, r2]
 8000b6c:	e7ab      	b.n	8000ac6 <_malloc_r+0x22>
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	6862      	ldr	r2, [r4, #4]
 8000b72:	d1dd      	bne.n	8000b30 <_malloc_r+0x8c>
 8000b74:	f8c8 2000 	str.w	r2, [r8]
 8000b78:	e7ec      	b.n	8000b54 <_malloc_r+0xb0>
 8000b7a:	4623      	mov	r3, r4
 8000b7c:	6864      	ldr	r4, [r4, #4]
 8000b7e:	e7ac      	b.n	8000ada <_malloc_r+0x36>
 8000b80:	4634      	mov	r4, r6
 8000b82:	6876      	ldr	r6, [r6, #4]
 8000b84:	e7b4      	b.n	8000af0 <_malloc_r+0x4c>
 8000b86:	4613      	mov	r3, r2
 8000b88:	e7cc      	b.n	8000b24 <_malloc_r+0x80>
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4638      	mov	r0, r7
 8000b90:	f000 f80e 	bl	8000bb0 <__malloc_unlock>
 8000b94:	e797      	b.n	8000ac6 <_malloc_r+0x22>
 8000b96:	6025      	str	r5, [r4, #0]
 8000b98:	e7dc      	b.n	8000b54 <_malloc_r+0xb0>
 8000b9a:	605b      	str	r3, [r3, #4]
 8000b9c:	deff      	udf	#255	; 0xff
 8000b9e:	bf00      	nop
 8000ba0:	200001c0 	.word	0x200001c0

08000ba4 <__malloc_lock>:
 8000ba4:	4801      	ldr	r0, [pc, #4]	; (8000bac <__malloc_lock+0x8>)
 8000ba6:	f7ff bf11 	b.w	80009cc <__retarget_lock_acquire_recursive>
 8000baa:	bf00      	nop
 8000bac:	200001bc 	.word	0x200001bc

08000bb0 <__malloc_unlock>:
 8000bb0:	4801      	ldr	r0, [pc, #4]	; (8000bb8 <__malloc_unlock+0x8>)
 8000bb2:	f7ff bf0c 	b.w	80009ce <__retarget_lock_release_recursive>
 8000bb6:	bf00      	nop
 8000bb8:	200001bc 	.word	0x200001bc

08000bbc <__sflush_r>:
 8000bbc:	898a      	ldrh	r2, [r1, #12]
 8000bbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc0:	4605      	mov	r5, r0
 8000bc2:	0710      	lsls	r0, r2, #28
 8000bc4:	460c      	mov	r4, r1
 8000bc6:	d457      	bmi.n	8000c78 <__sflush_r+0xbc>
 8000bc8:	684b      	ldr	r3, [r1, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	dc04      	bgt.n	8000bd8 <__sflush_r+0x1c>
 8000bce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	dc01      	bgt.n	8000bd8 <__sflush_r+0x1c>
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d0fa      	beq.n	8000bd4 <__sflush_r+0x18>
 8000bde:	2300      	movs	r3, #0
 8000be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000be4:	682f      	ldr	r7, [r5, #0]
 8000be6:	6a21      	ldr	r1, [r4, #32]
 8000be8:	602b      	str	r3, [r5, #0]
 8000bea:	d032      	beq.n	8000c52 <__sflush_r+0x96>
 8000bec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000bee:	89a3      	ldrh	r3, [r4, #12]
 8000bf0:	075a      	lsls	r2, r3, #29
 8000bf2:	d505      	bpl.n	8000c00 <__sflush_r+0x44>
 8000bf4:	6863      	ldr	r3, [r4, #4]
 8000bf6:	1ac0      	subs	r0, r0, r3
 8000bf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000bfa:	b10b      	cbz	r3, 8000c00 <__sflush_r+0x44>
 8000bfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bfe:	1ac0      	subs	r0, r0, r3
 8000c00:	2300      	movs	r3, #0
 8000c02:	4602      	mov	r2, r0
 8000c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c06:	6a21      	ldr	r1, [r4, #32]
 8000c08:	4628      	mov	r0, r5
 8000c0a:	47b0      	blx	r6
 8000c0c:	1c43      	adds	r3, r0, #1
 8000c0e:	89a3      	ldrh	r3, [r4, #12]
 8000c10:	d106      	bne.n	8000c20 <__sflush_r+0x64>
 8000c12:	6829      	ldr	r1, [r5, #0]
 8000c14:	291d      	cmp	r1, #29
 8000c16:	d82b      	bhi.n	8000c70 <__sflush_r+0xb4>
 8000c18:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <__sflush_r+0x100>)
 8000c1a:	410a      	asrs	r2, r1
 8000c1c:	07d6      	lsls	r6, r2, #31
 8000c1e:	d427      	bmi.n	8000c70 <__sflush_r+0xb4>
 8000c20:	2200      	movs	r2, #0
 8000c22:	6062      	str	r2, [r4, #4]
 8000c24:	04d9      	lsls	r1, r3, #19
 8000c26:	6922      	ldr	r2, [r4, #16]
 8000c28:	6022      	str	r2, [r4, #0]
 8000c2a:	d504      	bpl.n	8000c36 <__sflush_r+0x7a>
 8000c2c:	1c42      	adds	r2, r0, #1
 8000c2e:	d101      	bne.n	8000c34 <__sflush_r+0x78>
 8000c30:	682b      	ldr	r3, [r5, #0]
 8000c32:	b903      	cbnz	r3, 8000c36 <__sflush_r+0x7a>
 8000c34:	6560      	str	r0, [r4, #84]	; 0x54
 8000c36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c38:	602f      	str	r7, [r5, #0]
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d0ca      	beq.n	8000bd4 <__sflush_r+0x18>
 8000c3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d002      	beq.n	8000c4c <__sflush_r+0x90>
 8000c46:	4628      	mov	r0, r5
 8000c48:	f7ff fec2 	bl	80009d0 <_free_r>
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	6360      	str	r0, [r4, #52]	; 0x34
 8000c50:	e7c1      	b.n	8000bd6 <__sflush_r+0x1a>
 8000c52:	2301      	movs	r3, #1
 8000c54:	4628      	mov	r0, r5
 8000c56:	47b0      	blx	r6
 8000c58:	1c41      	adds	r1, r0, #1
 8000c5a:	d1c8      	bne.n	8000bee <__sflush_r+0x32>
 8000c5c:	682b      	ldr	r3, [r5, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d0c5      	beq.n	8000bee <__sflush_r+0x32>
 8000c62:	2b1d      	cmp	r3, #29
 8000c64:	d001      	beq.n	8000c6a <__sflush_r+0xae>
 8000c66:	2b16      	cmp	r3, #22
 8000c68:	d101      	bne.n	8000c6e <__sflush_r+0xb2>
 8000c6a:	602f      	str	r7, [r5, #0]
 8000c6c:	e7b2      	b.n	8000bd4 <__sflush_r+0x18>
 8000c6e:	89a3      	ldrh	r3, [r4, #12]
 8000c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c74:	81a3      	strh	r3, [r4, #12]
 8000c76:	e7ae      	b.n	8000bd6 <__sflush_r+0x1a>
 8000c78:	690f      	ldr	r7, [r1, #16]
 8000c7a:	2f00      	cmp	r7, #0
 8000c7c:	d0aa      	beq.n	8000bd4 <__sflush_r+0x18>
 8000c7e:	0793      	lsls	r3, r2, #30
 8000c80:	680e      	ldr	r6, [r1, #0]
 8000c82:	bf08      	it	eq
 8000c84:	694b      	ldreq	r3, [r1, #20]
 8000c86:	600f      	str	r7, [r1, #0]
 8000c88:	bf18      	it	ne
 8000c8a:	2300      	movne	r3, #0
 8000c8c:	1bf6      	subs	r6, r6, r7
 8000c8e:	608b      	str	r3, [r1, #8]
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	dd9f      	ble.n	8000bd4 <__sflush_r+0x18>
 8000c94:	6a21      	ldr	r1, [r4, #32]
 8000c96:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000c9a:	4633      	mov	r3, r6
 8000c9c:	463a      	mov	r2, r7
 8000c9e:	4628      	mov	r0, r5
 8000ca0:	47e0      	blx	ip
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	dc06      	bgt.n	8000cb4 <__sflush_r+0xf8>
 8000ca6:	89a3      	ldrh	r3, [r4, #12]
 8000ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cac:	81a3      	strh	r3, [r4, #12]
 8000cae:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb2:	e790      	b.n	8000bd6 <__sflush_r+0x1a>
 8000cb4:	4407      	add	r7, r0
 8000cb6:	1a36      	subs	r6, r6, r0
 8000cb8:	e7ea      	b.n	8000c90 <__sflush_r+0xd4>
 8000cba:	bf00      	nop
 8000cbc:	dfbffffe 	.word	0xdfbffffe

08000cc0 <_fflush_r>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	690b      	ldr	r3, [r1, #16]
 8000cc4:	4605      	mov	r5, r0
 8000cc6:	460c      	mov	r4, r1
 8000cc8:	b913      	cbnz	r3, 8000cd0 <_fflush_r+0x10>
 8000cca:	2500      	movs	r5, #0
 8000ccc:	4628      	mov	r0, r5
 8000cce:	bd38      	pop	{r3, r4, r5, pc}
 8000cd0:	b118      	cbz	r0, 8000cda <_fflush_r+0x1a>
 8000cd2:	6a03      	ldr	r3, [r0, #32]
 8000cd4:	b90b      	cbnz	r3, 8000cda <_fflush_r+0x1a>
 8000cd6:	f7ff fc97 	bl	8000608 <__sinit>
 8000cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f3      	beq.n	8000cca <_fflush_r+0xa>
 8000ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000ce4:	07d0      	lsls	r0, r2, #31
 8000ce6:	d404      	bmi.n	8000cf2 <_fflush_r+0x32>
 8000ce8:	0599      	lsls	r1, r3, #22
 8000cea:	d402      	bmi.n	8000cf2 <_fflush_r+0x32>
 8000cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000cee:	f7ff fe6d 	bl	80009cc <__retarget_lock_acquire_recursive>
 8000cf2:	4628      	mov	r0, r5
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	f7ff ff61 	bl	8000bbc <__sflush_r>
 8000cfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000cfc:	07da      	lsls	r2, r3, #31
 8000cfe:	4605      	mov	r5, r0
 8000d00:	d4e4      	bmi.n	8000ccc <_fflush_r+0xc>
 8000d02:	89a3      	ldrh	r3, [r4, #12]
 8000d04:	059b      	lsls	r3, r3, #22
 8000d06:	d4e1      	bmi.n	8000ccc <_fflush_r+0xc>
 8000d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000d0a:	f7ff fe60 	bl	80009ce <__retarget_lock_release_recursive>
 8000d0e:	e7dd      	b.n	8000ccc <_fflush_r+0xc>

08000d10 <__swhatbuf_r>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	460c      	mov	r4, r1
 8000d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	b096      	sub	sp, #88	; 0x58
 8000d1c:	4615      	mov	r5, r2
 8000d1e:	461e      	mov	r6, r3
 8000d20:	da0d      	bge.n	8000d3e <__swhatbuf_r+0x2e>
 8000d22:	89a3      	ldrh	r3, [r4, #12]
 8000d24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000d28:	f04f 0100 	mov.w	r1, #0
 8000d2c:	bf0c      	ite	eq
 8000d2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8000d32:	2340      	movne	r3, #64	; 0x40
 8000d34:	2000      	movs	r0, #0
 8000d36:	6031      	str	r1, [r6, #0]
 8000d38:	602b      	str	r3, [r5, #0]
 8000d3a:	b016      	add	sp, #88	; 0x58
 8000d3c:	bd70      	pop	{r4, r5, r6, pc}
 8000d3e:	466a      	mov	r2, sp
 8000d40:	f000 f848 	bl	8000dd4 <_fstat_r>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	dbec      	blt.n	8000d22 <__swhatbuf_r+0x12>
 8000d48:	9901      	ldr	r1, [sp, #4]
 8000d4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8000d4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8000d52:	4259      	negs	r1, r3
 8000d54:	4159      	adcs	r1, r3
 8000d56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5a:	e7eb      	b.n	8000d34 <__swhatbuf_r+0x24>

08000d5c <__smakebuf_r>:
 8000d5c:	898b      	ldrh	r3, [r1, #12]
 8000d5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d60:	079d      	lsls	r5, r3, #30
 8000d62:	4606      	mov	r6, r0
 8000d64:	460c      	mov	r4, r1
 8000d66:	d507      	bpl.n	8000d78 <__smakebuf_r+0x1c>
 8000d68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d6c:	6023      	str	r3, [r4, #0]
 8000d6e:	6123      	str	r3, [r4, #16]
 8000d70:	2301      	movs	r3, #1
 8000d72:	6163      	str	r3, [r4, #20]
 8000d74:	b002      	add	sp, #8
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
 8000d78:	ab01      	add	r3, sp, #4
 8000d7a:	466a      	mov	r2, sp
 8000d7c:	f7ff ffc8 	bl	8000d10 <__swhatbuf_r>
 8000d80:	9900      	ldr	r1, [sp, #0]
 8000d82:	4605      	mov	r5, r0
 8000d84:	4630      	mov	r0, r6
 8000d86:	f7ff fe8d 	bl	8000aa4 <_malloc_r>
 8000d8a:	b948      	cbnz	r0, 8000da0 <__smakebuf_r+0x44>
 8000d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d90:	059a      	lsls	r2, r3, #22
 8000d92:	d4ef      	bmi.n	8000d74 <__smakebuf_r+0x18>
 8000d94:	f023 0303 	bic.w	r3, r3, #3
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	81a3      	strh	r3, [r4, #12]
 8000d9e:	e7e3      	b.n	8000d68 <__smakebuf_r+0xc>
 8000da0:	89a3      	ldrh	r3, [r4, #12]
 8000da2:	6020      	str	r0, [r4, #0]
 8000da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000da8:	81a3      	strh	r3, [r4, #12]
 8000daa:	9b00      	ldr	r3, [sp, #0]
 8000dac:	6163      	str	r3, [r4, #20]
 8000dae:	9b01      	ldr	r3, [sp, #4]
 8000db0:	6120      	str	r0, [r4, #16]
 8000db2:	b15b      	cbz	r3, 8000dcc <__smakebuf_r+0x70>
 8000db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000db8:	4630      	mov	r0, r6
 8000dba:	f000 f81d 	bl	8000df8 <_isatty_r>
 8000dbe:	b128      	cbz	r0, 8000dcc <__smakebuf_r+0x70>
 8000dc0:	89a3      	ldrh	r3, [r4, #12]
 8000dc2:	f023 0303 	bic.w	r3, r3, #3
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	81a3      	strh	r3, [r4, #12]
 8000dcc:	89a3      	ldrh	r3, [r4, #12]
 8000dce:	431d      	orrs	r5, r3
 8000dd0:	81a5      	strh	r5, [r4, #12]
 8000dd2:	e7cf      	b.n	8000d74 <__smakebuf_r+0x18>

08000dd4 <_fstat_r>:
 8000dd4:	b538      	push	{r3, r4, r5, lr}
 8000dd6:	4d07      	ldr	r5, [pc, #28]	; (8000df4 <_fstat_r+0x20>)
 8000dd8:	2300      	movs	r3, #0
 8000dda:	4604      	mov	r4, r0
 8000ddc:	4608      	mov	r0, r1
 8000dde:	4611      	mov	r1, r2
 8000de0:	602b      	str	r3, [r5, #0]
 8000de2:	f7ff fb11 	bl	8000408 <_fstat>
 8000de6:	1c43      	adds	r3, r0, #1
 8000de8:	d102      	bne.n	8000df0 <_fstat_r+0x1c>
 8000dea:	682b      	ldr	r3, [r5, #0]
 8000dec:	b103      	cbz	r3, 8000df0 <_fstat_r+0x1c>
 8000dee:	6023      	str	r3, [r4, #0]
 8000df0:	bd38      	pop	{r3, r4, r5, pc}
 8000df2:	bf00      	nop
 8000df4:	200001b8 	.word	0x200001b8

08000df8 <_isatty_r>:
 8000df8:	b538      	push	{r3, r4, r5, lr}
 8000dfa:	4d06      	ldr	r5, [pc, #24]	; (8000e14 <_isatty_r+0x1c>)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	4604      	mov	r4, r0
 8000e00:	4608      	mov	r0, r1
 8000e02:	602b      	str	r3, [r5, #0]
 8000e04:	f7ff fb0f 	bl	8000426 <_isatty>
 8000e08:	1c43      	adds	r3, r0, #1
 8000e0a:	d102      	bne.n	8000e12 <_isatty_r+0x1a>
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	b103      	cbz	r3, 8000e12 <_isatty_r+0x1a>
 8000e10:	6023      	str	r3, [r4, #0]
 8000e12:	bd38      	pop	{r3, r4, r5, pc}
 8000e14:	200001b8 	.word	0x200001b8

08000e18 <_sbrk_r>:
 8000e18:	b538      	push	{r3, r4, r5, lr}
 8000e1a:	4d06      	ldr	r5, [pc, #24]	; (8000e34 <_sbrk_r+0x1c>)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4604      	mov	r4, r0
 8000e20:	4608      	mov	r0, r1
 8000e22:	602b      	str	r3, [r5, #0]
 8000e24:	f7ff fb16 	bl	8000454 <_sbrk>
 8000e28:	1c43      	adds	r3, r0, #1
 8000e2a:	d102      	bne.n	8000e32 <_sbrk_r+0x1a>
 8000e2c:	682b      	ldr	r3, [r5, #0]
 8000e2e:	b103      	cbz	r3, 8000e32 <_sbrk_r+0x1a>
 8000e30:	6023      	str	r3, [r4, #0]
 8000e32:	bd38      	pop	{r3, r4, r5, pc}
 8000e34:	200001b8 	.word	0x200001b8

08000e38 <_init>:
 8000e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3a:	bf00      	nop
 8000e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e3e:	bc08      	pop	{r3}
 8000e40:	469e      	mov	lr, r3
 8000e42:	4770      	bx	lr

08000e44 <_fini>:
 8000e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e46:	bf00      	nop
 8000e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e4a:	bc08      	pop	{r3}
 8000e4c:	469e      	mov	lr, r3
 8000e4e:	4770      	bx	lr
