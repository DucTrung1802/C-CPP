
target_007_keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001058  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080011f0  080011f0  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001240  08001240  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001240  08001240  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001240  08001240  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001240  08001240  00011240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001244  08001244  00011244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080012a4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080012a4  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000fd1  00000000  00000000  000200c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d2  00000000  00000000  0002109a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00021470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c5  00000000  00000000  00021590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b4d  00000000  00000000  00021655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001627  00000000  00000000  000241a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009a5e  00000000  00000000  000257c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000009f4  00000000  00000000  0002f228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0002fc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080011d8 	.word	0x080011d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	080011d8 	.word	0x080011d8

080001d8 <main>:
 */

void delayms(uint32_t const time_value);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b092      	sub	sp, #72	; 0x48
 80001dc:	af00      	add	r7, sp, #0
	/* Reset and clock control reg */
	RCC_AHB1_ENR_t
	volatile *const p_clock_control_reg = (RCC_AHB1_ENR_t*) (RCC + 0x30);
 80001de:	4b9c      	ldr	r3, [pc, #624]	; (8000450 <main+0x278>)
 80001e0:	633b      	str	r3, [r7, #48]	; 0x30

	/* GPIO A Configuration */
	p_clock_control_reg->gpio_a_en = 1;
 80001e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80001e4:	6813      	ldr	r3, [r2, #0]
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	6013      	str	r3, [r2, #0]
	GPIOx_MODE_REG_t volatile *const p_port_a_mode_reg =
 80001ec:	4b99      	ldr	r3, [pc, #612]	; (8000454 <main+0x27c>)
 80001ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			(GPIOx_MODE_REG_t*) GPIO_A;
	GPIOx_PUPDR_t volatile *const p_port_a_pull_reg = (GPIOx_PUPDR_t*) (GPIO_A
 80001f0:	4b99      	ldr	r3, [pc, #612]	; (8000458 <main+0x280>)
 80001f2:	62bb      	str	r3, [r7, #40]	; 0x28
			+ 0x0C);
	GPIOx_IDR_t volatile const *const p_port_a_input_reg =
 80001f4:	4b99      	ldr	r3, [pc, #612]	; (800045c <main+0x284>)
 80001f6:	627b      	str	r3, [r7, #36]	; 0x24
			(GPIOx_IDR_t*) (GPIO_A + 0x10);
	GPIOx_ODR_t volatile *const p_port_a_output_reg = (GPIOx_ODR_t*) (GPIO_A
 80001f8:	4b99      	ldr	r3, [pc, #612]	; (8000460 <main+0x288>)
 80001fa:	623b      	str	r3, [r7, #32]
			+ 0x14);

	/* GPIO B Configuration */
	p_clock_control_reg->gpio_b_en = 1;
 80001fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80001fe:	6813      	ldr	r3, [r2, #0]
 8000200:	f043 0302 	orr.w	r3, r3, #2
 8000204:	6013      	str	r3, [r2, #0]
	GPIOx_MODE_REG_t volatile *const p_port_b_mode_reg =
 8000206:	4b97      	ldr	r3, [pc, #604]	; (8000464 <main+0x28c>)
 8000208:	61fb      	str	r3, [r7, #28]
			(GPIOx_MODE_REG_t*) GPIO_B;
	GPIOx_PUPDR_t volatile *const p_port_b_pull_reg = (GPIOx_PUPDR_t*) (GPIO_B
 800020a:	4b97      	ldr	r3, [pc, #604]	; (8000468 <main+0x290>)
 800020c:	61bb      	str	r3, [r7, #24]
			+ 0x0C);
	GPIOx_IDR_t volatile const *const p_port_b_input_reg =
 800020e:	4b97      	ldr	r3, [pc, #604]	; (800046c <main+0x294>)
 8000210:	617b      	str	r3, [r7, #20]
			(GPIOx_IDR_t*) (GPIO_B + 0x10);
	GPIOx_ODR_t volatile *const p_port_b_output_reg = (GPIOx_ODR_t*) (GPIO_B
 8000212:	4b97      	ldr	r3, [pc, #604]	; (8000470 <main+0x298>)
 8000214:	613b      	str	r3, [r7, #16]
			+ 0x14);

	/* GPIO C Configuration */
	p_clock_control_reg->gpio_c_en = 1;
 8000216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000218:	6813      	ldr	r3, [r2, #0]
 800021a:	f043 0304 	orr.w	r3, r3, #4
 800021e:	6013      	str	r3, [r2, #0]
	GPIOx_MODE_REG_t volatile *const p_port_c_mode_reg =
 8000220:	4b94      	ldr	r3, [pc, #592]	; (8000474 <main+0x29c>)
 8000222:	60fb      	str	r3, [r7, #12]
			(GPIOx_MODE_REG_t*) GPIO_C;
	GPIOx_PUPDR_t volatile *const p_port_c_pull_reg = (GPIOx_PUPDR_t*) (GPIO_C
 8000224:	4b94      	ldr	r3, [pc, #592]	; (8000478 <main+0x2a0>)
 8000226:	60bb      	str	r3, [r7, #8]
			+ 0x0C);
	GPIOx_IDR_t volatile const *const p_port_c_input_reg =
 8000228:	4b94      	ldr	r3, [pc, #592]	; (800047c <main+0x2a4>)
 800022a:	607b      	str	r3, [r7, #4]
			(GPIOx_IDR_t*) (GPIO_C + 0x10);
	GPIOx_ODR_t volatile *const p_port_c_output_reg = (GPIOx_ODR_t*) (GPIO_C
 800022c:	4b94      	ldr	r3, [pc, #592]	; (8000480 <main+0x2a8>)
 800022e:	603b      	str	r3, [r7, #0]
			+ 0x14);

	/* Input pins */
	/* PC1 - C4 (input) */
	p_port_c_mode_reg->pin_1 = INPUT_MODE;
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	6813      	ldr	r3, [r2, #0]
 8000234:	f36f 0383 	bfc	r3, #2, #2
 8000238:	6013      	str	r3, [r2, #0]
	p_port_c_pull_reg->pin_1 = PULL_UP;
 800023a:	68ba      	ldr	r2, [r7, #8]
 800023c:	6813      	ldr	r3, [r2, #0]
 800023e:	2101      	movs	r1, #1
 8000240:	f361 0383 	bfi	r3, r1, #2, #2
 8000244:	6013      	str	r3, [r2, #0]

	/* PC3 - C3 (input) */
	p_port_c_mode_reg->pin_3 = INPUT_MODE;
 8000246:	68fa      	ldr	r2, [r7, #12]
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	f36f 1387 	bfc	r3, #6, #2
 800024e:	6013      	str	r3, [r2, #0]
	p_port_c_pull_reg->pin_3 = PULL_UP;
 8000250:	68ba      	ldr	r2, [r7, #8]
 8000252:	6813      	ldr	r3, [r2, #0]
 8000254:	2101      	movs	r1, #1
 8000256:	f361 1387 	bfi	r3, r1, #6, #2
 800025a:	6013      	str	r3, [r2, #0]

	/* PA1 - C2 (input) */
	p_port_a_mode_reg->pin_1 = INPUT_MODE;
 800025c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800025e:	6813      	ldr	r3, [r2, #0]
 8000260:	f36f 0383 	bfc	r3, #2, #2
 8000264:	6013      	str	r3, [r2, #0]
	p_port_a_pull_reg->pin_1 = PULL_UP;
 8000266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000268:	6813      	ldr	r3, [r2, #0]
 800026a:	2101      	movs	r1, #1
 800026c:	f361 0383 	bfi	r3, r1, #2, #2
 8000270:	6013      	str	r3, [r2, #0]

	/* PA3 - C1 (input) */
	p_port_a_mode_reg->pin_3 = INPUT_MODE;
 8000272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000274:	6813      	ldr	r3, [r2, #0]
 8000276:	f36f 1387 	bfc	r3, #6, #2
 800027a:	6013      	str	r3, [r2, #0]
	p_port_a_pull_reg->pin_3 = PULL_UP;
 800027c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800027e:	6813      	ldr	r3, [r2, #0]
 8000280:	2101      	movs	r1, #1
 8000282:	f361 1387 	bfi	r3, r1, #6, #2
 8000286:	6013      	str	r3, [r2, #0]

	/* Output pins */
	/* PA5 - R4 (output) */
	p_port_a_mode_reg->pin_5 = OUTPUT_MODE;
 8000288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	2101      	movs	r1, #1
 800028e:	f361 238b 	bfi	r3, r1, #10, #2
 8000292:	6013      	str	r3, [r2, #0]

	/* PA7 - R3 (output) */
	p_port_a_mode_reg->pin_7 = OUTPUT_MODE;
 8000294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000296:	6813      	ldr	r3, [r2, #0]
 8000298:	2101      	movs	r1, #1
 800029a:	f361 338f 	bfi	r3, r1, #14, #2
 800029e:	6013      	str	r3, [r2, #0]

	/* PC5 - R2 (output) */
	p_port_c_mode_reg->pin_5 = OUTPUT_MODE;
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	6813      	ldr	r3, [r2, #0]
 80002a4:	2101      	movs	r1, #1
 80002a6:	f361 238b 	bfi	r3, r1, #10, #2
 80002aa:	6013      	str	r3, [r2, #0]

	/* PB1 - R1 (output) */
	p_port_b_mode_reg->pin_1 = OUTPUT_MODE;
 80002ac:	69fa      	ldr	r2, [r7, #28]
 80002ae:	6813      	ldr	r3, [r2, #0]
 80002b0:	2101      	movs	r1, #1
 80002b2:	f361 0383 	bfi	r3, r1, #2, #2
 80002b6:	6013      	str	r3, [r2, #0]

	printf("Hello world!\n");
 80002b8:	4872      	ldr	r0, [pc, #456]	; (8000484 <main+0x2ac>)
 80002ba:	f000 fbff 	bl	8000abc <puts>

	/* Set output high */
	p_port_b_output_reg->pin_1 = 1;
 80002be:	693a      	ldr	r2, [r7, #16]
 80002c0:	6813      	ldr	r3, [r2, #0]
 80002c2:	f043 0302 	orr.w	r3, r3, #2
 80002c6:	6013      	str	r3, [r2, #0]
	p_port_c_output_reg->pin_5 = 1;
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	6813      	ldr	r3, [r2, #0]
 80002cc:	f043 0320 	orr.w	r3, r3, #32
 80002d0:	6013      	str	r3, [r2, #0]
	p_port_a_output_reg->pin_7 = 1;
 80002d2:	6a3a      	ldr	r2, [r7, #32]
 80002d4:	6813      	ldr	r3, [r2, #0]
 80002d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002da:	6013      	str	r3, [r2, #0]
	p_port_a_output_reg->pin_5 = 1;
 80002dc:	6a3a      	ldr	r2, [r7, #32]
 80002de:	6813      	ldr	r3, [r2, #0]
 80002e0:	f043 0320 	orr.w	r3, r3, #32
 80002e4:	6013      	str	r3, [r2, #0]

	/* Loop forever */
	while (1)
	{
		for (int i = 0; i < 4; i++)
 80002e6:	2300      	movs	r3, #0
 80002e8:	647b      	str	r3, [r7, #68]	; 0x44
 80002ea:	e1c5      	b.n	8000678 <main+0x4a0>
		{
			switch (i)
 80002ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	f200 81bf 	bhi.w	8000672 <main+0x49a>
 80002f4:	a201      	add	r2, pc, #4	; (adr r2, 80002fc <main+0x124>)
 80002f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fa:	bf00      	nop
 80002fc:	0800030d 	.word	0x0800030d
 8000300:	080003cf 	.word	0x080003cf
 8000304:	080004ed 	.word	0x080004ed
 8000308:	080005af 	.word	0x080005af
			{
			case 0:
				p_port_b_output_reg->pin_1 = 0;
 800030c:	693a      	ldr	r2, [r7, #16]
 800030e:	6813      	ldr	r3, [r2, #0]
 8000310:	f36f 0341 	bfc	r3, #1, #1
 8000314:	6013      	str	r3, [r2, #0]

				for (int j = 0; j < 4; j++)
 8000316:	2300      	movs	r3, #0
 8000318:	643b      	str	r3, [r7, #64]	; 0x40
 800031a:	e04f      	b.n	80003bc <main+0x1e4>
 800031c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800031e:	2b03      	cmp	r3, #3
 8000320:	d849      	bhi.n	80003b6 <main+0x1de>
 8000322:	a201      	add	r2, pc, #4	; (adr r2, 8000328 <main+0x150>)
 8000324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000328:	08000339 	.word	0x08000339
 800032c:	08000355 	.word	0x08000355
 8000330:	08000371 	.word	0x08000371
 8000334:	0800038d 	.word	0x0800038d
				{
					switch (j)
					{
					case 0:
						if (!(p_port_a_input_reg->pin_3))
 8000338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d130      	bne.n	80003a8 <main+0x1d0>
						{
							delayms(DELAY_AMOUNT);
 8000346:	4850      	ldr	r0, [pc, #320]	; (8000488 <main+0x2b0>)
 8000348:	f000 f9b0 	bl	80006ac <delayms>
							printf("1\n");
 800034c:	484f      	ldr	r0, [pc, #316]	; (800048c <main+0x2b4>)
 800034e:	f000 fbb5 	bl	8000abc <puts>
						}
						break;
 8000352:	e029      	b.n	80003a8 <main+0x1d0>

					case 1:
						if (!(p_port_a_input_reg->pin_1))
 8000354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800035c:	b2db      	uxtb	r3, r3
 800035e:	2b00      	cmp	r3, #0
 8000360:	d124      	bne.n	80003ac <main+0x1d4>
						{
							delayms(DELAY_AMOUNT);
 8000362:	4849      	ldr	r0, [pc, #292]	; (8000488 <main+0x2b0>)
 8000364:	f000 f9a2 	bl	80006ac <delayms>
							printf("2\n");
 8000368:	4849      	ldr	r0, [pc, #292]	; (8000490 <main+0x2b8>)
 800036a:	f000 fba7 	bl	8000abc <puts>
						}
						break;
 800036e:	e01d      	b.n	80003ac <main+0x1d4>

					case 2:
						if (!(p_port_c_input_reg->pin_3))
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d118      	bne.n	80003b0 <main+0x1d8>
						{
							delayms(DELAY_AMOUNT);
 800037e:	4842      	ldr	r0, [pc, #264]	; (8000488 <main+0x2b0>)
 8000380:	f000 f994 	bl	80006ac <delayms>
							printf("3\n");
 8000384:	4843      	ldr	r0, [pc, #268]	; (8000494 <main+0x2bc>)
 8000386:	f000 fb99 	bl	8000abc <puts>
						}
						break;
 800038a:	e011      	b.n	80003b0 <main+0x1d8>

					case 3:
						if (!(p_port_c_input_reg->pin_1))
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2b00      	cmp	r3, #0
 8000398:	d10c      	bne.n	80003b4 <main+0x1dc>
						{
							delayms(DELAY_AMOUNT);
 800039a:	483b      	ldr	r0, [pc, #236]	; (8000488 <main+0x2b0>)
 800039c:	f000 f986 	bl	80006ac <delayms>
							printf("A\n");
 80003a0:	483d      	ldr	r0, [pc, #244]	; (8000498 <main+0x2c0>)
 80003a2:	f000 fb8b 	bl	8000abc <puts>
						}
						break;
 80003a6:	e005      	b.n	80003b4 <main+0x1dc>
						break;
 80003a8:	bf00      	nop
 80003aa:	e004      	b.n	80003b6 <main+0x1de>
						break;
 80003ac:	bf00      	nop
 80003ae:	e002      	b.n	80003b6 <main+0x1de>
						break;
 80003b0:	bf00      	nop
 80003b2:	e000      	b.n	80003b6 <main+0x1de>
						break;
 80003b4:	bf00      	nop
				for (int j = 0; j < 4; j++)
 80003b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003b8:	3301      	adds	r3, #1
 80003ba:	643b      	str	r3, [r7, #64]	; 0x40
 80003bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003be:	2b03      	cmp	r3, #3
 80003c0:	ddac      	ble.n	800031c <main+0x144>
					}
				}

				p_port_b_output_reg->pin_1 = 1;
 80003c2:	693a      	ldr	r2, [r7, #16]
 80003c4:	6813      	ldr	r3, [r2, #0]
 80003c6:	f043 0302 	orr.w	r3, r3, #2
 80003ca:	6013      	str	r3, [r2, #0]
				break;
 80003cc:	e151      	b.n	8000672 <main+0x49a>

			case 1:
				p_port_c_output_reg->pin_5 = 0;
 80003ce:	683a      	ldr	r2, [r7, #0]
 80003d0:	6813      	ldr	r3, [r2, #0]
 80003d2:	f36f 1345 	bfc	r3, #5, #1
 80003d6:	6013      	str	r3, [r2, #0]

				for (int j = 0; j < 4; j++)
 80003d8:	2300      	movs	r3, #0
 80003da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80003dc:	e07c      	b.n	80004d8 <main+0x300>
 80003de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d876      	bhi.n	80004d2 <main+0x2fa>
 80003e4:	a201      	add	r2, pc, #4	; (adr r2, 80003ec <main+0x214>)
 80003e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ea:	bf00      	nop
 80003ec:	080003fd 	.word	0x080003fd
 80003f0:	08000419 	.word	0x08000419
 80003f4:	08000435 	.word	0x08000435
 80003f8:	080004a9 	.word	0x080004a9
				{
					switch (j)
					{
					case 0:
						if (!(p_port_a_input_reg->pin_3))
 80003fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000404:	b2db      	uxtb	r3, r3
 8000406:	2b00      	cmp	r3, #0
 8000408:	d15c      	bne.n	80004c4 <main+0x2ec>
						{
							delayms(DELAY_AMOUNT);
 800040a:	481f      	ldr	r0, [pc, #124]	; (8000488 <main+0x2b0>)
 800040c:	f000 f94e 	bl	80006ac <delayms>
							printf("4\n");
 8000410:	4822      	ldr	r0, [pc, #136]	; (800049c <main+0x2c4>)
 8000412:	f000 fb53 	bl	8000abc <puts>
						}
						break;
 8000416:	e055      	b.n	80004c4 <main+0x2ec>

					case 1:
						if (!(p_port_a_input_reg->pin_1))
 8000418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000420:	b2db      	uxtb	r3, r3
 8000422:	2b00      	cmp	r3, #0
 8000424:	d150      	bne.n	80004c8 <main+0x2f0>
						{
							delayms(DELAY_AMOUNT);
 8000426:	4818      	ldr	r0, [pc, #96]	; (8000488 <main+0x2b0>)
 8000428:	f000 f940 	bl	80006ac <delayms>
							printf("5\n");
 800042c:	481c      	ldr	r0, [pc, #112]	; (80004a0 <main+0x2c8>)
 800042e:	f000 fb45 	bl	8000abc <puts>
						}
						break;
 8000432:	e049      	b.n	80004c8 <main+0x2f0>

					case 2:
						if (!(p_port_c_input_reg->pin_3))
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800043c:	b2db      	uxtb	r3, r3
 800043e:	2b00      	cmp	r3, #0
 8000440:	d144      	bne.n	80004cc <main+0x2f4>
						{
							delayms(DELAY_AMOUNT);
 8000442:	4811      	ldr	r0, [pc, #68]	; (8000488 <main+0x2b0>)
 8000444:	f000 f932 	bl	80006ac <delayms>
							printf("6\n");
 8000448:	4816      	ldr	r0, [pc, #88]	; (80004a4 <main+0x2cc>)
 800044a:	f000 fb37 	bl	8000abc <puts>
						}
						break;
 800044e:	e03d      	b.n	80004cc <main+0x2f4>
 8000450:	40023830 	.word	0x40023830
 8000454:	40020000 	.word	0x40020000
 8000458:	4002000c 	.word	0x4002000c
 800045c:	40020010 	.word	0x40020010
 8000460:	40020014 	.word	0x40020014
 8000464:	40020400 	.word	0x40020400
 8000468:	4002040c 	.word	0x4002040c
 800046c:	40020410 	.word	0x40020410
 8000470:	40020414 	.word	0x40020414
 8000474:	40020800 	.word	0x40020800
 8000478:	4002080c 	.word	0x4002080c
 800047c:	40020810 	.word	0x40020810
 8000480:	40020814 	.word	0x40020814
 8000484:	080011f0 	.word	0x080011f0
 8000488:	00030d40 	.word	0x00030d40
 800048c:	08001200 	.word	0x08001200
 8000490:	08001204 	.word	0x08001204
 8000494:	08001208 	.word	0x08001208
 8000498:	0800120c 	.word	0x0800120c
 800049c:	08001210 	.word	0x08001210
 80004a0:	08001214 	.word	0x08001214
 80004a4:	08001218 	.word	0x08001218

					case 3:
						if (!(p_port_c_input_reg->pin_1))
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d10c      	bne.n	80004d0 <main+0x2f8>
						{
							delayms(DELAY_AMOUNT);
 80004b6:	4873      	ldr	r0, [pc, #460]	; (8000684 <main+0x4ac>)
 80004b8:	f000 f8f8 	bl	80006ac <delayms>
							printf("B\n");
 80004bc:	4872      	ldr	r0, [pc, #456]	; (8000688 <main+0x4b0>)
 80004be:	f000 fafd 	bl	8000abc <puts>
						}
						break;
 80004c2:	e005      	b.n	80004d0 <main+0x2f8>
						break;
 80004c4:	bf00      	nop
 80004c6:	e004      	b.n	80004d2 <main+0x2fa>
						break;
 80004c8:	bf00      	nop
 80004ca:	e002      	b.n	80004d2 <main+0x2fa>
						break;
 80004cc:	bf00      	nop
 80004ce:	e000      	b.n	80004d2 <main+0x2fa>
						break;
 80004d0:	bf00      	nop
				for (int j = 0; j < 4; j++)
 80004d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004d4:	3301      	adds	r3, #1
 80004d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80004d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004da:	2b03      	cmp	r3, #3
 80004dc:	f77f af7f 	ble.w	80003de <main+0x206>
					}
				}

				p_port_c_output_reg->pin_5 = 1;
 80004e0:	683a      	ldr	r2, [r7, #0]
 80004e2:	6813      	ldr	r3, [r2, #0]
 80004e4:	f043 0320 	orr.w	r3, r3, #32
 80004e8:	6013      	str	r3, [r2, #0]
				break;
 80004ea:	e0c2      	b.n	8000672 <main+0x49a>

			case 2:
				p_port_a_output_reg->pin_7 = 0;
 80004ec:	6a3a      	ldr	r2, [r7, #32]
 80004ee:	6813      	ldr	r3, [r2, #0]
 80004f0:	f36f 13c7 	bfc	r3, #7, #1
 80004f4:	6013      	str	r3, [r2, #0]

				for (int j = 0; j < 4; j++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80004fa:	e04f      	b.n	800059c <main+0x3c4>
 80004fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004fe:	2b03      	cmp	r3, #3
 8000500:	d849      	bhi.n	8000596 <main+0x3be>
 8000502:	a201      	add	r2, pc, #4	; (adr r2, 8000508 <main+0x330>)
 8000504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000508:	08000519 	.word	0x08000519
 800050c:	08000535 	.word	0x08000535
 8000510:	08000551 	.word	0x08000551
 8000514:	0800056d 	.word	0x0800056d
				{
					switch (j)
					{
					case 0:
						if (!(p_port_a_input_reg->pin_3))
 8000518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b00      	cmp	r3, #0
 8000524:	d130      	bne.n	8000588 <main+0x3b0>
						{
							delayms(DELAY_AMOUNT);
 8000526:	4857      	ldr	r0, [pc, #348]	; (8000684 <main+0x4ac>)
 8000528:	f000 f8c0 	bl	80006ac <delayms>
							printf("7\n");
 800052c:	4857      	ldr	r0, [pc, #348]	; (800068c <main+0x4b4>)
 800052e:	f000 fac5 	bl	8000abc <puts>
						}
						break;
 8000532:	e029      	b.n	8000588 <main+0x3b0>

					case 1:
						if (!(p_port_a_input_reg->pin_1))
 8000534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d124      	bne.n	800058c <main+0x3b4>
						{
							delayms(DELAY_AMOUNT);
 8000542:	4850      	ldr	r0, [pc, #320]	; (8000684 <main+0x4ac>)
 8000544:	f000 f8b2 	bl	80006ac <delayms>
							printf("8\n");
 8000548:	4851      	ldr	r0, [pc, #324]	; (8000690 <main+0x4b8>)
 800054a:	f000 fab7 	bl	8000abc <puts>
						}
						break;
 800054e:	e01d      	b.n	800058c <main+0x3b4>

					case 2:
						if (!(p_port_c_input_reg->pin_3))
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000558:	b2db      	uxtb	r3, r3
 800055a:	2b00      	cmp	r3, #0
 800055c:	d118      	bne.n	8000590 <main+0x3b8>
						{
							delayms(DELAY_AMOUNT);
 800055e:	4849      	ldr	r0, [pc, #292]	; (8000684 <main+0x4ac>)
 8000560:	f000 f8a4 	bl	80006ac <delayms>
							printf("9\n");
 8000564:	484b      	ldr	r0, [pc, #300]	; (8000694 <main+0x4bc>)
 8000566:	f000 faa9 	bl	8000abc <puts>
						}
						break;
 800056a:	e011      	b.n	8000590 <main+0x3b8>

					case 3:
						if (!(p_port_c_input_reg->pin_1))
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10c      	bne.n	8000594 <main+0x3bc>
						{
							delayms(DELAY_AMOUNT);
 800057a:	4842      	ldr	r0, [pc, #264]	; (8000684 <main+0x4ac>)
 800057c:	f000 f896 	bl	80006ac <delayms>
							printf("C\n");
 8000580:	4845      	ldr	r0, [pc, #276]	; (8000698 <main+0x4c0>)
 8000582:	f000 fa9b 	bl	8000abc <puts>
						}
						break;
 8000586:	e005      	b.n	8000594 <main+0x3bc>
						break;
 8000588:	bf00      	nop
 800058a:	e004      	b.n	8000596 <main+0x3be>
						break;
 800058c:	bf00      	nop
 800058e:	e002      	b.n	8000596 <main+0x3be>
						break;
 8000590:	bf00      	nop
 8000592:	e000      	b.n	8000596 <main+0x3be>
						break;
 8000594:	bf00      	nop
				for (int j = 0; j < 4; j++)
 8000596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000598:	3301      	adds	r3, #1
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
 800059c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800059e:	2b03      	cmp	r3, #3
 80005a0:	ddac      	ble.n	80004fc <main+0x324>
					}
				}

				p_port_a_output_reg->pin_7 = 1;
 80005a2:	6a3a      	ldr	r2, [r7, #32]
 80005a4:	6813      	ldr	r3, [r2, #0]
 80005a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005aa:	6013      	str	r3, [r2, #0]
				break;
 80005ac:	e061      	b.n	8000672 <main+0x49a>

			case 3:
				p_port_a_output_reg->pin_5 = 0;
 80005ae:	6a3a      	ldr	r2, [r7, #32]
 80005b0:	6813      	ldr	r3, [r2, #0]
 80005b2:	f36f 1345 	bfc	r3, #5, #1
 80005b6:	6013      	str	r3, [r2, #0]

				for (int j = 0; j < 4; j++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	637b      	str	r3, [r7, #52]	; 0x34
 80005bc:	e050      	b.n	8000660 <main+0x488>
 80005be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c0:	2b03      	cmp	r3, #3
 80005c2:	d84a      	bhi.n	800065a <main+0x482>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <main+0x3f4>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	080005dd 	.word	0x080005dd
 80005d0:	080005f9 	.word	0x080005f9
 80005d4:	08000615 	.word	0x08000615
 80005d8:	08000631 	.word	0x08000631
				{
					switch (j)
					{
					case 0:
						if (!(p_port_a_input_reg->pin_3))
 80005dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d130      	bne.n	800064c <main+0x474>
						{
							delayms(DELAY_AMOUNT);
 80005ea:	4826      	ldr	r0, [pc, #152]	; (8000684 <main+0x4ac>)
 80005ec:	f000 f85e 	bl	80006ac <delayms>
							printf("*\n");
 80005f0:	482a      	ldr	r0, [pc, #168]	; (800069c <main+0x4c4>)
 80005f2:	f000 fa63 	bl	8000abc <puts>
						}
						break;
 80005f6:	e029      	b.n	800064c <main+0x474>

					case 1:
						if (!(p_port_a_input_reg->pin_1))
 80005f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d124      	bne.n	8000650 <main+0x478>
						{
							delayms(DELAY_AMOUNT);
 8000606:	481f      	ldr	r0, [pc, #124]	; (8000684 <main+0x4ac>)
 8000608:	f000 f850 	bl	80006ac <delayms>
							printf("0\n");
 800060c:	4824      	ldr	r0, [pc, #144]	; (80006a0 <main+0x4c8>)
 800060e:	f000 fa55 	bl	8000abc <puts>
						}
						break;
 8000612:	e01d      	b.n	8000650 <main+0x478>

					case 2:
						if (!(p_port_c_input_reg->pin_3))
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d118      	bne.n	8000654 <main+0x47c>
						{
							delayms(DELAY_AMOUNT);
 8000622:	4818      	ldr	r0, [pc, #96]	; (8000684 <main+0x4ac>)
 8000624:	f000 f842 	bl	80006ac <delayms>
							printf("#\n");
 8000628:	481e      	ldr	r0, [pc, #120]	; (80006a4 <main+0x4cc>)
 800062a:	f000 fa47 	bl	8000abc <puts>
						}
						break;
 800062e:	e011      	b.n	8000654 <main+0x47c>

					case 3:
						if (!(p_port_c_input_reg->pin_1))
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d10c      	bne.n	8000658 <main+0x480>
						{
							delayms(DELAY_AMOUNT);
 800063e:	4811      	ldr	r0, [pc, #68]	; (8000684 <main+0x4ac>)
 8000640:	f000 f834 	bl	80006ac <delayms>
							printf("D\n");
 8000644:	4818      	ldr	r0, [pc, #96]	; (80006a8 <main+0x4d0>)
 8000646:	f000 fa39 	bl	8000abc <puts>
						}
						break;
 800064a:	e005      	b.n	8000658 <main+0x480>
						break;
 800064c:	bf00      	nop
 800064e:	e004      	b.n	800065a <main+0x482>
						break;
 8000650:	bf00      	nop
 8000652:	e002      	b.n	800065a <main+0x482>
						break;
 8000654:	bf00      	nop
 8000656:	e000      	b.n	800065a <main+0x482>
						break;
 8000658:	bf00      	nop
				for (int j = 0; j < 4; j++)
 800065a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800065c:	3301      	adds	r3, #1
 800065e:	637b      	str	r3, [r7, #52]	; 0x34
 8000660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000662:	2b03      	cmp	r3, #3
 8000664:	ddab      	ble.n	80005be <main+0x3e6>
					}
				}

				p_port_a_output_reg->pin_5 = 1;
 8000666:	6a3a      	ldr	r2, [r7, #32]
 8000668:	6813      	ldr	r3, [r2, #0]
 800066a:	f043 0320 	orr.w	r3, r3, #32
 800066e:	6013      	str	r3, [r2, #0]
				break;
 8000670:	bf00      	nop
		for (int i = 0; i < 4; i++)
 8000672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000674:	3301      	adds	r3, #1
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
 8000678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800067a:	2b03      	cmp	r3, #3
 800067c:	f77f ae36 	ble.w	80002ec <main+0x114>
 8000680:	e631      	b.n	80002e6 <main+0x10e>
 8000682:	bf00      	nop
 8000684:	00030d40 	.word	0x00030d40
 8000688:	0800121c 	.word	0x0800121c
 800068c:	08001220 	.word	0x08001220
 8000690:	08001224 	.word	0x08001224
 8000694:	08001228 	.word	0x08001228
 8000698:	0800122c 	.word	0x0800122c
 800069c:	08001230 	.word	0x08001230
 80006a0:	08001234 	.word	0x08001234
 80006a4:	08001238 	.word	0x08001238
 80006a8:	0800123c 	.word	0x0800123c

080006ac <delayms>:

	}
}

void delayms(uint32_t const time_value)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	for (int i = time_value; i > 0; i--)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	e002      	b.n	80006c0 <delayms+0x14>
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	3b01      	subs	r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dcf9      	bgt.n	80006ba <delayms+0xe>
	{
		// NOP
	}
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bc80      	pop	{r7}
 80006d0:	4770      	bx	lr
	...

080006d4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80006de:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <ITM_SendChar+0x44>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a0d      	ldr	r2, [pc, #52]	; (8000718 <ITM_SendChar+0x44>)
 80006e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006e8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <ITM_SendChar+0x48>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <ITM_SendChar+0x48>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80006f6:	bf00      	nop
 80006f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d0f8      	beq.n	80006f8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000706:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	6013      	str	r3, [r2, #0]
}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	e000edfc 	.word	0xe000edfc
 800071c:	e0000e00 	.word	0xe0000e00

08000720 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b086      	sub	sp, #24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	e00a      	b.n	8000748 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000732:	f3af 8000 	nop.w
 8000736:	4601      	mov	r1, r0
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	1c5a      	adds	r2, r3, #1
 800073c:	60ba      	str	r2, [r7, #8]
 800073e:	b2ca      	uxtb	r2, r1
 8000740:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	3301      	adds	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	dbf0      	blt.n	8000732 <_read+0x12>
  }

  return len;
 8000750:	687b      	ldr	r3, [r7, #4]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e009      	b.n	8000780 <_write+0x26>
  {
	  ITM_SendChar(*ptr++);
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	1c5a      	adds	r2, r3, #1
 8000770:	60ba      	str	r2, [r7, #8]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ffad 	bl	80006d4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	3301      	adds	r3, #1
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697a      	ldr	r2, [r7, #20]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	429a      	cmp	r2, r3
 8000786:	dbf1      	blt.n	800076c <_write+0x12>
//    __io_putchar(*ptr++);
  }
  return len;
 8000788:	687b      	ldr	r3, [r7, #4]
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}

08000792 <_close>:

int _close(int file)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b8:	605a      	str	r2, [r3, #4]
  return 0;
 80007ba:	2300      	movs	r3, #0
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr

080007c6 <_isatty>:

int _isatty(int file)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007da:	b480      	push	{r7}
 80007dc:	b085      	sub	sp, #20
 80007de:	af00      	add	r7, sp, #0
 80007e0:	60f8      	str	r0, [r7, #12]
 80007e2:	60b9      	str	r1, [r7, #8]
 80007e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007e6:	2300      	movs	r3, #0
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
	...

080007f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007fc:	4a14      	ldr	r2, [pc, #80]	; (8000850 <_sbrk+0x5c>)
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <_sbrk+0x60>)
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <_sbrk+0x64>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d102      	bne.n	8000816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <_sbrk+0x64>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <_sbrk+0x68>)
 8000814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <_sbrk+0x64>)
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4413      	add	r3, r2
 800081e:	693a      	ldr	r2, [r7, #16]
 8000820:	429a      	cmp	r2, r3
 8000822:	d207      	bcs.n	8000834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000824:	f000 fa78 	bl	8000d18 <__errno>
 8000828:	4603      	mov	r3, r0
 800082a:	220c      	movs	r2, #12
 800082c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800082e:	f04f 33ff 	mov.w	r3, #4294967295
 8000832:	e009      	b.n	8000848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083a:	4b07      	ldr	r3, [pc, #28]	; (8000858 <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	4a05      	ldr	r2, [pc, #20]	; (8000858 <_sbrk+0x64>)
 8000844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000846:	68fb      	ldr	r3, [r7, #12]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20020000 	.word	0x20020000
 8000854:	00000400 	.word	0x00000400
 8000858:	20000078 	.word	0x20000078
 800085c:	200001c8 	.word	0x200001c8

08000860 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000862:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000864:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <LoopForever+0x6>)
  ldr r1, =_edata
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <LoopForever+0xe>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000880:	4c0a      	ldr	r4, [pc, #40]	; (80008ac <LoopForever+0x16>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800088e:	f000 fa49 	bl	8000d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000892:	f7ff fca1 	bl	80001d8 <main>

08000896 <LoopForever>:

LoopForever:
  b LoopForever
 8000896:	e7fe      	b.n	8000896 <LoopForever>
  ldr   r0, =_estack
 8000898:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008a4:	08001248 	.word	0x08001248
  ldr r2, =_sbss
 80008a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008ac:	200001c8 	.word	0x200001c8

080008b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC_IRQHandler>
	...

080008b4 <std>:
 80008b4:	2300      	movs	r3, #0
 80008b6:	b510      	push	{r4, lr}
 80008b8:	4604      	mov	r4, r0
 80008ba:	e9c0 3300 	strd	r3, r3, [r0]
 80008be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008c2:	6083      	str	r3, [r0, #8]
 80008c4:	8181      	strh	r1, [r0, #12]
 80008c6:	6643      	str	r3, [r0, #100]	; 0x64
 80008c8:	81c2      	strh	r2, [r0, #14]
 80008ca:	6183      	str	r3, [r0, #24]
 80008cc:	4619      	mov	r1, r3
 80008ce:	2208      	movs	r2, #8
 80008d0:	305c      	adds	r0, #92	; 0x5c
 80008d2:	f000 f9d3 	bl	8000c7c <memset>
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <std+0x38>)
 80008d8:	6263      	str	r3, [r4, #36]	; 0x24
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <std+0x3c>)
 80008dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <std+0x40>)
 80008e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008e2:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <std+0x44>)
 80008e4:	6224      	str	r4, [r4, #32]
 80008e6:	6323      	str	r3, [r4, #48]	; 0x30
 80008e8:	bd10      	pop	{r4, pc}
 80008ea:	bf00      	nop
 80008ec:	08000acd 	.word	0x08000acd
 80008f0:	08000aef 	.word	0x08000aef
 80008f4:	08000b27 	.word	0x08000b27
 80008f8:	08000b4b 	.word	0x08000b4b

080008fc <stdio_exit_handler>:
 80008fc:	4a02      	ldr	r2, [pc, #8]	; (8000908 <stdio_exit_handler+0xc>)
 80008fe:	4903      	ldr	r1, [pc, #12]	; (800090c <stdio_exit_handler+0x10>)
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <stdio_exit_handler+0x14>)
 8000902:	f000 b869 	b.w	80009d8 <_fwalk_sglue>
 8000906:	bf00      	nop
 8000908:	20000000 	.word	0x20000000
 800090c:	08001061 	.word	0x08001061
 8000910:	2000000c 	.word	0x2000000c

08000914 <cleanup_stdio>:
 8000914:	6841      	ldr	r1, [r0, #4]
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <cleanup_stdio+0x34>)
 8000918:	4299      	cmp	r1, r3
 800091a:	b510      	push	{r4, lr}
 800091c:	4604      	mov	r4, r0
 800091e:	d001      	beq.n	8000924 <cleanup_stdio+0x10>
 8000920:	f000 fb9e 	bl	8001060 <_fflush_r>
 8000924:	68a1      	ldr	r1, [r4, #8]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <cleanup_stdio+0x38>)
 8000928:	4299      	cmp	r1, r3
 800092a:	d002      	beq.n	8000932 <cleanup_stdio+0x1e>
 800092c:	4620      	mov	r0, r4
 800092e:	f000 fb97 	bl	8001060 <_fflush_r>
 8000932:	68e1      	ldr	r1, [r4, #12]
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <cleanup_stdio+0x3c>)
 8000936:	4299      	cmp	r1, r3
 8000938:	d004      	beq.n	8000944 <cleanup_stdio+0x30>
 800093a:	4620      	mov	r0, r4
 800093c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000940:	f000 bb8e 	b.w	8001060 <_fflush_r>
 8000944:	bd10      	pop	{r4, pc}
 8000946:	bf00      	nop
 8000948:	2000007c 	.word	0x2000007c
 800094c:	200000e4 	.word	0x200000e4
 8000950:	2000014c 	.word	0x2000014c

08000954 <global_stdio_init.part.0>:
 8000954:	b510      	push	{r4, lr}
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <global_stdio_init.part.0+0x30>)
 8000958:	4c0b      	ldr	r4, [pc, #44]	; (8000988 <global_stdio_init.part.0+0x34>)
 800095a:	4a0c      	ldr	r2, [pc, #48]	; (800098c <global_stdio_init.part.0+0x38>)
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	4620      	mov	r0, r4
 8000960:	2200      	movs	r2, #0
 8000962:	2104      	movs	r1, #4
 8000964:	f7ff ffa6 	bl	80008b4 <std>
 8000968:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800096c:	2201      	movs	r2, #1
 800096e:	2109      	movs	r1, #9
 8000970:	f7ff ffa0 	bl	80008b4 <std>
 8000974:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000978:	2202      	movs	r2, #2
 800097a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800097e:	2112      	movs	r1, #18
 8000980:	f7ff bf98 	b.w	80008b4 <std>
 8000984:	200001b4 	.word	0x200001b4
 8000988:	2000007c 	.word	0x2000007c
 800098c:	080008fd 	.word	0x080008fd

08000990 <__sfp_lock_acquire>:
 8000990:	4801      	ldr	r0, [pc, #4]	; (8000998 <__sfp_lock_acquire+0x8>)
 8000992:	f000 b9eb 	b.w	8000d6c <__retarget_lock_acquire_recursive>
 8000996:	bf00      	nop
 8000998:	200001bd 	.word	0x200001bd

0800099c <__sfp_lock_release>:
 800099c:	4801      	ldr	r0, [pc, #4]	; (80009a4 <__sfp_lock_release+0x8>)
 800099e:	f000 b9e6 	b.w	8000d6e <__retarget_lock_release_recursive>
 80009a2:	bf00      	nop
 80009a4:	200001bd 	.word	0x200001bd

080009a8 <__sinit>:
 80009a8:	b510      	push	{r4, lr}
 80009aa:	4604      	mov	r4, r0
 80009ac:	f7ff fff0 	bl	8000990 <__sfp_lock_acquire>
 80009b0:	6a23      	ldr	r3, [r4, #32]
 80009b2:	b11b      	cbz	r3, 80009bc <__sinit+0x14>
 80009b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009b8:	f7ff bff0 	b.w	800099c <__sfp_lock_release>
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <__sinit+0x28>)
 80009be:	6223      	str	r3, [r4, #32]
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <__sinit+0x2c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f5      	bne.n	80009b4 <__sinit+0xc>
 80009c8:	f7ff ffc4 	bl	8000954 <global_stdio_init.part.0>
 80009cc:	e7f2      	b.n	80009b4 <__sinit+0xc>
 80009ce:	bf00      	nop
 80009d0:	08000915 	.word	0x08000915
 80009d4:	200001b4 	.word	0x200001b4

080009d8 <_fwalk_sglue>:
 80009d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009dc:	4607      	mov	r7, r0
 80009de:	4688      	mov	r8, r1
 80009e0:	4614      	mov	r4, r2
 80009e2:	2600      	movs	r6, #0
 80009e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009e8:	f1b9 0901 	subs.w	r9, r9, #1
 80009ec:	d505      	bpl.n	80009fa <_fwalk_sglue+0x22>
 80009ee:	6824      	ldr	r4, [r4, #0]
 80009f0:	2c00      	cmp	r4, #0
 80009f2:	d1f7      	bne.n	80009e4 <_fwalk_sglue+0xc>
 80009f4:	4630      	mov	r0, r6
 80009f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009fa:	89ab      	ldrh	r3, [r5, #12]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d907      	bls.n	8000a10 <_fwalk_sglue+0x38>
 8000a00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a04:	3301      	adds	r3, #1
 8000a06:	d003      	beq.n	8000a10 <_fwalk_sglue+0x38>
 8000a08:	4629      	mov	r1, r5
 8000a0a:	4638      	mov	r0, r7
 8000a0c:	47c0      	blx	r8
 8000a0e:	4306      	orrs	r6, r0
 8000a10:	3568      	adds	r5, #104	; 0x68
 8000a12:	e7e9      	b.n	80009e8 <_fwalk_sglue+0x10>

08000a14 <_puts_r>:
 8000a14:	6a03      	ldr	r3, [r0, #32]
 8000a16:	b570      	push	{r4, r5, r6, lr}
 8000a18:	6884      	ldr	r4, [r0, #8]
 8000a1a:	4605      	mov	r5, r0
 8000a1c:	460e      	mov	r6, r1
 8000a1e:	b90b      	cbnz	r3, 8000a24 <_puts_r+0x10>
 8000a20:	f7ff ffc2 	bl	80009a8 <__sinit>
 8000a24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a26:	07db      	lsls	r3, r3, #31
 8000a28:	d405      	bmi.n	8000a36 <_puts_r+0x22>
 8000a2a:	89a3      	ldrh	r3, [r4, #12]
 8000a2c:	0598      	lsls	r0, r3, #22
 8000a2e:	d402      	bmi.n	8000a36 <_puts_r+0x22>
 8000a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a32:	f000 f99b 	bl	8000d6c <__retarget_lock_acquire_recursive>
 8000a36:	89a3      	ldrh	r3, [r4, #12]
 8000a38:	0719      	lsls	r1, r3, #28
 8000a3a:	d513      	bpl.n	8000a64 <_puts_r+0x50>
 8000a3c:	6923      	ldr	r3, [r4, #16]
 8000a3e:	b18b      	cbz	r3, 8000a64 <_puts_r+0x50>
 8000a40:	3e01      	subs	r6, #1
 8000a42:	68a3      	ldr	r3, [r4, #8]
 8000a44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	60a3      	str	r3, [r4, #8]
 8000a4c:	b9e9      	cbnz	r1, 8000a8a <_puts_r+0x76>
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	da2e      	bge.n	8000ab0 <_puts_r+0x9c>
 8000a52:	4622      	mov	r2, r4
 8000a54:	210a      	movs	r1, #10
 8000a56:	4628      	mov	r0, r5
 8000a58:	f000 f87b 	bl	8000b52 <__swbuf_r>
 8000a5c:	3001      	adds	r0, #1
 8000a5e:	d007      	beq.n	8000a70 <_puts_r+0x5c>
 8000a60:	250a      	movs	r5, #10
 8000a62:	e007      	b.n	8000a74 <_puts_r+0x60>
 8000a64:	4621      	mov	r1, r4
 8000a66:	4628      	mov	r0, r5
 8000a68:	f000 f8b0 	bl	8000bcc <__swsetup_r>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d0e7      	beq.n	8000a40 <_puts_r+0x2c>
 8000a70:	f04f 35ff 	mov.w	r5, #4294967295
 8000a74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a76:	07da      	lsls	r2, r3, #31
 8000a78:	d405      	bmi.n	8000a86 <_puts_r+0x72>
 8000a7a:	89a3      	ldrh	r3, [r4, #12]
 8000a7c:	059b      	lsls	r3, r3, #22
 8000a7e:	d402      	bmi.n	8000a86 <_puts_r+0x72>
 8000a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a82:	f000 f974 	bl	8000d6e <__retarget_lock_release_recursive>
 8000a86:	4628      	mov	r0, r5
 8000a88:	bd70      	pop	{r4, r5, r6, pc}
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	da04      	bge.n	8000a98 <_puts_r+0x84>
 8000a8e:	69a2      	ldr	r2, [r4, #24]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dc06      	bgt.n	8000aa2 <_puts_r+0x8e>
 8000a94:	290a      	cmp	r1, #10
 8000a96:	d004      	beq.n	8000aa2 <_puts_r+0x8e>
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	1c5a      	adds	r2, r3, #1
 8000a9c:	6022      	str	r2, [r4, #0]
 8000a9e:	7019      	strb	r1, [r3, #0]
 8000aa0:	e7cf      	b.n	8000a42 <_puts_r+0x2e>
 8000aa2:	4622      	mov	r2, r4
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f000 f854 	bl	8000b52 <__swbuf_r>
 8000aaa:	3001      	adds	r0, #1
 8000aac:	d1c9      	bne.n	8000a42 <_puts_r+0x2e>
 8000aae:	e7df      	b.n	8000a70 <_puts_r+0x5c>
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	250a      	movs	r5, #10
 8000ab4:	1c5a      	adds	r2, r3, #1
 8000ab6:	6022      	str	r2, [r4, #0]
 8000ab8:	701d      	strb	r5, [r3, #0]
 8000aba:	e7db      	b.n	8000a74 <_puts_r+0x60>

08000abc <puts>:
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <puts+0xc>)
 8000abe:	4601      	mov	r1, r0
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	f7ff bfa7 	b.w	8000a14 <_puts_r>
 8000ac6:	bf00      	nop
 8000ac8:	20000058 	.word	0x20000058

08000acc <__sread>:
 8000acc:	b510      	push	{r4, lr}
 8000ace:	460c      	mov	r4, r1
 8000ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ad4:	f000 f8fc 	bl	8000cd0 <_read_r>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	bfab      	itete	ge
 8000adc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ade:	89a3      	ldrhlt	r3, [r4, #12]
 8000ae0:	181b      	addge	r3, r3, r0
 8000ae2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000ae6:	bfac      	ite	ge
 8000ae8:	6563      	strge	r3, [r4, #84]	; 0x54
 8000aea:	81a3      	strhlt	r3, [r4, #12]
 8000aec:	bd10      	pop	{r4, pc}

08000aee <__swrite>:
 8000aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000af2:	461f      	mov	r7, r3
 8000af4:	898b      	ldrh	r3, [r1, #12]
 8000af6:	05db      	lsls	r3, r3, #23
 8000af8:	4605      	mov	r5, r0
 8000afa:	460c      	mov	r4, r1
 8000afc:	4616      	mov	r6, r2
 8000afe:	d505      	bpl.n	8000b0c <__swrite+0x1e>
 8000b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b04:	2302      	movs	r3, #2
 8000b06:	2200      	movs	r2, #0
 8000b08:	f000 f8d0 	bl	8000cac <_lseek_r>
 8000b0c:	89a3      	ldrh	r3, [r4, #12]
 8000b0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b16:	81a3      	strh	r3, [r4, #12]
 8000b18:	4632      	mov	r2, r6
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	4628      	mov	r0, r5
 8000b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000b22:	f000 b8e7 	b.w	8000cf4 <_write_r>

08000b26 <__sseek>:
 8000b26:	b510      	push	{r4, lr}
 8000b28:	460c      	mov	r4, r1
 8000b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b2e:	f000 f8bd 	bl	8000cac <_lseek_r>
 8000b32:	1c43      	adds	r3, r0, #1
 8000b34:	89a3      	ldrh	r3, [r4, #12]
 8000b36:	bf15      	itete	ne
 8000b38:	6560      	strne	r0, [r4, #84]	; 0x54
 8000b3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000b3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000b42:	81a3      	strheq	r3, [r4, #12]
 8000b44:	bf18      	it	ne
 8000b46:	81a3      	strhne	r3, [r4, #12]
 8000b48:	bd10      	pop	{r4, pc}

08000b4a <__sclose>:
 8000b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000b4e:	f000 b89d 	b.w	8000c8c <_close_r>

08000b52 <__swbuf_r>:
 8000b52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b54:	460e      	mov	r6, r1
 8000b56:	4614      	mov	r4, r2
 8000b58:	4605      	mov	r5, r0
 8000b5a:	b118      	cbz	r0, 8000b64 <__swbuf_r+0x12>
 8000b5c:	6a03      	ldr	r3, [r0, #32]
 8000b5e:	b90b      	cbnz	r3, 8000b64 <__swbuf_r+0x12>
 8000b60:	f7ff ff22 	bl	80009a8 <__sinit>
 8000b64:	69a3      	ldr	r3, [r4, #24]
 8000b66:	60a3      	str	r3, [r4, #8]
 8000b68:	89a3      	ldrh	r3, [r4, #12]
 8000b6a:	071a      	lsls	r2, r3, #28
 8000b6c:	d525      	bpl.n	8000bba <__swbuf_r+0x68>
 8000b6e:	6923      	ldr	r3, [r4, #16]
 8000b70:	b31b      	cbz	r3, 8000bba <__swbuf_r+0x68>
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	6922      	ldr	r2, [r4, #16]
 8000b76:	1a98      	subs	r0, r3, r2
 8000b78:	6963      	ldr	r3, [r4, #20]
 8000b7a:	b2f6      	uxtb	r6, r6
 8000b7c:	4283      	cmp	r3, r0
 8000b7e:	4637      	mov	r7, r6
 8000b80:	dc04      	bgt.n	8000b8c <__swbuf_r+0x3a>
 8000b82:	4621      	mov	r1, r4
 8000b84:	4628      	mov	r0, r5
 8000b86:	f000 fa6b 	bl	8001060 <_fflush_r>
 8000b8a:	b9e0      	cbnz	r0, 8000bc6 <__swbuf_r+0x74>
 8000b8c:	68a3      	ldr	r3, [r4, #8]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	60a3      	str	r3, [r4, #8]
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	6022      	str	r2, [r4, #0]
 8000b98:	701e      	strb	r6, [r3, #0]
 8000b9a:	6962      	ldr	r2, [r4, #20]
 8000b9c:	1c43      	adds	r3, r0, #1
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d004      	beq.n	8000bac <__swbuf_r+0x5a>
 8000ba2:	89a3      	ldrh	r3, [r4, #12]
 8000ba4:	07db      	lsls	r3, r3, #31
 8000ba6:	d506      	bpl.n	8000bb6 <__swbuf_r+0x64>
 8000ba8:	2e0a      	cmp	r6, #10
 8000baa:	d104      	bne.n	8000bb6 <__swbuf_r+0x64>
 8000bac:	4621      	mov	r1, r4
 8000bae:	4628      	mov	r0, r5
 8000bb0:	f000 fa56 	bl	8001060 <_fflush_r>
 8000bb4:	b938      	cbnz	r0, 8000bc6 <__swbuf_r+0x74>
 8000bb6:	4638      	mov	r0, r7
 8000bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bba:	4621      	mov	r1, r4
 8000bbc:	4628      	mov	r0, r5
 8000bbe:	f000 f805 	bl	8000bcc <__swsetup_r>
 8000bc2:	2800      	cmp	r0, #0
 8000bc4:	d0d5      	beq.n	8000b72 <__swbuf_r+0x20>
 8000bc6:	f04f 37ff 	mov.w	r7, #4294967295
 8000bca:	e7f4      	b.n	8000bb6 <__swbuf_r+0x64>

08000bcc <__swsetup_r>:
 8000bcc:	b538      	push	{r3, r4, r5, lr}
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <__swsetup_r+0xac>)
 8000bd0:	4605      	mov	r5, r0
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	460c      	mov	r4, r1
 8000bd6:	b118      	cbz	r0, 8000be0 <__swsetup_r+0x14>
 8000bd8:	6a03      	ldr	r3, [r0, #32]
 8000bda:	b90b      	cbnz	r3, 8000be0 <__swsetup_r+0x14>
 8000bdc:	f7ff fee4 	bl	80009a8 <__sinit>
 8000be0:	89a3      	ldrh	r3, [r4, #12]
 8000be2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000be6:	0718      	lsls	r0, r3, #28
 8000be8:	d422      	bmi.n	8000c30 <__swsetup_r+0x64>
 8000bea:	06d9      	lsls	r1, r3, #27
 8000bec:	d407      	bmi.n	8000bfe <__swsetup_r+0x32>
 8000bee:	2309      	movs	r3, #9
 8000bf0:	602b      	str	r3, [r5, #0]
 8000bf2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000bf6:	81a3      	strh	r3, [r4, #12]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	e034      	b.n	8000c68 <__swsetup_r+0x9c>
 8000bfe:	0758      	lsls	r0, r3, #29
 8000c00:	d512      	bpl.n	8000c28 <__swsetup_r+0x5c>
 8000c02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000c04:	b141      	cbz	r1, 8000c18 <__swsetup_r+0x4c>
 8000c06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d002      	beq.n	8000c14 <__swsetup_r+0x48>
 8000c0e:	4628      	mov	r0, r5
 8000c10:	f000 f8ae 	bl	8000d70 <_free_r>
 8000c14:	2300      	movs	r3, #0
 8000c16:	6363      	str	r3, [r4, #52]	; 0x34
 8000c18:	89a3      	ldrh	r3, [r4, #12]
 8000c1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000c1e:	81a3      	strh	r3, [r4, #12]
 8000c20:	2300      	movs	r3, #0
 8000c22:	6063      	str	r3, [r4, #4]
 8000c24:	6923      	ldr	r3, [r4, #16]
 8000c26:	6023      	str	r3, [r4, #0]
 8000c28:	89a3      	ldrh	r3, [r4, #12]
 8000c2a:	f043 0308 	orr.w	r3, r3, #8
 8000c2e:	81a3      	strh	r3, [r4, #12]
 8000c30:	6923      	ldr	r3, [r4, #16]
 8000c32:	b94b      	cbnz	r3, 8000c48 <__swsetup_r+0x7c>
 8000c34:	89a3      	ldrh	r3, [r4, #12]
 8000c36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c3e:	d003      	beq.n	8000c48 <__swsetup_r+0x7c>
 8000c40:	4621      	mov	r1, r4
 8000c42:	4628      	mov	r0, r5
 8000c44:	f000 fa5a 	bl	80010fc <__smakebuf_r>
 8000c48:	89a0      	ldrh	r0, [r4, #12]
 8000c4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c4e:	f010 0301 	ands.w	r3, r0, #1
 8000c52:	d00a      	beq.n	8000c6a <__swsetup_r+0x9e>
 8000c54:	2300      	movs	r3, #0
 8000c56:	60a3      	str	r3, [r4, #8]
 8000c58:	6963      	ldr	r3, [r4, #20]
 8000c5a:	425b      	negs	r3, r3
 8000c5c:	61a3      	str	r3, [r4, #24]
 8000c5e:	6923      	ldr	r3, [r4, #16]
 8000c60:	b943      	cbnz	r3, 8000c74 <__swsetup_r+0xa8>
 8000c62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c66:	d1c4      	bne.n	8000bf2 <__swsetup_r+0x26>
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	0781      	lsls	r1, r0, #30
 8000c6c:	bf58      	it	pl
 8000c6e:	6963      	ldrpl	r3, [r4, #20]
 8000c70:	60a3      	str	r3, [r4, #8]
 8000c72:	e7f4      	b.n	8000c5e <__swsetup_r+0x92>
 8000c74:	2000      	movs	r0, #0
 8000c76:	e7f7      	b.n	8000c68 <__swsetup_r+0x9c>
 8000c78:	20000058 	.word	0x20000058

08000c7c <memset>:
 8000c7c:	4402      	add	r2, r0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d100      	bne.n	8000c86 <memset+0xa>
 8000c84:	4770      	bx	lr
 8000c86:	f803 1b01 	strb.w	r1, [r3], #1
 8000c8a:	e7f9      	b.n	8000c80 <memset+0x4>

08000c8c <_close_r>:
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	4d06      	ldr	r5, [pc, #24]	; (8000ca8 <_close_r+0x1c>)
 8000c90:	2300      	movs	r3, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	602b      	str	r3, [r5, #0]
 8000c98:	f7ff fd7b 	bl	8000792 <_close>
 8000c9c:	1c43      	adds	r3, r0, #1
 8000c9e:	d102      	bne.n	8000ca6 <_close_r+0x1a>
 8000ca0:	682b      	ldr	r3, [r5, #0]
 8000ca2:	b103      	cbz	r3, 8000ca6 <_close_r+0x1a>
 8000ca4:	6023      	str	r3, [r4, #0]
 8000ca6:	bd38      	pop	{r3, r4, r5, pc}
 8000ca8:	200001b8 	.word	0x200001b8

08000cac <_lseek_r>:
 8000cac:	b538      	push	{r3, r4, r5, lr}
 8000cae:	4d07      	ldr	r5, [pc, #28]	; (8000ccc <_lseek_r+0x20>)
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	602a      	str	r2, [r5, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	f7ff fd8d 	bl	80007da <_lseek>
 8000cc0:	1c43      	adds	r3, r0, #1
 8000cc2:	d102      	bne.n	8000cca <_lseek_r+0x1e>
 8000cc4:	682b      	ldr	r3, [r5, #0]
 8000cc6:	b103      	cbz	r3, 8000cca <_lseek_r+0x1e>
 8000cc8:	6023      	str	r3, [r4, #0]
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
 8000ccc:	200001b8 	.word	0x200001b8

08000cd0 <_read_r>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4d07      	ldr	r5, [pc, #28]	; (8000cf0 <_read_r+0x20>)
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	4611      	mov	r1, r2
 8000cda:	2200      	movs	r2, #0
 8000cdc:	602a      	str	r2, [r5, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	f7ff fd1e 	bl	8000720 <_read>
 8000ce4:	1c43      	adds	r3, r0, #1
 8000ce6:	d102      	bne.n	8000cee <_read_r+0x1e>
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	b103      	cbz	r3, 8000cee <_read_r+0x1e>
 8000cec:	6023      	str	r3, [r4, #0]
 8000cee:	bd38      	pop	{r3, r4, r5, pc}
 8000cf0:	200001b8 	.word	0x200001b8

08000cf4 <_write_r>:
 8000cf4:	b538      	push	{r3, r4, r5, lr}
 8000cf6:	4d07      	ldr	r5, [pc, #28]	; (8000d14 <_write_r+0x20>)
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	2200      	movs	r2, #0
 8000d00:	602a      	str	r2, [r5, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	f7ff fd29 	bl	800075a <_write>
 8000d08:	1c43      	adds	r3, r0, #1
 8000d0a:	d102      	bne.n	8000d12 <_write_r+0x1e>
 8000d0c:	682b      	ldr	r3, [r5, #0]
 8000d0e:	b103      	cbz	r3, 8000d12 <_write_r+0x1e>
 8000d10:	6023      	str	r3, [r4, #0]
 8000d12:	bd38      	pop	{r3, r4, r5, pc}
 8000d14:	200001b8 	.word	0x200001b8

08000d18 <__errno>:
 8000d18:	4b01      	ldr	r3, [pc, #4]	; (8000d20 <__errno+0x8>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	20000058 	.word	0x20000058

08000d24 <__libc_init_array>:
 8000d24:	b570      	push	{r4, r5, r6, lr}
 8000d26:	4d0d      	ldr	r5, [pc, #52]	; (8000d5c <__libc_init_array+0x38>)
 8000d28:	4c0d      	ldr	r4, [pc, #52]	; (8000d60 <__libc_init_array+0x3c>)
 8000d2a:	1b64      	subs	r4, r4, r5
 8000d2c:	10a4      	asrs	r4, r4, #2
 8000d2e:	2600      	movs	r6, #0
 8000d30:	42a6      	cmp	r6, r4
 8000d32:	d109      	bne.n	8000d48 <__libc_init_array+0x24>
 8000d34:	4d0b      	ldr	r5, [pc, #44]	; (8000d64 <__libc_init_array+0x40>)
 8000d36:	4c0c      	ldr	r4, [pc, #48]	; (8000d68 <__libc_init_array+0x44>)
 8000d38:	f000 fa4e 	bl	80011d8 <_init>
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	10a4      	asrs	r4, r4, #2
 8000d40:	2600      	movs	r6, #0
 8000d42:	42a6      	cmp	r6, r4
 8000d44:	d105      	bne.n	8000d52 <__libc_init_array+0x2e>
 8000d46:	bd70      	pop	{r4, r5, r6, pc}
 8000d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d4c:	4798      	blx	r3
 8000d4e:	3601      	adds	r6, #1
 8000d50:	e7ee      	b.n	8000d30 <__libc_init_array+0xc>
 8000d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d56:	4798      	blx	r3
 8000d58:	3601      	adds	r6, #1
 8000d5a:	e7f2      	b.n	8000d42 <__libc_init_array+0x1e>
 8000d5c:	08001240 	.word	0x08001240
 8000d60:	08001240 	.word	0x08001240
 8000d64:	08001240 	.word	0x08001240
 8000d68:	08001244 	.word	0x08001244

08000d6c <__retarget_lock_acquire_recursive>:
 8000d6c:	4770      	bx	lr

08000d6e <__retarget_lock_release_recursive>:
 8000d6e:	4770      	bx	lr

08000d70 <_free_r>:
 8000d70:	b538      	push	{r3, r4, r5, lr}
 8000d72:	4605      	mov	r5, r0
 8000d74:	2900      	cmp	r1, #0
 8000d76:	d041      	beq.n	8000dfc <_free_r+0x8c>
 8000d78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d7c:	1f0c      	subs	r4, r1, #4
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	bfb8      	it	lt
 8000d82:	18e4      	addlt	r4, r4, r3
 8000d84:	f000 f8de 	bl	8000f44 <__malloc_lock>
 8000d88:	4a1d      	ldr	r2, [pc, #116]	; (8000e00 <_free_r+0x90>)
 8000d8a:	6813      	ldr	r3, [r2, #0]
 8000d8c:	b933      	cbnz	r3, 8000d9c <_free_r+0x2c>
 8000d8e:	6063      	str	r3, [r4, #4]
 8000d90:	6014      	str	r4, [r2, #0]
 8000d92:	4628      	mov	r0, r5
 8000d94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d98:	f000 b8da 	b.w	8000f50 <__malloc_unlock>
 8000d9c:	42a3      	cmp	r3, r4
 8000d9e:	d908      	bls.n	8000db2 <_free_r+0x42>
 8000da0:	6820      	ldr	r0, [r4, #0]
 8000da2:	1821      	adds	r1, r4, r0
 8000da4:	428b      	cmp	r3, r1
 8000da6:	bf01      	itttt	eq
 8000da8:	6819      	ldreq	r1, [r3, #0]
 8000daa:	685b      	ldreq	r3, [r3, #4]
 8000dac:	1809      	addeq	r1, r1, r0
 8000dae:	6021      	streq	r1, [r4, #0]
 8000db0:	e7ed      	b.n	8000d8e <_free_r+0x1e>
 8000db2:	461a      	mov	r2, r3
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	b10b      	cbz	r3, 8000dbc <_free_r+0x4c>
 8000db8:	42a3      	cmp	r3, r4
 8000dba:	d9fa      	bls.n	8000db2 <_free_r+0x42>
 8000dbc:	6811      	ldr	r1, [r2, #0]
 8000dbe:	1850      	adds	r0, r2, r1
 8000dc0:	42a0      	cmp	r0, r4
 8000dc2:	d10b      	bne.n	8000ddc <_free_r+0x6c>
 8000dc4:	6820      	ldr	r0, [r4, #0]
 8000dc6:	4401      	add	r1, r0
 8000dc8:	1850      	adds	r0, r2, r1
 8000dca:	4283      	cmp	r3, r0
 8000dcc:	6011      	str	r1, [r2, #0]
 8000dce:	d1e0      	bne.n	8000d92 <_free_r+0x22>
 8000dd0:	6818      	ldr	r0, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	6053      	str	r3, [r2, #4]
 8000dd6:	4408      	add	r0, r1
 8000dd8:	6010      	str	r0, [r2, #0]
 8000dda:	e7da      	b.n	8000d92 <_free_r+0x22>
 8000ddc:	d902      	bls.n	8000de4 <_free_r+0x74>
 8000dde:	230c      	movs	r3, #12
 8000de0:	602b      	str	r3, [r5, #0]
 8000de2:	e7d6      	b.n	8000d92 <_free_r+0x22>
 8000de4:	6820      	ldr	r0, [r4, #0]
 8000de6:	1821      	adds	r1, r4, r0
 8000de8:	428b      	cmp	r3, r1
 8000dea:	bf04      	itt	eq
 8000dec:	6819      	ldreq	r1, [r3, #0]
 8000dee:	685b      	ldreq	r3, [r3, #4]
 8000df0:	6063      	str	r3, [r4, #4]
 8000df2:	bf04      	itt	eq
 8000df4:	1809      	addeq	r1, r1, r0
 8000df6:	6021      	streq	r1, [r4, #0]
 8000df8:	6054      	str	r4, [r2, #4]
 8000dfa:	e7ca      	b.n	8000d92 <_free_r+0x22>
 8000dfc:	bd38      	pop	{r3, r4, r5, pc}
 8000dfe:	bf00      	nop
 8000e00:	200001c0 	.word	0x200001c0

08000e04 <sbrk_aligned>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	4e0e      	ldr	r6, [pc, #56]	; (8000e40 <sbrk_aligned+0x3c>)
 8000e08:	460c      	mov	r4, r1
 8000e0a:	6831      	ldr	r1, [r6, #0]
 8000e0c:	4605      	mov	r5, r0
 8000e0e:	b911      	cbnz	r1, 8000e16 <sbrk_aligned+0x12>
 8000e10:	f000 f9d2 	bl	80011b8 <_sbrk_r>
 8000e14:	6030      	str	r0, [r6, #0]
 8000e16:	4621      	mov	r1, r4
 8000e18:	4628      	mov	r0, r5
 8000e1a:	f000 f9cd 	bl	80011b8 <_sbrk_r>
 8000e1e:	1c43      	adds	r3, r0, #1
 8000e20:	d00a      	beq.n	8000e38 <sbrk_aligned+0x34>
 8000e22:	1cc4      	adds	r4, r0, #3
 8000e24:	f024 0403 	bic.w	r4, r4, #3
 8000e28:	42a0      	cmp	r0, r4
 8000e2a:	d007      	beq.n	8000e3c <sbrk_aligned+0x38>
 8000e2c:	1a21      	subs	r1, r4, r0
 8000e2e:	4628      	mov	r0, r5
 8000e30:	f000 f9c2 	bl	80011b8 <_sbrk_r>
 8000e34:	3001      	adds	r0, #1
 8000e36:	d101      	bne.n	8000e3c <sbrk_aligned+0x38>
 8000e38:	f04f 34ff 	mov.w	r4, #4294967295
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
 8000e40:	200001c4 	.word	0x200001c4

08000e44 <_malloc_r>:
 8000e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e48:	1ccd      	adds	r5, r1, #3
 8000e4a:	f025 0503 	bic.w	r5, r5, #3
 8000e4e:	3508      	adds	r5, #8
 8000e50:	2d0c      	cmp	r5, #12
 8000e52:	bf38      	it	cc
 8000e54:	250c      	movcc	r5, #12
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	4607      	mov	r7, r0
 8000e5a:	db01      	blt.n	8000e60 <_malloc_r+0x1c>
 8000e5c:	42a9      	cmp	r1, r5
 8000e5e:	d905      	bls.n	8000e6c <_malloc_r+0x28>
 8000e60:	230c      	movs	r3, #12
 8000e62:	603b      	str	r3, [r7, #0]
 8000e64:	2600      	movs	r6, #0
 8000e66:	4630      	mov	r0, r6
 8000e68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000f40 <_malloc_r+0xfc>
 8000e70:	f000 f868 	bl	8000f44 <__malloc_lock>
 8000e74:	f8d8 3000 	ldr.w	r3, [r8]
 8000e78:	461c      	mov	r4, r3
 8000e7a:	bb5c      	cbnz	r4, 8000ed4 <_malloc_r+0x90>
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	4638      	mov	r0, r7
 8000e80:	f7ff ffc0 	bl	8000e04 <sbrk_aligned>
 8000e84:	1c43      	adds	r3, r0, #1
 8000e86:	4604      	mov	r4, r0
 8000e88:	d155      	bne.n	8000f36 <_malloc_r+0xf2>
 8000e8a:	f8d8 4000 	ldr.w	r4, [r8]
 8000e8e:	4626      	mov	r6, r4
 8000e90:	2e00      	cmp	r6, #0
 8000e92:	d145      	bne.n	8000f20 <_malloc_r+0xdc>
 8000e94:	2c00      	cmp	r4, #0
 8000e96:	d048      	beq.n	8000f2a <_malloc_r+0xe6>
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	4631      	mov	r1, r6
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	eb04 0903 	add.w	r9, r4, r3
 8000ea2:	f000 f989 	bl	80011b8 <_sbrk_r>
 8000ea6:	4581      	cmp	r9, r0
 8000ea8:	d13f      	bne.n	8000f2a <_malloc_r+0xe6>
 8000eaa:	6821      	ldr	r1, [r4, #0]
 8000eac:	1a6d      	subs	r5, r5, r1
 8000eae:	4629      	mov	r1, r5
 8000eb0:	4638      	mov	r0, r7
 8000eb2:	f7ff ffa7 	bl	8000e04 <sbrk_aligned>
 8000eb6:	3001      	adds	r0, #1
 8000eb8:	d037      	beq.n	8000f2a <_malloc_r+0xe6>
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	442b      	add	r3, r5
 8000ebe:	6023      	str	r3, [r4, #0]
 8000ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d038      	beq.n	8000f3a <_malloc_r+0xf6>
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	42a2      	cmp	r2, r4
 8000ecc:	d12b      	bne.n	8000f26 <_malloc_r+0xe2>
 8000ece:	2200      	movs	r2, #0
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	e00f      	b.n	8000ef4 <_malloc_r+0xb0>
 8000ed4:	6822      	ldr	r2, [r4, #0]
 8000ed6:	1b52      	subs	r2, r2, r5
 8000ed8:	d41f      	bmi.n	8000f1a <_malloc_r+0xd6>
 8000eda:	2a0b      	cmp	r2, #11
 8000edc:	d917      	bls.n	8000f0e <_malloc_r+0xca>
 8000ede:	1961      	adds	r1, r4, r5
 8000ee0:	42a3      	cmp	r3, r4
 8000ee2:	6025      	str	r5, [r4, #0]
 8000ee4:	bf18      	it	ne
 8000ee6:	6059      	strne	r1, [r3, #4]
 8000ee8:	6863      	ldr	r3, [r4, #4]
 8000eea:	bf08      	it	eq
 8000eec:	f8c8 1000 	streq.w	r1, [r8]
 8000ef0:	5162      	str	r2, [r4, r5]
 8000ef2:	604b      	str	r3, [r1, #4]
 8000ef4:	4638      	mov	r0, r7
 8000ef6:	f104 060b 	add.w	r6, r4, #11
 8000efa:	f000 f829 	bl	8000f50 <__malloc_unlock>
 8000efe:	f026 0607 	bic.w	r6, r6, #7
 8000f02:	1d23      	adds	r3, r4, #4
 8000f04:	1af2      	subs	r2, r6, r3
 8000f06:	d0ae      	beq.n	8000e66 <_malloc_r+0x22>
 8000f08:	1b9b      	subs	r3, r3, r6
 8000f0a:	50a3      	str	r3, [r4, r2]
 8000f0c:	e7ab      	b.n	8000e66 <_malloc_r+0x22>
 8000f0e:	42a3      	cmp	r3, r4
 8000f10:	6862      	ldr	r2, [r4, #4]
 8000f12:	d1dd      	bne.n	8000ed0 <_malloc_r+0x8c>
 8000f14:	f8c8 2000 	str.w	r2, [r8]
 8000f18:	e7ec      	b.n	8000ef4 <_malloc_r+0xb0>
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	6864      	ldr	r4, [r4, #4]
 8000f1e:	e7ac      	b.n	8000e7a <_malloc_r+0x36>
 8000f20:	4634      	mov	r4, r6
 8000f22:	6876      	ldr	r6, [r6, #4]
 8000f24:	e7b4      	b.n	8000e90 <_malloc_r+0x4c>
 8000f26:	4613      	mov	r3, r2
 8000f28:	e7cc      	b.n	8000ec4 <_malloc_r+0x80>
 8000f2a:	230c      	movs	r3, #12
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4638      	mov	r0, r7
 8000f30:	f000 f80e 	bl	8000f50 <__malloc_unlock>
 8000f34:	e797      	b.n	8000e66 <_malloc_r+0x22>
 8000f36:	6025      	str	r5, [r4, #0]
 8000f38:	e7dc      	b.n	8000ef4 <_malloc_r+0xb0>
 8000f3a:	605b      	str	r3, [r3, #4]
 8000f3c:	deff      	udf	#255	; 0xff
 8000f3e:	bf00      	nop
 8000f40:	200001c0 	.word	0x200001c0

08000f44 <__malloc_lock>:
 8000f44:	4801      	ldr	r0, [pc, #4]	; (8000f4c <__malloc_lock+0x8>)
 8000f46:	f7ff bf11 	b.w	8000d6c <__retarget_lock_acquire_recursive>
 8000f4a:	bf00      	nop
 8000f4c:	200001bc 	.word	0x200001bc

08000f50 <__malloc_unlock>:
 8000f50:	4801      	ldr	r0, [pc, #4]	; (8000f58 <__malloc_unlock+0x8>)
 8000f52:	f7ff bf0c 	b.w	8000d6e <__retarget_lock_release_recursive>
 8000f56:	bf00      	nop
 8000f58:	200001bc 	.word	0x200001bc

08000f5c <__sflush_r>:
 8000f5c:	898a      	ldrh	r2, [r1, #12]
 8000f5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f60:	4605      	mov	r5, r0
 8000f62:	0710      	lsls	r0, r2, #28
 8000f64:	460c      	mov	r4, r1
 8000f66:	d457      	bmi.n	8001018 <__sflush_r+0xbc>
 8000f68:	684b      	ldr	r3, [r1, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	dc04      	bgt.n	8000f78 <__sflush_r+0x1c>
 8000f6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dc01      	bgt.n	8000f78 <__sflush_r+0x1c>
 8000f74:	2000      	movs	r0, #0
 8000f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000f7a:	2e00      	cmp	r6, #0
 8000f7c:	d0fa      	beq.n	8000f74 <__sflush_r+0x18>
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000f84:	682f      	ldr	r7, [r5, #0]
 8000f86:	6a21      	ldr	r1, [r4, #32]
 8000f88:	602b      	str	r3, [r5, #0]
 8000f8a:	d032      	beq.n	8000ff2 <__sflush_r+0x96>
 8000f8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000f8e:	89a3      	ldrh	r3, [r4, #12]
 8000f90:	075a      	lsls	r2, r3, #29
 8000f92:	d505      	bpl.n	8000fa0 <__sflush_r+0x44>
 8000f94:	6863      	ldr	r3, [r4, #4]
 8000f96:	1ac0      	subs	r0, r0, r3
 8000f98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f9a:	b10b      	cbz	r3, 8000fa0 <__sflush_r+0x44>
 8000f9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f9e:	1ac0      	subs	r0, r0, r3
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000fa6:	6a21      	ldr	r1, [r4, #32]
 8000fa8:	4628      	mov	r0, r5
 8000faa:	47b0      	blx	r6
 8000fac:	1c43      	adds	r3, r0, #1
 8000fae:	89a3      	ldrh	r3, [r4, #12]
 8000fb0:	d106      	bne.n	8000fc0 <__sflush_r+0x64>
 8000fb2:	6829      	ldr	r1, [r5, #0]
 8000fb4:	291d      	cmp	r1, #29
 8000fb6:	d82b      	bhi.n	8001010 <__sflush_r+0xb4>
 8000fb8:	4a28      	ldr	r2, [pc, #160]	; (800105c <__sflush_r+0x100>)
 8000fba:	410a      	asrs	r2, r1
 8000fbc:	07d6      	lsls	r6, r2, #31
 8000fbe:	d427      	bmi.n	8001010 <__sflush_r+0xb4>
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6062      	str	r2, [r4, #4]
 8000fc4:	04d9      	lsls	r1, r3, #19
 8000fc6:	6922      	ldr	r2, [r4, #16]
 8000fc8:	6022      	str	r2, [r4, #0]
 8000fca:	d504      	bpl.n	8000fd6 <__sflush_r+0x7a>
 8000fcc:	1c42      	adds	r2, r0, #1
 8000fce:	d101      	bne.n	8000fd4 <__sflush_r+0x78>
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	b903      	cbnz	r3, 8000fd6 <__sflush_r+0x7a>
 8000fd4:	6560      	str	r0, [r4, #84]	; 0x54
 8000fd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000fd8:	602f      	str	r7, [r5, #0]
 8000fda:	2900      	cmp	r1, #0
 8000fdc:	d0ca      	beq.n	8000f74 <__sflush_r+0x18>
 8000fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000fe2:	4299      	cmp	r1, r3
 8000fe4:	d002      	beq.n	8000fec <__sflush_r+0x90>
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	f7ff fec2 	bl	8000d70 <_free_r>
 8000fec:	2000      	movs	r0, #0
 8000fee:	6360      	str	r0, [r4, #52]	; 0x34
 8000ff0:	e7c1      	b.n	8000f76 <__sflush_r+0x1a>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	47b0      	blx	r6
 8000ff8:	1c41      	adds	r1, r0, #1
 8000ffa:	d1c8      	bne.n	8000f8e <__sflush_r+0x32>
 8000ffc:	682b      	ldr	r3, [r5, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0c5      	beq.n	8000f8e <__sflush_r+0x32>
 8001002:	2b1d      	cmp	r3, #29
 8001004:	d001      	beq.n	800100a <__sflush_r+0xae>
 8001006:	2b16      	cmp	r3, #22
 8001008:	d101      	bne.n	800100e <__sflush_r+0xb2>
 800100a:	602f      	str	r7, [r5, #0]
 800100c:	e7b2      	b.n	8000f74 <__sflush_r+0x18>
 800100e:	89a3      	ldrh	r3, [r4, #12]
 8001010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001014:	81a3      	strh	r3, [r4, #12]
 8001016:	e7ae      	b.n	8000f76 <__sflush_r+0x1a>
 8001018:	690f      	ldr	r7, [r1, #16]
 800101a:	2f00      	cmp	r7, #0
 800101c:	d0aa      	beq.n	8000f74 <__sflush_r+0x18>
 800101e:	0793      	lsls	r3, r2, #30
 8001020:	680e      	ldr	r6, [r1, #0]
 8001022:	bf08      	it	eq
 8001024:	694b      	ldreq	r3, [r1, #20]
 8001026:	600f      	str	r7, [r1, #0]
 8001028:	bf18      	it	ne
 800102a:	2300      	movne	r3, #0
 800102c:	1bf6      	subs	r6, r6, r7
 800102e:	608b      	str	r3, [r1, #8]
 8001030:	2e00      	cmp	r6, #0
 8001032:	dd9f      	ble.n	8000f74 <__sflush_r+0x18>
 8001034:	6a21      	ldr	r1, [r4, #32]
 8001036:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800103a:	4633      	mov	r3, r6
 800103c:	463a      	mov	r2, r7
 800103e:	4628      	mov	r0, r5
 8001040:	47e0      	blx	ip
 8001042:	2800      	cmp	r0, #0
 8001044:	dc06      	bgt.n	8001054 <__sflush_r+0xf8>
 8001046:	89a3      	ldrh	r3, [r4, #12]
 8001048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104c:	81a3      	strh	r3, [r4, #12]
 800104e:	f04f 30ff 	mov.w	r0, #4294967295
 8001052:	e790      	b.n	8000f76 <__sflush_r+0x1a>
 8001054:	4407      	add	r7, r0
 8001056:	1a36      	subs	r6, r6, r0
 8001058:	e7ea      	b.n	8001030 <__sflush_r+0xd4>
 800105a:	bf00      	nop
 800105c:	dfbffffe 	.word	0xdfbffffe

08001060 <_fflush_r>:
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	690b      	ldr	r3, [r1, #16]
 8001064:	4605      	mov	r5, r0
 8001066:	460c      	mov	r4, r1
 8001068:	b913      	cbnz	r3, 8001070 <_fflush_r+0x10>
 800106a:	2500      	movs	r5, #0
 800106c:	4628      	mov	r0, r5
 800106e:	bd38      	pop	{r3, r4, r5, pc}
 8001070:	b118      	cbz	r0, 800107a <_fflush_r+0x1a>
 8001072:	6a03      	ldr	r3, [r0, #32]
 8001074:	b90b      	cbnz	r3, 800107a <_fflush_r+0x1a>
 8001076:	f7ff fc97 	bl	80009a8 <__sinit>
 800107a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0f3      	beq.n	800106a <_fflush_r+0xa>
 8001082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001084:	07d0      	lsls	r0, r2, #31
 8001086:	d404      	bmi.n	8001092 <_fflush_r+0x32>
 8001088:	0599      	lsls	r1, r3, #22
 800108a:	d402      	bmi.n	8001092 <_fflush_r+0x32>
 800108c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800108e:	f7ff fe6d 	bl	8000d6c <__retarget_lock_acquire_recursive>
 8001092:	4628      	mov	r0, r5
 8001094:	4621      	mov	r1, r4
 8001096:	f7ff ff61 	bl	8000f5c <__sflush_r>
 800109a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800109c:	07da      	lsls	r2, r3, #31
 800109e:	4605      	mov	r5, r0
 80010a0:	d4e4      	bmi.n	800106c <_fflush_r+0xc>
 80010a2:	89a3      	ldrh	r3, [r4, #12]
 80010a4:	059b      	lsls	r3, r3, #22
 80010a6:	d4e1      	bmi.n	800106c <_fflush_r+0xc>
 80010a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010aa:	f7ff fe60 	bl	8000d6e <__retarget_lock_release_recursive>
 80010ae:	e7dd      	b.n	800106c <_fflush_r+0xc>

080010b0 <__swhatbuf_r>:
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	460c      	mov	r4, r1
 80010b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b8:	2900      	cmp	r1, #0
 80010ba:	b096      	sub	sp, #88	; 0x58
 80010bc:	4615      	mov	r5, r2
 80010be:	461e      	mov	r6, r3
 80010c0:	da0d      	bge.n	80010de <__swhatbuf_r+0x2e>
 80010c2:	89a3      	ldrh	r3, [r4, #12]
 80010c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80010c8:	f04f 0100 	mov.w	r1, #0
 80010cc:	bf0c      	ite	eq
 80010ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80010d2:	2340      	movne	r3, #64	; 0x40
 80010d4:	2000      	movs	r0, #0
 80010d6:	6031      	str	r1, [r6, #0]
 80010d8:	602b      	str	r3, [r5, #0]
 80010da:	b016      	add	sp, #88	; 0x58
 80010dc:	bd70      	pop	{r4, r5, r6, pc}
 80010de:	466a      	mov	r2, sp
 80010e0:	f000 f848 	bl	8001174 <_fstat_r>
 80010e4:	2800      	cmp	r0, #0
 80010e6:	dbec      	blt.n	80010c2 <__swhatbuf_r+0x12>
 80010e8:	9901      	ldr	r1, [sp, #4]
 80010ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80010ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80010f2:	4259      	negs	r1, r3
 80010f4:	4159      	adcs	r1, r3
 80010f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010fa:	e7eb      	b.n	80010d4 <__swhatbuf_r+0x24>

080010fc <__smakebuf_r>:
 80010fc:	898b      	ldrh	r3, [r1, #12]
 80010fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001100:	079d      	lsls	r5, r3, #30
 8001102:	4606      	mov	r6, r0
 8001104:	460c      	mov	r4, r1
 8001106:	d507      	bpl.n	8001118 <__smakebuf_r+0x1c>
 8001108:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800110c:	6023      	str	r3, [r4, #0]
 800110e:	6123      	str	r3, [r4, #16]
 8001110:	2301      	movs	r3, #1
 8001112:	6163      	str	r3, [r4, #20]
 8001114:	b002      	add	sp, #8
 8001116:	bd70      	pop	{r4, r5, r6, pc}
 8001118:	ab01      	add	r3, sp, #4
 800111a:	466a      	mov	r2, sp
 800111c:	f7ff ffc8 	bl	80010b0 <__swhatbuf_r>
 8001120:	9900      	ldr	r1, [sp, #0]
 8001122:	4605      	mov	r5, r0
 8001124:	4630      	mov	r0, r6
 8001126:	f7ff fe8d 	bl	8000e44 <_malloc_r>
 800112a:	b948      	cbnz	r0, 8001140 <__smakebuf_r+0x44>
 800112c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001130:	059a      	lsls	r2, r3, #22
 8001132:	d4ef      	bmi.n	8001114 <__smakebuf_r+0x18>
 8001134:	f023 0303 	bic.w	r3, r3, #3
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	81a3      	strh	r3, [r4, #12]
 800113e:	e7e3      	b.n	8001108 <__smakebuf_r+0xc>
 8001140:	89a3      	ldrh	r3, [r4, #12]
 8001142:	6020      	str	r0, [r4, #0]
 8001144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001148:	81a3      	strh	r3, [r4, #12]
 800114a:	9b00      	ldr	r3, [sp, #0]
 800114c:	6163      	str	r3, [r4, #20]
 800114e:	9b01      	ldr	r3, [sp, #4]
 8001150:	6120      	str	r0, [r4, #16]
 8001152:	b15b      	cbz	r3, 800116c <__smakebuf_r+0x70>
 8001154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001158:	4630      	mov	r0, r6
 800115a:	f000 f81d 	bl	8001198 <_isatty_r>
 800115e:	b128      	cbz	r0, 800116c <__smakebuf_r+0x70>
 8001160:	89a3      	ldrh	r3, [r4, #12]
 8001162:	f023 0303 	bic.w	r3, r3, #3
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	81a3      	strh	r3, [r4, #12]
 800116c:	89a3      	ldrh	r3, [r4, #12]
 800116e:	431d      	orrs	r5, r3
 8001170:	81a5      	strh	r5, [r4, #12]
 8001172:	e7cf      	b.n	8001114 <__smakebuf_r+0x18>

08001174 <_fstat_r>:
 8001174:	b538      	push	{r3, r4, r5, lr}
 8001176:	4d07      	ldr	r5, [pc, #28]	; (8001194 <_fstat_r+0x20>)
 8001178:	2300      	movs	r3, #0
 800117a:	4604      	mov	r4, r0
 800117c:	4608      	mov	r0, r1
 800117e:	4611      	mov	r1, r2
 8001180:	602b      	str	r3, [r5, #0]
 8001182:	f7ff fb11 	bl	80007a8 <_fstat>
 8001186:	1c43      	adds	r3, r0, #1
 8001188:	d102      	bne.n	8001190 <_fstat_r+0x1c>
 800118a:	682b      	ldr	r3, [r5, #0]
 800118c:	b103      	cbz	r3, 8001190 <_fstat_r+0x1c>
 800118e:	6023      	str	r3, [r4, #0]
 8001190:	bd38      	pop	{r3, r4, r5, pc}
 8001192:	bf00      	nop
 8001194:	200001b8 	.word	0x200001b8

08001198 <_isatty_r>:
 8001198:	b538      	push	{r3, r4, r5, lr}
 800119a:	4d06      	ldr	r5, [pc, #24]	; (80011b4 <_isatty_r+0x1c>)
 800119c:	2300      	movs	r3, #0
 800119e:	4604      	mov	r4, r0
 80011a0:	4608      	mov	r0, r1
 80011a2:	602b      	str	r3, [r5, #0]
 80011a4:	f7ff fb0f 	bl	80007c6 <_isatty>
 80011a8:	1c43      	adds	r3, r0, #1
 80011aa:	d102      	bne.n	80011b2 <_isatty_r+0x1a>
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	b103      	cbz	r3, 80011b2 <_isatty_r+0x1a>
 80011b0:	6023      	str	r3, [r4, #0]
 80011b2:	bd38      	pop	{r3, r4, r5, pc}
 80011b4:	200001b8 	.word	0x200001b8

080011b8 <_sbrk_r>:
 80011b8:	b538      	push	{r3, r4, r5, lr}
 80011ba:	4d06      	ldr	r5, [pc, #24]	; (80011d4 <_sbrk_r+0x1c>)
 80011bc:	2300      	movs	r3, #0
 80011be:	4604      	mov	r4, r0
 80011c0:	4608      	mov	r0, r1
 80011c2:	602b      	str	r3, [r5, #0]
 80011c4:	f7ff fb16 	bl	80007f4 <_sbrk>
 80011c8:	1c43      	adds	r3, r0, #1
 80011ca:	d102      	bne.n	80011d2 <_sbrk_r+0x1a>
 80011cc:	682b      	ldr	r3, [r5, #0]
 80011ce:	b103      	cbz	r3, 80011d2 <_sbrk_r+0x1a>
 80011d0:	6023      	str	r3, [r4, #0]
 80011d2:	bd38      	pop	{r3, r4, r5, pc}
 80011d4:	200001b8 	.word	0x200001b8

080011d8 <_init>:
 80011d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011da:	bf00      	nop
 80011dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011de:	bc08      	pop	{r3}
 80011e0:	469e      	mov	lr, r3
 80011e2:	4770      	bx	lr

080011e4 <_fini>:
 80011e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e6:	bf00      	nop
 80011e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011ea:	bc08      	pop	{r3}
 80011ec:	469e      	mov	lr, r3
 80011ee:	4770      	bx	lr
