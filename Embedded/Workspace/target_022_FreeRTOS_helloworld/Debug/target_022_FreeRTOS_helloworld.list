
target_022_FreeRTOS_helloworld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08006548  08006548  00016548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b0  080066b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066b8  080066b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b8  080066b8  000166b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066bc  080066bc  000166bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080066c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145d4  20000070  08006730  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014644  08006730  00024644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014217  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000302b  00000000  00000000  000342fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  00037328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f2c  00000000  00000000  000386f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000197ae  00000000  00000000  0003961c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016132  00000000  00000000  00052dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c8cb  00000000  00000000  00068efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058c4  00000000  00000000  001057c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  0010b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006530 	.word	0x08006530

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006530 	.word	0x08006530

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012f20 	.word	0x20012f20

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b970 	b.w	800056c <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9e08      	ldr	r6, [sp, #32]
 80002aa:	460d      	mov	r5, r1
 80002ac:	4604      	mov	r4, r0
 80002ae:	460f      	mov	r7, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14a      	bne.n	800034a <__udivmoddi4+0xa6>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	4694      	mov	ip, r2
 80002b8:	d965      	bls.n	8000386 <__udivmoddi4+0xe2>
 80002ba:	fab2 f382 	clz	r3, r2
 80002be:	b143      	cbz	r3, 80002d2 <__udivmoddi4+0x2e>
 80002c0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c4:	f1c3 0220 	rsb	r2, r3, #32
 80002c8:	409f      	lsls	r7, r3
 80002ca:	fa20 f202 	lsr.w	r2, r0, r2
 80002ce:	4317      	orrs	r7, r2
 80002d0:	409c      	lsls	r4, r3
 80002d2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d6:	fa1f f58c 	uxth.w	r5, ip
 80002da:	fbb7 f1fe 	udiv	r1, r7, lr
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	4290      	cmp	r0, r2
 80002ee:	d90a      	bls.n	8000306 <__udivmoddi4+0x62>
 80002f0:	eb1c 0202 	adds.w	r2, ip, r2
 80002f4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f8:	f080 811c 	bcs.w	8000534 <__udivmoddi4+0x290>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f240 8119 	bls.w	8000534 <__udivmoddi4+0x290>
 8000302:	3902      	subs	r1, #2
 8000304:	4462      	add	r2, ip
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000316:	fb00 f505 	mul.w	r5, r0, r5
 800031a:	42a5      	cmp	r5, r4
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x90>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	f080 8107 	bcs.w	8000538 <__udivmoddi4+0x294>
 800032a:	42a5      	cmp	r5, r4
 800032c:	f240 8104 	bls.w	8000538 <__udivmoddi4+0x294>
 8000330:	4464      	add	r4, ip
 8000332:	3802      	subs	r0, #2
 8000334:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	2100      	movs	r1, #0
 800033c:	b11e      	cbz	r6, 8000346 <__udivmoddi4+0xa2>
 800033e:	40dc      	lsrs	r4, r3
 8000340:	2300      	movs	r3, #0
 8000342:	e9c6 4300 	strd	r4, r3, [r6]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d908      	bls.n	8000360 <__udivmoddi4+0xbc>
 800034e:	2e00      	cmp	r6, #0
 8000350:	f000 80ed 	beq.w	800052e <__udivmoddi4+0x28a>
 8000354:	2100      	movs	r1, #0
 8000356:	e9c6 0500 	strd	r0, r5, [r6]
 800035a:	4608      	mov	r0, r1
 800035c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d149      	bne.n	80003fc <__udivmoddi4+0x158>
 8000368:	42ab      	cmp	r3, r5
 800036a:	d302      	bcc.n	8000372 <__udivmoddi4+0xce>
 800036c:	4282      	cmp	r2, r0
 800036e:	f200 80f8 	bhi.w	8000562 <__udivmoddi4+0x2be>
 8000372:	1a84      	subs	r4, r0, r2
 8000374:	eb65 0203 	sbc.w	r2, r5, r3
 8000378:	2001      	movs	r0, #1
 800037a:	4617      	mov	r7, r2
 800037c:	2e00      	cmp	r6, #0
 800037e:	d0e2      	beq.n	8000346 <__udivmoddi4+0xa2>
 8000380:	e9c6 4700 	strd	r4, r7, [r6]
 8000384:	e7df      	b.n	8000346 <__udivmoddi4+0xa2>
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xe6>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f382 	clz	r3, r2
 800038e:	2b00      	cmp	r3, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x210>
 8000394:	1a8a      	subs	r2, r1, r2
 8000396:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	2101      	movs	r1, #1
 80003a0:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a4:	fb07 2015 	mls	r0, r7, r5, r2
 80003a8:	0c22      	lsrs	r2, r4, #16
 80003aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ae:	fb0e f005 	mul.w	r0, lr, r5
 80003b2:	4290      	cmp	r0, r2
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003b6:	eb1c 0202 	adds.w	r2, ip, r2
 80003ba:	f105 38ff 	add.w	r8, r5, #4294967295
 80003be:	d202      	bcs.n	80003c6 <__udivmoddi4+0x122>
 80003c0:	4290      	cmp	r0, r2
 80003c2:	f200 80cb 	bhi.w	800055c <__udivmoddi4+0x2b8>
 80003c6:	4645      	mov	r5, r8
 80003c8:	1a12      	subs	r2, r2, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d0:	fb07 2210 	mls	r2, r7, r0, r2
 80003d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d8:	fb0e fe00 	mul.w	lr, lr, r0
 80003dc:	45a6      	cmp	lr, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x14e>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x14c>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	f200 80bb 	bhi.w	8000566 <__udivmoddi4+0x2c2>
 80003f0:	4610      	mov	r0, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fa:	e79f      	b.n	800033c <__udivmoddi4+0x98>
 80003fc:	f1c1 0720 	rsb	r7, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 fc07 	lsr.w	ip, r2, r7
 8000406:	ea4c 0c03 	orr.w	ip, ip, r3
 800040a:	fa05 f401 	lsl.w	r4, r5, r1
 800040e:	fa20 f307 	lsr.w	r3, r0, r7
 8000412:	40fd      	lsrs	r5, r7
 8000414:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fbb5 f8f9 	udiv	r8, r5, r9
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	fb09 5518 	mls	r5, r9, r8, r5
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800042c:	fb08 f50e 	mul.w	r5, r8, lr
 8000430:	42a5      	cmp	r5, r4
 8000432:	fa02 f201 	lsl.w	r2, r2, r1
 8000436:	fa00 f001 	lsl.w	r0, r0, r1
 800043a:	d90b      	bls.n	8000454 <__udivmoddi4+0x1b0>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f108 3aff 	add.w	sl, r8, #4294967295
 8000444:	f080 8088 	bcs.w	8000558 <__udivmoddi4+0x2b4>
 8000448:	42a5      	cmp	r5, r4
 800044a:	f240 8085 	bls.w	8000558 <__udivmoddi4+0x2b4>
 800044e:	f1a8 0802 	sub.w	r8, r8, #2
 8000452:	4464      	add	r4, ip
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	b29d      	uxth	r5, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000464:	fb03 fe0e 	mul.w	lr, r3, lr
 8000468:	45a6      	cmp	lr, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1da>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f103 35ff 	add.w	r5, r3, #4294967295
 8000474:	d26c      	bcs.n	8000550 <__udivmoddi4+0x2ac>
 8000476:	45a6      	cmp	lr, r4
 8000478:	d96a      	bls.n	8000550 <__udivmoddi4+0x2ac>
 800047a:	3b02      	subs	r3, #2
 800047c:	4464      	add	r4, ip
 800047e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000482:	fba3 9502 	umull	r9, r5, r3, r2
 8000486:	eba4 040e 	sub.w	r4, r4, lr
 800048a:	42ac      	cmp	r4, r5
 800048c:	46c8      	mov	r8, r9
 800048e:	46ae      	mov	lr, r5
 8000490:	d356      	bcc.n	8000540 <__udivmoddi4+0x29c>
 8000492:	d053      	beq.n	800053c <__udivmoddi4+0x298>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x208>
 8000496:	ebb0 0208 	subs.w	r2, r0, r8
 800049a:	eb64 040e 	sbc.w	r4, r4, lr
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40ca      	lsrs	r2, r1
 80004a4:	40cc      	lsrs	r4, r1
 80004a6:	4317      	orrs	r7, r2
 80004a8:	e9c6 7400 	strd	r7, r4, [r6]
 80004ac:	4618      	mov	r0, r3
 80004ae:	2100      	movs	r1, #0
 80004b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b4:	f1c3 0120 	rsb	r1, r3, #32
 80004b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004bc:	fa20 f201 	lsr.w	r2, r0, r1
 80004c0:	fa25 f101 	lsr.w	r1, r5, r1
 80004c4:	409d      	lsls	r5, r3
 80004c6:	432a      	orrs	r2, r5
 80004c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004cc:	fa1f fe8c 	uxth.w	lr, ip
 80004d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d4:	fb07 1510 	mls	r5, r7, r0, r1
 80004d8:	0c11      	lsrs	r1, r2, #16
 80004da:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004de:	fb00 f50e 	mul.w	r5, r0, lr
 80004e2:	428d      	cmp	r5, r1
 80004e4:	fa04 f403 	lsl.w	r4, r4, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x258>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f2:	d22f      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 80004f4:	428d      	cmp	r5, r1
 80004f6:	d92d      	bls.n	8000554 <__udivmoddi4+0x2b0>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	1b49      	subs	r1, r1, r5
 80004fe:	b292      	uxth	r2, r2
 8000500:	fbb1 f5f7 	udiv	r5, r1, r7
 8000504:	fb07 1115 	mls	r1, r7, r5, r1
 8000508:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800050c:	fb05 f10e 	mul.w	r1, r5, lr
 8000510:	4291      	cmp	r1, r2
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x282>
 8000514:	eb1c 0202 	adds.w	r2, ip, r2
 8000518:	f105 38ff 	add.w	r8, r5, #4294967295
 800051c:	d216      	bcs.n	800054c <__udivmoddi4+0x2a8>
 800051e:	4291      	cmp	r1, r2
 8000520:	d914      	bls.n	800054c <__udivmoddi4+0x2a8>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	1a52      	subs	r2, r2, r1
 8000528:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800052c:	e738      	b.n	80003a0 <__udivmoddi4+0xfc>
 800052e:	4631      	mov	r1, r6
 8000530:	4630      	mov	r0, r6
 8000532:	e708      	b.n	8000346 <__udivmoddi4+0xa2>
 8000534:	4639      	mov	r1, r7
 8000536:	e6e6      	b.n	8000306 <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e6fb      	b.n	8000334 <__udivmoddi4+0x90>
 800053c:	4548      	cmp	r0, r9
 800053e:	d2a9      	bcs.n	8000494 <__udivmoddi4+0x1f0>
 8000540:	ebb9 0802 	subs.w	r8, r9, r2
 8000544:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000548:	3b01      	subs	r3, #1
 800054a:	e7a3      	b.n	8000494 <__udivmoddi4+0x1f0>
 800054c:	4645      	mov	r5, r8
 800054e:	e7ea      	b.n	8000526 <__udivmoddi4+0x282>
 8000550:	462b      	mov	r3, r5
 8000552:	e794      	b.n	800047e <__udivmoddi4+0x1da>
 8000554:	4640      	mov	r0, r8
 8000556:	e7d1      	b.n	80004fc <__udivmoddi4+0x258>
 8000558:	46d0      	mov	r8, sl
 800055a:	e77b      	b.n	8000454 <__udivmoddi4+0x1b0>
 800055c:	3d02      	subs	r5, #2
 800055e:	4462      	add	r2, ip
 8000560:	e732      	b.n	80003c8 <__udivmoddi4+0x124>
 8000562:	4608      	mov	r0, r1
 8000564:	e70a      	b.n	800037c <__udivmoddi4+0xd8>
 8000566:	4464      	add	r4, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e742      	b.n	80003f2 <__udivmoddi4+0x14e>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000576:	f000 fa29 	bl	80009cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800057a:	f000 f84f 	bl	800061c <SystemClock_Config>

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */

	// Enable the CYCCNT counter (before Task Creation)
	DWT_CTRL |= (1 << 0);
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <main+0x90>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a1f      	ldr	r2, [pc, #124]	; (8000600 <main+0x90>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]

	SEGGER_SYSVIEW_Conf();
 800058a:	f003 fce9 	bl	8003f60 <SEGGER_SYSVIEW_Conf>

	SEGGER_SYSVIEW_Start();
 800058e:	f004 fd9b 	bl	80050c8 <SEGGER_SYSVIEW_Start>

	status = xTaskCreate(Task1_Function, "Task1", 200,
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2302      	movs	r3, #2
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <main+0x94>)
 800059e:	22c8      	movs	r2, #200	; 0xc8
 80005a0:	4919      	ldr	r1, [pc, #100]	; (8000608 <main+0x98>)
 80005a2:	481a      	ldr	r0, [pc, #104]	; (800060c <main+0x9c>)
 80005a4:	f001 fdec 	bl	8002180 <xTaskCreate>
 80005a8:	6178      	str	r0, [r7, #20]
			"Hello world from task 1\n", 2, &Task1_Handler);

	configASSERT(status == pdPASS);
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d00a      	beq.n	80005c6 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c2:	bf00      	nop
 80005c4:	e7fe      	b.n	80005c4 <main+0x54>

	status = xTaskCreate(Task2_Function, "Task2", 200,
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0xa0>)
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	4910      	ldr	r1, [pc, #64]	; (8000614 <main+0xa4>)
 80005d4:	4810      	ldr	r0, [pc, #64]	; (8000618 <main+0xa8>)
 80005d6:	f001 fdd3 	bl	8002180 <xTaskCreate>
 80005da:	6178      	str	r0, [r7, #20]
			"Hello world from task 2\n", 2, &Task2_Handler);

	configASSERT(status == pdPASS);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x88>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	60fb      	str	r3, [r7, #12]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x86>

	// Start the FreeRTOS Scheduler
	vTaskStartScheduler();
 80005f8:	f001 ff4a 	bl	8002490 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x8c>
 80005fe:	bf00      	nop
 8000600:	e0001000 	.word	0xe0001000
 8000604:	08006548 	.word	0x08006548
 8000608:	08006564 	.word	0x08006564
 800060c:	080006d9 	.word	0x080006d9
 8000610:	0800656c 	.word	0x0800656c
 8000614:	08006588 	.word	0x08006588
 8000618:	080006e9 	.word	0x080006e9

0800061c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f005 fcc8 	bl	8005fc0 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xb4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xb4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xb4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <SystemClock_Config+0xb8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <SystemClock_Config+0xb8>)
 8000666:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <SystemClock_Config+0xb8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fac1 	bl	8000c14 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x80>
	{
		Error_Handler();
 8000698:	f000 f840 	bl	800071c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fd24 	bl	8001104 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xaa>
	{
		Error_Handler();
 80006c2:	f000 f82b 	bl	800071c <Error_Handler>
	}
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <Task1_Function>:

/* USER CODE BEGIN 4 */

// Scope of this function is limited in this main.c file
static void Task1_Function(void *parameters)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
	while (1)
	{
		printf("%s\n", (char*) parameters);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f005 fb7d 	bl	8005de0 <puts>
 80006e6:	e7fb      	b.n	80006e0 <Task1_Function+0x8>

080006e8 <Task2_Function>:
	}
}

// Scope of this function is limited in this main.c file
static void Task2_Function(void *parameters)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	while (1)
	{
		printf("%s\n", (char*) parameters);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f005 fb75 	bl	8005de0 <puts>
 80006f6:	e7fb      	b.n	80006f0 <Task2_Function+0x8>

080006f8 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a04      	ldr	r2, [pc, #16]	; (8000718 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d101      	bne.n	800070e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800070a:	f000 f981 	bl	8000a10 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40000c00 	.word	0x40000c00

0800071c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_MspInit+0x4c>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <HAL_MspInit+0x4c>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073c:	6453      	str	r3, [r2, #68]	; 0x44
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_MspInit+0x4c>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x4c>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_MspInit+0x4c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_MspInit+0x4c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000766:	f003 f877 	bl	8003858 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08e      	sub	sp, #56	; 0x38
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000784:	2300      	movs	r3, #0
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	4b33      	ldr	r3, [pc, #204]	; (800085c <HAL_InitTick+0xe4>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a32      	ldr	r2, [pc, #200]	; (800085c <HAL_InitTick+0xe4>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b30      	ldr	r3, [pc, #192]	; (800085c <HAL_InitTick+0xe4>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007a4:	f107 0210 	add.w	r2, r7, #16
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fe74 	bl	800149c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007b4:	6a3b      	ldr	r3, [r7, #32]
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d103      	bne.n	80007c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007be:	f000 fe59 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 80007c2:	6378      	str	r0, [r7, #52]	; 0x34
 80007c4:	e004      	b.n	80007d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007c6:	f000 fe55 	bl	8001474 <HAL_RCC_GetPCLK1Freq>
 80007ca:	4603      	mov	r3, r0
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d2:	4a23      	ldr	r2, [pc, #140]	; (8000860 <HAL_InitTick+0xe8>)
 80007d4:	fba2 2303 	umull	r2, r3, r2, r3
 80007d8:	0c9b      	lsrs	r3, r3, #18
 80007da:	3b01      	subs	r3, #1
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <HAL_InitTick+0xec>)
 80007e0:	4a21      	ldr	r2, [pc, #132]	; (8000868 <HAL_InitTick+0xf0>)
 80007e2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <HAL_InitTick+0xec>)
 80007e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007ea:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80007ec:	4a1d      	ldr	r2, [pc, #116]	; (8000864 <HAL_InitTick+0xec>)
 80007ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <HAL_InitTick+0xec>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_InitTick+0xec>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <HAL_InitTick+0xec>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000804:	4817      	ldr	r0, [pc, #92]	; (8000864 <HAL_InitTick+0xec>)
 8000806:	f000 fe7b 	bl	8001500 <HAL_TIM_Base_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000810:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000814:	2b00      	cmp	r3, #0
 8000816:	d11b      	bne.n	8000850 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000818:	4812      	ldr	r0, [pc, #72]	; (8000864 <HAL_InitTick+0xec>)
 800081a:	f000 fecb 	bl	80015b4 <HAL_TIM_Base_Start_IT>
 800081e:	4603      	mov	r3, r0
 8000820:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000824:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000828:	2b00      	cmp	r3, #0
 800082a:	d111      	bne.n	8000850 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800082c:	2032      	movs	r0, #50	; 0x32
 800082e:	f000 f9e3 	bl	8000bf8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d808      	bhi.n	800084a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	2032      	movs	r0, #50	; 0x32
 800083e:	f000 f9bf 	bl	8000bc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_InitTick+0xf4>)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6013      	str	r3, [r2, #0]
 8000848:	e002      	b.n	8000850 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000850:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000854:	4618      	mov	r0, r3
 8000856:	3738      	adds	r7, #56	; 0x38
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	431bde83 	.word	0x431bde83
 8000864:	2000008c 	.word	0x2000008c
 8000868:	40000c00 	.word	0x40000c00
 800086c:	20000004 	.word	0x20000004

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80008a0:	4802      	ldr	r0, [pc, #8]	; (80008ac <TIM5_IRQHandler+0x10>)
 80008a2:	f000 fee9 	bl	8001678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000008c 	.word	0x2000008c

080008b0 <_read>:
	{
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
 80008c0:	e00a      	b.n	80008d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008c2:	f3af 8000 	nop.w
 80008c6:	4601      	mov	r1, r0
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	60ba      	str	r2, [r7, #8]
 80008ce:	b2ca      	uxtb	r2, r1
 80008d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	3301      	adds	r3, #1
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	429a      	cmp	r2, r3
 80008de:	dbf0      	blt.n	80008c2 <_read+0x12>
	}

	return len;
 80008e0:	687b      	ldr	r3, [r7, #4]
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3718      	adds	r7, #24
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <_close>:
	}
	return len;
}

int _close(int file)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <_fstat>:

int _fstat(int file, struct stat *st)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000912:	605a      	str	r2, [r3, #4]
	return 0;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <_isatty>:

int _isatty(int file)
{
 8000922:	b480      	push	{r7}
 8000924:	b083      	sub	sp, #12
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3714      	adds	r7, #20
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800097e:	490e      	ldr	r1, [pc, #56]	; (80009b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000994:	4c0b      	ldr	r4, [pc, #44]	; (80009c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a2:	f7ff ffd7 	bl	8000954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a6:	f005 fb47 	bl	8006038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009aa:	f7ff fde1 	bl	8000570 <main>
  bx  lr    
 80009ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009bc:	080066c0 	.word	0x080066c0
  ldr r2, =_sbss
 80009c0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009c4:	20014644 	.word	0x20014644

080009c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <HAL_Init+0x40>)
 80009d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_Init+0x40>)
 80009e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_Init+0x40>)
 80009ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f8d8 	bl	8000baa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fa:	200f      	movs	r0, #15
 80009fc:	f7ff febc 	bl	8000778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a00:	f7ff fe92 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023c00 	.word	0x40023c00

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200000d4 	.word	0x200000d4

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200000d4 	.word	0x200000d4

08000a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <__NVIC_EnableIRQ+0x38>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ff4c 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd2:	f7ff ff61 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000bd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	6978      	ldr	r0, [r7, #20]
 8000bde:	f7ff ffb1 	bl	8000b44 <NVIC_EncodePriority>
 8000be2:	4602      	mov	r2, r0
 8000be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff80 	bl	8000af0 <__NVIC_SetPriority>
}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff54 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e267      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d075      	beq.n	8000d1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c32:	4b88      	ldr	r3, [pc, #544]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 030c 	and.w	r3, r3, #12
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	d00c      	beq.n	8000c58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c3e:	4b85      	ldr	r3, [pc, #532]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c46:	2b08      	cmp	r3, #8
 8000c48:	d112      	bne.n	8000c70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c4a:	4b82      	ldr	r3, [pc, #520]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c56:	d10b      	bne.n	8000c70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	4b7e      	ldr	r3, [pc, #504]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d05b      	beq.n	8000d1c <HAL_RCC_OscConfig+0x108>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d157      	bne.n	8000d1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e242      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c78:	d106      	bne.n	8000c88 <HAL_RCC_OscConfig+0x74>
 8000c7a:	4b76      	ldr	r3, [pc, #472]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a75      	ldr	r2, [pc, #468]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c84:	6013      	str	r3, [r2, #0]
 8000c86:	e01d      	b.n	8000cc4 <HAL_RCC_OscConfig+0xb0>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c90:	d10c      	bne.n	8000cac <HAL_RCC_OscConfig+0x98>
 8000c92:	4b70      	ldr	r3, [pc, #448]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a6f      	ldr	r2, [pc, #444]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	4b6d      	ldr	r3, [pc, #436]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a6c      	ldr	r2, [pc, #432]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	e00b      	b.n	8000cc4 <HAL_RCC_OscConfig+0xb0>
 8000cac:	4b69      	ldr	r3, [pc, #420]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a68      	ldr	r2, [pc, #416]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb6:	6013      	str	r3, [r2, #0]
 8000cb8:	4b66      	ldr	r3, [pc, #408]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a65      	ldr	r2, [pc, #404]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d013      	beq.n	8000cf4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ccc:	f7ff feb4 	bl	8000a38 <HAL_GetTick>
 8000cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd2:	e008      	b.n	8000ce6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd4:	f7ff feb0 	bl	8000a38 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b64      	cmp	r3, #100	; 0x64
 8000ce0:	d901      	bls.n	8000ce6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	e207      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce6:	4b5b      	ldr	r3, [pc, #364]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0f0      	beq.n	8000cd4 <HAL_RCC_OscConfig+0xc0>
 8000cf2:	e014      	b.n	8000d1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fea0 	bl	8000a38 <HAL_GetTick>
 8000cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfc:	f7ff fe9c 	bl	8000a38 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e1f3      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d0e:	4b51      	ldr	r3, [pc, #324]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f0      	bne.n	8000cfc <HAL_RCC_OscConfig+0xe8>
 8000d1a:	e000      	b.n	8000d1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d063      	beq.n	8000df2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d2a:	4b4a      	ldr	r3, [pc, #296]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d00b      	beq.n	8000d4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d36:	4b47      	ldr	r3, [pc, #284]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d3e:	2b08      	cmp	r3, #8
 8000d40:	d11c      	bne.n	8000d7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d42:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d116      	bne.n	8000d7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4e:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <HAL_RCC_OscConfig+0x152>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d001      	beq.n	8000d66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e1c7      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	691b      	ldr	r3, [r3, #16]
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	4937      	ldr	r1, [pc, #220]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d7a:	e03a      	b.n	8000df2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d020      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <HAL_RCC_OscConfig+0x244>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d8a:	f7ff fe55 	bl	8000a38 <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d90:	e008      	b.n	8000da4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d92:	f7ff fe51 	bl	8000a38 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d901      	bls.n	8000da4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000da0:	2303      	movs	r3, #3
 8000da2:	e1a8      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f0      	beq.n	8000d92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db0:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	4925      	ldr	r1, [pc, #148]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	600b      	str	r3, [r1, #0]
 8000dc4:	e015      	b.n	8000df2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <HAL_RCC_OscConfig+0x244>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fe34 	bl	8000a38 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd4:	f7ff fe30 	bl	8000a38 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e187      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d036      	beq.n	8000e6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d016      	beq.n	8000e34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <HAL_RCC_OscConfig+0x248>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e0c:	f7ff fe14 	bl	8000a38 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e14:	f7ff fe10 	bl	8000a38 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e167      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_RCC_OscConfig+0x240>)
 8000e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d0f0      	beq.n	8000e14 <HAL_RCC_OscConfig+0x200>
 8000e32:	e01b      	b.n	8000e6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <HAL_RCC_OscConfig+0x248>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e3a:	f7ff fdfd 	bl	8000a38 <HAL_GetTick>
 8000e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e40:	e00e      	b.n	8000e60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e42:	f7ff fdf9 	bl	8000a38 <HAL_GetTick>
 8000e46:	4602      	mov	r2, r0
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b02      	cmp	r3, #2
 8000e4e:	d907      	bls.n	8000e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e150      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
 8000e54:	40023800 	.word	0x40023800
 8000e58:	42470000 	.word	0x42470000
 8000e5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e60:	4b88      	ldr	r3, [pc, #544]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1ea      	bne.n	8000e42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f000 8097 	beq.w	8000fa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e7e:	4b81      	ldr	r3, [pc, #516]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d10f      	bne.n	8000eaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	4b7d      	ldr	r3, [pc, #500]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	4a7c      	ldr	r2, [pc, #496]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e98:	6413      	str	r3, [r2, #64]	; 0x40
 8000e9a:	4b7a      	ldr	r3, [pc, #488]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eaa:	4b77      	ldr	r3, [pc, #476]	; (8001088 <HAL_RCC_OscConfig+0x474>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d118      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eb6:	4b74      	ldr	r3, [pc, #464]	; (8001088 <HAL_RCC_OscConfig+0x474>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a73      	ldr	r2, [pc, #460]	; (8001088 <HAL_RCC_OscConfig+0x474>)
 8000ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ec2:	f7ff fdb9 	bl	8000a38 <HAL_GetTick>
 8000ec6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec8:	e008      	b.n	8000edc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eca:	f7ff fdb5 	bl	8000a38 <HAL_GetTick>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d901      	bls.n	8000edc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	e10c      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000edc:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <HAL_RCC_OscConfig+0x474>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0f0      	beq.n	8000eca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d106      	bne.n	8000efe <HAL_RCC_OscConfig+0x2ea>
 8000ef0:	4b64      	ldr	r3, [pc, #400]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef4:	4a63      	ldr	r2, [pc, #396]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6713      	str	r3, [r2, #112]	; 0x70
 8000efc:	e01c      	b.n	8000f38 <HAL_RCC_OscConfig+0x324>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x30c>
 8000f06:	4b5f      	ldr	r3, [pc, #380]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f0a:	4a5e      	ldr	r2, [pc, #376]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6713      	str	r3, [r2, #112]	; 0x70
 8000f12:	4b5c      	ldr	r3, [pc, #368]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f16:	4a5b      	ldr	r2, [pc, #364]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f1e:	e00b      	b.n	8000f38 <HAL_RCC_OscConfig+0x324>
 8000f20:	4b58      	ldr	r3, [pc, #352]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f24:	4a57      	ldr	r2, [pc, #348]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f26:	f023 0301 	bic.w	r3, r3, #1
 8000f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f2c:	4b55      	ldr	r3, [pc, #340]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f30:	4a54      	ldr	r2, [pc, #336]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f32:	f023 0304 	bic.w	r3, r3, #4
 8000f36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d015      	beq.n	8000f6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f40:	f7ff fd7a 	bl	8000a38 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f46:	e00a      	b.n	8000f5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f48:	f7ff fd76 	bl	8000a38 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e0cb      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f5e:	4b49      	ldr	r3, [pc, #292]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0ee      	beq.n	8000f48 <HAL_RCC_OscConfig+0x334>
 8000f6a:	e014      	b.n	8000f96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fd64 	bl	8000a38 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f72:	e00a      	b.n	8000f8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f74:	f7ff fd60 	bl	8000a38 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e0b5      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f8a:	4b3e      	ldr	r3, [pc, #248]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1ee      	bne.n	8000f74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f96:	7dfb      	ldrb	r3, [r7, #23]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d105      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa0:	4a38      	ldr	r2, [pc, #224]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000fa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80a1 	beq.w	80010f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fb2:	4b34      	ldr	r3, [pc, #208]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f003 030c 	and.w	r3, r3, #12
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d05c      	beq.n	8001078 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	699b      	ldr	r3, [r3, #24]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d141      	bne.n	800104a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <HAL_RCC_OscConfig+0x478>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fd34 	bl	8000a38 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd4:	f7ff fd30 	bl	8000a38 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e087      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe6:	4b27      	ldr	r3, [pc, #156]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69da      	ldr	r2, [r3, #28]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	019b      	lsls	r3, r3, #6
 8001002:	431a      	orrs	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	085b      	lsrs	r3, r3, #1
 800100a:	3b01      	subs	r3, #1
 800100c:	041b      	lsls	r3, r3, #16
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	061b      	lsls	r3, r3, #24
 8001016:	491b      	ldr	r1, [pc, #108]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_RCC_OscConfig+0x478>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fd09 	bl	8000a38 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102a:	f7ff fd05 	bl	8000a38 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e05c      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x416>
 8001048:	e054      	b.n	80010f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <HAL_RCC_OscConfig+0x478>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001050:	f7ff fcf2 	bl	8000a38 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff fcee 	bl	8000a38 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e045      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_RCC_OscConfig+0x470>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f0      	bne.n	8001058 <HAL_RCC_OscConfig+0x444>
 8001076:	e03d      	b.n	80010f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d107      	bne.n	8001090 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e038      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
 8001084:	40023800 	.word	0x40023800
 8001088:	40007000 	.word	0x40007000
 800108c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <HAL_RCC_OscConfig+0x4ec>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d028      	beq.n	80010f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d121      	bne.n	80010f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d11a      	bne.n	80010f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010c0:	4013      	ands	r3, r2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d111      	bne.n	80010f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	085b      	lsrs	r3, r3, #1
 80010d8:	3b01      	subs	r3, #1
 80010da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010dc:	429a      	cmp	r2, r3
 80010de:	d107      	bne.n	80010f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d001      	beq.n	80010f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d101      	bne.n	8001118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	e0cc      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001118:	4b68      	ldr	r3, [pc, #416]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	429a      	cmp	r2, r3
 8001124:	d90c      	bls.n	8001140 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001126:	4b65      	ldr	r3, [pc, #404]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112e:	4b63      	ldr	r3, [pc, #396]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d001      	beq.n	8001140 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e0b8      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001158:	4b59      	ldr	r3, [pc, #356]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	4a58      	ldr	r2, [pc, #352]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001170:	4b53      	ldr	r3, [pc, #332]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	4a52      	ldr	r2, [pc, #328]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800117a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800117c:	4b50      	ldr	r3, [pc, #320]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	494d      	ldr	r1, [pc, #308]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d044      	beq.n	8001224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d119      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e07f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d003      	beq.n	80011c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d107      	bne.n	80011d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011c2:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d109      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e06f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e067      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011e2:	4b37      	ldr	r3, [pc, #220]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f023 0203 	bic.w	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	4934      	ldr	r1, [pc, #208]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f4:	f7ff fc20 	bl	8000a38 <HAL_GetTick>
 80011f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011fa:	e00a      	b.n	8001212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fc:	f7ff fc1c 	bl	8000a38 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	f241 3288 	movw	r2, #5000	; 0x1388
 800120a:	4293      	cmp	r3, r2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e04f      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 020c 	and.w	r2, r3, #12
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	429a      	cmp	r2, r3
 8001222:	d1eb      	bne.n	80011fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	429a      	cmp	r2, r3
 8001230:	d20c      	bcs.n	800124c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	4b20      	ldr	r3, [pc, #128]	; (80012bc <HAL_RCC_ClockConfig+0x1b8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e032      	b.n	80012b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4916      	ldr	r1, [pc, #88]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	4313      	orrs	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	490e      	ldr	r1, [pc, #56]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	4313      	orrs	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800128a:	f000 f821 	bl	80012d0 <HAL_RCC_GetSysClockFreq>
 800128e:	4602      	mov	r2, r0
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	490a      	ldr	r1, [pc, #40]	; (80012c4 <HAL_RCC_ClockConfig+0x1c0>)
 800129c:	5ccb      	ldrb	r3, [r1, r3]
 800129e:	fa22 f303 	lsr.w	r3, r2, r3
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_RCC_ClockConfig+0x1c8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fa64 	bl	8000778 <HAL_InitTick>

  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023c00 	.word	0x40023c00
 80012c0:	40023800 	.word	0x40023800
 80012c4:	08006670 	.word	0x08006670
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000004 	.word	0x20000004

080012d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012d4:	b090      	sub	sp, #64	; 0x40
 80012d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	637b      	str	r3, [r7, #52]	; 0x34
 80012dc:	2300      	movs	r3, #0
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012e0:	2300      	movs	r3, #0
 80012e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012e8:	4b59      	ldr	r3, [pc, #356]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d00d      	beq.n	8001310 <HAL_RCC_GetSysClockFreq+0x40>
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	f200 80a1 	bhi.w	800143c <HAL_RCC_GetSysClockFreq+0x16c>
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0x34>
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d003      	beq.n	800130a <HAL_RCC_GetSysClockFreq+0x3a>
 8001302:	e09b      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001304:	4b53      	ldr	r3, [pc, #332]	; (8001454 <HAL_RCC_GetSysClockFreq+0x184>)
 8001306:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001308:	e09b      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800130a:	4b53      	ldr	r3, [pc, #332]	; (8001458 <HAL_RCC_GetSysClockFreq+0x188>)
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800130e:	e098      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001318:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800131a:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d028      	beq.n	8001378 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	099b      	lsrs	r3, r3, #6
 800132c:	2200      	movs	r2, #0
 800132e:	623b      	str	r3, [r7, #32]
 8001330:	627a      	str	r2, [r7, #36]	; 0x24
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001338:	2100      	movs	r1, #0
 800133a:	4b47      	ldr	r3, [pc, #284]	; (8001458 <HAL_RCC_GetSysClockFreq+0x188>)
 800133c:	fb03 f201 	mul.w	r2, r3, r1
 8001340:	2300      	movs	r3, #0
 8001342:	fb00 f303 	mul.w	r3, r0, r3
 8001346:	4413      	add	r3, r2
 8001348:	4a43      	ldr	r2, [pc, #268]	; (8001458 <HAL_RCC_GetSysClockFreq+0x188>)
 800134a:	fba0 1202 	umull	r1, r2, r0, r2
 800134e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001350:	460a      	mov	r2, r1
 8001352:	62ba      	str	r2, [r7, #40]	; 0x28
 8001354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001356:	4413      	add	r3, r2
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800135a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800135c:	2200      	movs	r2, #0
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	61fa      	str	r2, [r7, #28]
 8001362:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001366:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800136a:	f7fe ff83 	bl	8000274 <__aeabi_uldivmod>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4613      	mov	r3, r2
 8001374:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001376:	e053      	b.n	8001420 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001378:	4b35      	ldr	r3, [pc, #212]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	099b      	lsrs	r3, r3, #6
 800137e:	2200      	movs	r2, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	617a      	str	r2, [r7, #20]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800138a:	f04f 0b00 	mov.w	fp, #0
 800138e:	4652      	mov	r2, sl
 8001390:	465b      	mov	r3, fp
 8001392:	f04f 0000 	mov.w	r0, #0
 8001396:	f04f 0100 	mov.w	r1, #0
 800139a:	0159      	lsls	r1, r3, #5
 800139c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013a0:	0150      	lsls	r0, r2, #5
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	ebb2 080a 	subs.w	r8, r2, sl
 80013aa:	eb63 090b 	sbc.w	r9, r3, fp
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	f04f 0300 	mov.w	r3, #0
 80013b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80013ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80013be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80013c2:	ebb2 0408 	subs.w	r4, r2, r8
 80013c6:	eb63 0509 	sbc.w	r5, r3, r9
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	00eb      	lsls	r3, r5, #3
 80013d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013d8:	00e2      	lsls	r2, r4, #3
 80013da:	4614      	mov	r4, r2
 80013dc:	461d      	mov	r5, r3
 80013de:	eb14 030a 	adds.w	r3, r4, sl
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	eb45 030b 	adc.w	r3, r5, fp
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013f6:	4629      	mov	r1, r5
 80013f8:	028b      	lsls	r3, r1, #10
 80013fa:	4621      	mov	r1, r4
 80013fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001400:	4621      	mov	r1, r4
 8001402:	028a      	lsls	r2, r1, #10
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140a:	2200      	movs	r2, #0
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	60fa      	str	r2, [r7, #12]
 8001410:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001414:	f7fe ff2e 	bl	8000274 <__aeabi_uldivmod>
 8001418:	4602      	mov	r2, r0
 800141a:	460b      	mov	r3, r1
 800141c:	4613      	mov	r3, r2
 800141e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_RCC_GetSysClockFreq+0x180>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	3301      	adds	r3, #1
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001434:	fbb2 f3f3 	udiv	r3, r2, r3
 8001438:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800143a:	e002      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_RCC_GetSysClockFreq+0x184>)
 800143e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001444:	4618      	mov	r0, r3
 8001446:	3740      	adds	r7, #64	; 0x40
 8001448:	46bd      	mov	sp, r7
 800144a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	00f42400 	.word	0x00f42400
 8001458:	017d7840 	.word	0x017d7840

0800145c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_RCC_GetHCLKFreq+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
}
 8001464:	4618      	mov	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000000 	.word	0x20000000

08001474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001478:	f7ff fff0 	bl	800145c <HAL_RCC_GetHCLKFreq>
 800147c:	4602      	mov	r2, r0
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	0a9b      	lsrs	r3, r3, #10
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	4903      	ldr	r1, [pc, #12]	; (8001498 <HAL_RCC_GetPCLK1Freq+0x24>)
 800148a:	5ccb      	ldrb	r3, [r1, r3]
 800148c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	08006680 	.word	0x08006680

0800149c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	220f      	movs	r2, #15
 80014aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0203 	and.w	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <HAL_RCC_GetClockConfig+0x5c>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <HAL_RCC_GetClockConfig+0x60>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0207 	and.w	r2, r3, #7
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	601a      	str	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40023c00 	.word	0x40023c00

08001500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e041      	b.n	8001596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d106      	bne.n	800152c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f839 	bl	800159e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3304      	adds	r3, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4610      	mov	r0, r2
 8001540:	f000 f9ca 	bl	80018d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d001      	beq.n	80015cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e044      	b.n	8001656 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2202      	movs	r2, #2
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_TIM_Base_Start_IT+0xb0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d018      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x6c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f6:	d013      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x6c>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1a      	ldr	r2, [pc, #104]	; (8001668 <HAL_TIM_Base_Start_IT+0xb4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d00e      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x6c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_TIM_Base_Start_IT+0xb8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d009      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x6c>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a17      	ldr	r2, [pc, #92]	; (8001670 <HAL_TIM_Base_Start_IT+0xbc>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d004      	beq.n	8001620 <HAL_TIM_Base_Start_IT+0x6c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a16      	ldr	r2, [pc, #88]	; (8001674 <HAL_TIM_Base_Start_IT+0xc0>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d111      	bne.n	8001644 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b06      	cmp	r3, #6
 8001630:	d010      	beq.n	8001654 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0201 	orr.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001642:	e007      	b.n	8001654 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0201 	orr.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40010000 	.word	0x40010000
 8001668:	40000400 	.word	0x40000400
 800166c:	40000800 	.word	0x40000800
 8001670:	40000c00 	.word	0x40000c00
 8001674:	40014000 	.word	0x40014000

08001678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b02      	cmp	r3, #2
 800168c:	d122      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b02      	cmp	r3, #2
 800169a:	d11b      	bne.n	80016d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f06f 0202 	mvn.w	r2, #2
 80016a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f8ee 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 80016c0:	e005      	b.n	80016ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f8e0 	bl	8001888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f000 f8f1 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d122      	bne.n	8001728 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b04      	cmp	r3, #4
 80016ee:	d11b      	bne.n	8001728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f06f 0204 	mvn.w	r2, #4
 80016f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2202      	movs	r2, #2
 80016fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 f8c4 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 8001714:	e005      	b.n	8001722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f8b6 	bl	8001888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f8c7 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b08      	cmp	r3, #8
 8001734:	d122      	bne.n	800177c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b08      	cmp	r3, #8
 8001742:	d11b      	bne.n	800177c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f06f 0208 	mvn.w	r2, #8
 800174c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2204      	movs	r2, #4
 8001752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f89a 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 8001768:	e005      	b.n	8001776 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f88c 	bl	8001888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f89d 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b10      	cmp	r3, #16
 8001788:	d122      	bne.n	80017d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b10      	cmp	r3, #16
 8001796:	d11b      	bne.n	80017d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f06f 0210 	mvn.w	r2, #16
 80017a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2208      	movs	r2, #8
 80017a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f870 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 80017bc:	e005      	b.n	80017ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f862 	bl	8001888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f873 	bl	80018b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d10e      	bne.n	80017fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d107      	bne.n	80017fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f06f 0201 	mvn.w	r2, #1
 80017f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7fe ff7e 	bl	80006f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	2b80      	cmp	r3, #128	; 0x80
 8001808:	d10e      	bne.n	8001828 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	2b80      	cmp	r3, #128	; 0x80
 8001816:	d107      	bne.n	8001828 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f8e2 	bl	80019ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001832:	2b40      	cmp	r3, #64	; 0x40
 8001834:	d10e      	bne.n	8001854 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001840:	2b40      	cmp	r3, #64	; 0x40
 8001842:	d107      	bne.n	8001854 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800184c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 f838 	bl	80018c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f003 0320 	and.w	r3, r3, #32
 800185e:	2b20      	cmp	r3, #32
 8001860:	d10e      	bne.n	8001880 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	f003 0320 	and.w	r3, r3, #32
 800186c:	2b20      	cmp	r3, #32
 800186e:	d107      	bne.n	8001880 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f06f 0220 	mvn.w	r2, #32
 8001878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f8ac 	bl	80019d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a34      	ldr	r2, [pc, #208]	; (80019bc <TIM_Base_SetConfig+0xe4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d00f      	beq.n	8001910 <TIM_Base_SetConfig+0x38>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f6:	d00b      	beq.n	8001910 <TIM_Base_SetConfig+0x38>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <TIM_Base_SetConfig+0xe8>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d007      	beq.n	8001910 <TIM_Base_SetConfig+0x38>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a30      	ldr	r2, [pc, #192]	; (80019c4 <TIM_Base_SetConfig+0xec>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d003      	beq.n	8001910 <TIM_Base_SetConfig+0x38>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <TIM_Base_SetConfig+0xf0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d108      	bne.n	8001922 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a25      	ldr	r2, [pc, #148]	; (80019bc <TIM_Base_SetConfig+0xe4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d01b      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001930:	d017      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <TIM_Base_SetConfig+0xe8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <TIM_Base_SetConfig+0xec>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00f      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <TIM_Base_SetConfig+0xf0>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d00b      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <TIM_Base_SetConfig+0xf4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d007      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a1e      	ldr	r2, [pc, #120]	; (80019d0 <TIM_Base_SetConfig+0xf8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d003      	beq.n	8001962 <TIM_Base_SetConfig+0x8a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <TIM_Base_SetConfig+0xfc>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d108      	bne.n	8001974 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	4313      	orrs	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68fa      	ldr	r2, [r7, #12]
 8001986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a08      	ldr	r2, [pc, #32]	; (80019bc <TIM_Base_SetConfig+0xe4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d103      	bne.n	80019a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	615a      	str	r2, [r3, #20]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40010000 	.word	0x40010000
 80019c0:	40000400 	.word	0x40000400
 80019c4:	40000800 	.word	0x40000800
 80019c8:	40000c00 	.word	0x40000c00
 80019cc:	40014000 	.word	0x40014000
 80019d0:	40014400 	.word	0x40014400
 80019d4:	40014800 	.word	0x40014800

080019d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f103 0208 	add.w	r2, r3, #8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f103 0208 	add.w	r2, r3, #8
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f103 0208 	add.w	r2, r3, #8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d103      	bne.n	8001a7a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	e00c      	b.n	8001a94 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3308      	adds	r3, #8
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	e002      	b.n	8001a88 <vListInsert+0x2e>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d2f6      	bcs.n	8001a82 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	601a      	str	r2, [r3, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6892      	ldr	r2, [r2, #8]
 8001ae2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6852      	ldr	r2, [r2, #4]
 8001aec:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d103      	bne.n	8001b00 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	1e5a      	subs	r2, r3, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10a      	bne.n	8001b4e <xQueueGenericReset+0x2e>
        __asm volatile
 8001b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b3c:	f383 8811 	msr	BASEPRI, r3
 8001b40:	f3bf 8f6f 	isb	sy
 8001b44:	f3bf 8f4f 	dsb	sy
 8001b48:	60fb      	str	r3, [r7, #12]
    }
 8001b4a:	bf00      	nop
 8001b4c:	e7fe      	b.n	8001b4c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d05d      	beq.n	8001c10 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d059      	beq.n	8001c10 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	2100      	movs	r1, #0
 8001b66:	fba3 2302 	umull	r2, r3, r3, r2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d000      	beq.n	8001b70 <xQueueGenericReset+0x50>
 8001b6e:	2101      	movs	r1, #1
 8001b70:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d14c      	bne.n	8001c10 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001b76:	f001 feed 	bl	8003954 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	6939      	ldr	r1, [r7, #16]
 8001b84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	441a      	add	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2200      	movs	r2, #0
 8001b94:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6939      	ldr	r1, [r7, #16]
 8001baa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	441a      	add	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	22ff      	movs	r2, #255	; 0xff
 8001bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	22ff      	movs	r2, #255	; 0xff
 8001bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d114      	bne.n	8001bf6 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01a      	beq.n	8001c0a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	3310      	adds	r3, #16
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 ffdb 	bl	8002b94 <xTaskRemoveFromEventList>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d012      	beq.n	8001c0a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <xQueueGenericReset+0x11c>)
 8001be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	f3bf 8f4f 	dsb	sy
 8001bf0:	f3bf 8f6f 	isb	sy
 8001bf4:	e009      	b.n	8001c0a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	3310      	adds	r3, #16
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff ff00 	bl	8001a00 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	3324      	adds	r3, #36	; 0x24
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fefb 	bl	8001a00 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001c0a:	f001 fed3 	bl	80039b4 <vPortExitCritical>
 8001c0e:	e001      	b.n	8001c14 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10a      	bne.n	8001c30 <xQueueGenericReset+0x110>
        __asm volatile
 8001c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1e:	f383 8811 	msr	BASEPRI, r3
 8001c22:	f3bf 8f6f 	isb	sy
 8001c26:	f3bf 8f4f 	dsb	sy
 8001c2a:	60bb      	str	r3, [r7, #8]
    }
 8001c2c:	bf00      	nop
 8001c2e:	e7fe      	b.n	8001c2e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001c30:	697b      	ldr	r3, [r7, #20]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	e000ed04 	.word	0xe000ed04

08001c40 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	; 0x28
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d02e      	beq.n	8001cb6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001c58:	2100      	movs	r1, #0
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d000      	beq.n	8001c68 <xQueueGenericCreate+0x28>
 8001c66:	2101      	movs	r1, #1
 8001c68:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d123      	bne.n	8001cb6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001c76:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001c7a:	d81c      	bhi.n	8001cb6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	3350      	adds	r3, #80	; 0x50
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 ff8e 	bl	8003bac <pvPortMalloc>
 8001c90:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01c      	beq.n	8001cd2 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	3350      	adds	r3, #80	; 0x50
 8001ca0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ca2:	79fa      	ldrb	r2, [r7, #7]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f814 	bl	8001cdc <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001cb4:	e00d      	b.n	8001cd2 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10a      	bne.n	8001cd2 <xQueueGenericCreate+0x92>
        __asm volatile
 8001cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc0:	f383 8811 	msr	BASEPRI, r3
 8001cc4:	f3bf 8f6f 	isb	sy
 8001cc8:	f3bf 8f4f 	dsb	sy
 8001ccc:	613b      	str	r3, [r7, #16]
    }
 8001cce:	bf00      	nop
 8001cd0:	e7fe      	b.n	8001cd0 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
    }
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d103      	bne.n	8001cf8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e002      	b.n	8001cfe <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	69b8      	ldr	r0, [r7, #24]
 8001d0e:	f7ff ff07 	bl	8001b20 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	68f9      	ldr	r1, [r7, #12]
 8001d20:	2073      	movs	r0, #115	; 0x73
 8001d22:	f003 f8c9 	bl	8004eb8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08f      	sub	sp, #60	; 0x3c
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10a      	bne.n	8001d60 <xQueueReceive+0x30>
        __asm volatile
 8001d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	623b      	str	r3, [r7, #32]
    }
 8001d5c:	bf00      	nop
 8001d5e:	e7fe      	b.n	8001d5e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d103      	bne.n	8001d6e <xQueueReceive+0x3e>
 8001d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <xQueueReceive+0x42>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <xQueueReceive+0x44>
 8001d72:	2300      	movs	r3, #0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d10a      	bne.n	8001d8e <xQueueReceive+0x5e>
        __asm volatile
 8001d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7c:	f383 8811 	msr	BASEPRI, r3
 8001d80:	f3bf 8f6f 	isb	sy
 8001d84:	f3bf 8f4f 	dsb	sy
 8001d88:	61fb      	str	r3, [r7, #28]
    }
 8001d8a:	bf00      	nop
 8001d8c:	e7fe      	b.n	8001d8c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d8e:	f001 f913 	bl	8002fb8 <xTaskGetSchedulerState>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d102      	bne.n	8001d9e <xQueueReceive+0x6e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <xQueueReceive+0x72>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <xQueueReceive+0x74>
 8001da2:	2300      	movs	r3, #0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <xQueueReceive+0x8e>
        __asm volatile
 8001da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dac:	f383 8811 	msr	BASEPRI, r3
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	61bb      	str	r3, [r7, #24]
    }
 8001dba:	bf00      	nop
 8001dbc:	e7fe      	b.n	8001dbc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001dbe:	f001 fdc9 	bl	8003954 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d02f      	beq.n	8001e2e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001dce:	68b9      	ldr	r1, [r7, #8]
 8001dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dd2:	f000 f8bd 	bl	8001f50 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f003 fd99 	bl	8005910 <SEGGER_SYSVIEW_ShrinkId>
 8001dde:	4604      	mov	r4, r0
 8001de0:	2000      	movs	r0, #0
 8001de2:	f003 fd95 	bl	8005910 <SEGGER_SYSVIEW_ShrinkId>
 8001de6:	4602      	mov	r2, r0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2101      	movs	r1, #1
 8001dec:	9100      	str	r1, [sp, #0]
 8001dee:	4621      	mov	r1, r4
 8001df0:	205c      	movs	r0, #92	; 0x5c
 8001df2:	f003 f8d7 	bl	8004fa4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	1e5a      	subs	r2, r3, #1
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00f      	beq.n	8001e26 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	3310      	adds	r3, #16
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fec2 	bl	8002b94 <xTaskRemoveFromEventList>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d007      	beq.n	8001e26 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001e16:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <xQueueReceive+0x21c>)
 8001e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001e26:	f001 fdc5 	bl	80039b4 <vPortExitCritical>
                return pdPASS;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e08a      	b.n	8001f44 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d113      	bne.n	8001e5c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001e34:	f001 fdbe 	bl	80039b4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f003 fd68 	bl	8005910 <SEGGER_SYSVIEW_ShrinkId>
 8001e40:	4604      	mov	r4, r0
 8001e42:	2000      	movs	r0, #0
 8001e44:	f003 fd64 	bl	8005910 <SEGGER_SYSVIEW_ShrinkId>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	9100      	str	r1, [sp, #0]
 8001e50:	4621      	mov	r1, r4
 8001e52:	205c      	movs	r0, #92	; 0x5c
 8001e54:	f003 f8a6 	bl	8004fa4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e073      	b.n	8001f44 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001e62:	f107 0310 	add.w	r3, r7, #16
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 ff6c 	bl	8002d44 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001e70:	f001 fda0 	bl	80039b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001e74:	f000 fb6e 	bl	8002554 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001e78:	f001 fd6c 	bl	8003954 <vPortEnterCritical>
 8001e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e82:	b25b      	sxtb	r3, r3
 8001e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e88:	d103      	bne.n	8001e92 <xQueueReceive+0x162>
 8001e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e98:	b25b      	sxtb	r3, r3
 8001e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e9e:	d103      	bne.n	8001ea8 <xQueueReceive+0x178>
 8001ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ea8:	f001 fd84 	bl	80039b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001eac:	1d3a      	adds	r2, r7, #4
 8001eae:	f107 0310 	add.w	r3, r7, #16
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 ff5b 	bl	8002d70 <xTaskCheckForTimeOut>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d124      	bne.n	8001f0a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ec2:	f000 f8bd 	bl	8002040 <prvIsQueueEmpty>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d018      	beq.n	8001efe <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ece:	3324      	adds	r3, #36	; 0x24
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 fdf1 	bl	8002abc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001edc:	f000 f85e 	bl	8001f9c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001ee0:	f000 fb46 	bl	8002570 <xTaskResumeAll>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f47f af69 	bne.w	8001dbe <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001eec:	4b17      	ldr	r3, [pc, #92]	; (8001f4c <xQueueReceive+0x21c>)
 8001eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	f3bf 8f4f 	dsb	sy
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	e75f      	b.n	8001dbe <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f00:	f000 f84c 	bl	8001f9c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001f04:	f000 fb34 	bl	8002570 <xTaskResumeAll>
 8001f08:	e759      	b.n	8001dbe <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f0c:	f000 f846 	bl	8001f9c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001f10:	f000 fb2e 	bl	8002570 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f16:	f000 f893 	bl	8002040 <prvIsQueueEmpty>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f43f af4e 	beq.w	8001dbe <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	4618      	mov	r0, r3
 8001f26:	f003 fcf3 	bl	8005910 <SEGGER_SYSVIEW_ShrinkId>
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f003 fcef 	bl	8005910 <SEGGER_SYSVIEW_ShrinkId>
 8001f32:	4602      	mov	r2, r0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2101      	movs	r1, #1
 8001f38:	9100      	str	r1, [sp, #0]
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	205c      	movs	r0, #92	; 0x5c
 8001f3e:	f003 f831 	bl	8004fa4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001f42:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3734      	adds	r7, #52	; 0x34
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd90      	pop	{r4, r7, pc}
 8001f4c:	e000ed04 	.word	0xe000ed04

08001f50 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d018      	beq.n	8001f94 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	441a      	add	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d303      	bcc.n	8001f84 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68d9      	ldr	r1, [r3, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	6838      	ldr	r0, [r7, #0]
 8001f90:	f004 f878 	bl	8006084 <memcpy>
    }
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001fa4:	f001 fcd6 	bl	8003954 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fae:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fb0:	e011      	b.n	8001fd6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d012      	beq.n	8001fe0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3324      	adds	r3, #36	; 0x24
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 fde8 	bl	8002b94 <xTaskRemoveFromEventList>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8001fca:	f000 ff37 	bl	8002e3c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	dce9      	bgt.n	8001fb2 <prvUnlockQueue+0x16>
 8001fde:	e000      	b.n	8001fe2 <prvUnlockQueue+0x46>
                    break;
 8001fe0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	22ff      	movs	r2, #255	; 0xff
 8001fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001fea:	f001 fce3 	bl	80039b4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001fee:	f001 fcb1 	bl	8003954 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ff8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ffa:	e011      	b.n	8002020 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d012      	beq.n	800202a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3310      	adds	r3, #16
 8002008:	4618      	mov	r0, r3
 800200a:	f000 fdc3 	bl	8002b94 <xTaskRemoveFromEventList>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002014:	f000 ff12 	bl	8002e3c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002018:	7bbb      	ldrb	r3, [r7, #14]
 800201a:	3b01      	subs	r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002024:	2b00      	cmp	r3, #0
 8002026:	dce9      	bgt.n	8001ffc <prvUnlockQueue+0x60>
 8002028:	e000      	b.n	800202c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800202a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	22ff      	movs	r2, #255	; 0xff
 8002030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002034:	f001 fcbe 	bl	80039b4 <vPortExitCritical>
}
 8002038:	bf00      	nop
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002048:	f001 fc84 	bl	8003954 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002054:	2301      	movs	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	e001      	b.n	800205e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800205e:	f001 fca9 	bl	80039b4 <vPortExitCritical>

    return xReturn;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10a      	bne.n	8002096 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002084:	f383 8811 	msr	BASEPRI, r3
 8002088:	f3bf 8f6f 	isb	sy
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	60fb      	str	r3, [r7, #12]
    }
 8002092:	bf00      	nop
 8002094:	e7fe      	b.n	8002094 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d024      	beq.n	80020e6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	e01e      	b.n	80020e0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80020a2:	4a1c      	ldr	r2, [pc, #112]	; (8002114 <vQueueAddToRegistry+0xa8>)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d105      	bne.n	80020be <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <vQueueAddToRegistry+0xa8>)
 80020b8:	4413      	add	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
                    break;
 80020bc:	e013      	b.n	80020e6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <vQueueAddToRegistry+0x6e>
 80020c4:	4a13      	ldr	r2, [pc, #76]	; (8002114 <vQueueAddToRegistry+0xa8>)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d104      	bne.n	80020da <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4a0f      	ldr	r2, [pc, #60]	; (8002114 <vQueueAddToRegistry+0xa8>)
 80020d6:	4413      	add	r3, r2
 80020d8:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3301      	adds	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b07      	cmp	r3, #7
 80020e4:	d9dd      	bls.n	80020a2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00f      	beq.n	800210c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fc08 	bl	8005910 <SEGGER_SYSVIEW_ShrinkId>
 8002100:	4601      	mov	r1, r0
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	2071      	movs	r0, #113	; 0x71
 8002108:	f002 fe7c 	bl	8004e04 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800210c:	bf00      	nop
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200000d8 	.word	0x200000d8

08002118 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002128:	f001 fc14 	bl	8003954 <vPortEnterCritical>
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002132:	b25b      	sxtb	r3, r3
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d103      	bne.n	8002142 <vQueueWaitForMessageRestricted+0x2a>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002148:	b25b      	sxtb	r3, r3
 800214a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214e:	d103      	bne.n	8002158 <vQueueWaitForMessageRestricted+0x40>
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002158:	f001 fc2c 	bl	80039b4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002160:	2b00      	cmp	r3, #0
 8002162:	d106      	bne.n	8002172 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3324      	adds	r3, #36	; 0x24
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	68b9      	ldr	r1, [r7, #8]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fcc9 	bl	8002b04 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002172:	6978      	ldr	r0, [r7, #20]
 8002174:	f7ff ff12 	bl	8001f9c <prvUnlockQueue>
    }
 8002178:	bf00      	nop
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002180:	b580      	push	{r7, lr}
 8002182:	b08c      	sub	sp, #48	; 0x30
 8002184:	af04      	add	r7, sp, #16
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	4613      	mov	r3, r2
 800218e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4618      	mov	r0, r3
 8002196:	f001 fd09 	bl	8003bac <pvPortMalloc>
 800219a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d013      	beq.n	80021ca <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80021a2:	2058      	movs	r0, #88	; 0x58
 80021a4:	f001 fd02 	bl	8003bac <pvPortMalloc>
 80021a8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80021b0:	2258      	movs	r2, #88	; 0x58
 80021b2:	2100      	movs	r1, #0
 80021b4:	69f8      	ldr	r0, [r7, #28]
 80021b6:	f003 ff03 	bl	8005fc0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	631a      	str	r2, [r3, #48]	; 0x30
 80021c0:	e005      	b.n	80021ce <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80021c2:	6978      	ldr	r0, [r7, #20]
 80021c4:	f001 fdac 	bl	8003d20 <vPortFree>
 80021c8:	e001      	b.n	80021ce <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021d4:	88fa      	ldrh	r2, [r7, #6]
 80021d6:	2300      	movs	r3, #0
 80021d8:	9303      	str	r3, [sp, #12]
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	68b9      	ldr	r1, [r7, #8]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 f80e 	bl	800220c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021f0:	69f8      	ldr	r0, [r7, #28]
 80021f2:	f000 f899 	bl	8002328 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	e002      	b.n	8002202 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002200:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002202:	69bb      	ldr	r3, [r7, #24]
    }
 8002204:	4618      	mov	r0, r3
 8002206:	3720      	adds	r7, #32
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	461a      	mov	r2, r3
 8002224:	21a5      	movs	r1, #165	; 0xa5
 8002226:	f003 fecb 	bl	8005fc0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800222a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002234:	3b01      	subs	r3, #1
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	f023 0307 	bic.w	r3, r3, #7
 8002242:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <prvInitialiseNewTask+0x58>
        __asm volatile
 800224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	617b      	str	r3, [r7, #20]
    }
 8002260:	bf00      	nop
 8002262:	e7fe      	b.n	8002262 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01e      	beq.n	80022a8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	e012      	b.n	8002296 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	4413      	add	r3, r2
 8002276:	7819      	ldrb	r1, [r3, #0]
 8002278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	4413      	add	r3, r2
 800227e:	3334      	adds	r3, #52	; 0x34
 8002280:	460a      	mov	r2, r1
 8002282:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d006      	beq.n	800229e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	3301      	adds	r3, #1
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	2b09      	cmp	r3, #9
 800229a:	d9e9      	bls.n	8002270 <prvInitialiseNewTask+0x64>
 800229c:	e000      	b.n	80022a0 <prvInitialiseNewTask+0x94>
            {
                break;
 800229e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80022a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d90a      	bls.n	80022c4 <prvInitialiseNewTask+0xb8>
        __asm volatile
 80022ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b2:	f383 8811 	msr	BASEPRI, r3
 80022b6:	f3bf 8f6f 	isb	sy
 80022ba:	f3bf 8f4f 	dsb	sy
 80022be:	613b      	str	r3, [r7, #16]
    }
 80022c0:	bf00      	nop
 80022c2:	e7fe      	b.n	80022c2 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80022c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d901      	bls.n	80022ce <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80022ca:	2304      	movs	r3, #4
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80022ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80022d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	3304      	adds	r3, #4
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fbae 	bl	8001a40 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	3318      	adds	r3, #24
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff fba9 	bl	8001a40 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	f1c3 0205 	rsb	r2, r3, #5
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	69b8      	ldr	r0, [r7, #24]
 800230a:	f001 f977 	bl	80035fc <pxPortInitialiseStack>
 800230e:	4602      	mov	r2, r0
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800231e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002320:	bf00      	nop
 8002322:	3720      	adds	r7, #32
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af02      	add	r7, sp, #8
 800232e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002330:	f001 fb10 	bl	8003954 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002334:	4b4f      	ldr	r3, [pc, #316]	; (8002474 <prvAddNewTaskToReadyList+0x14c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3301      	adds	r3, #1
 800233a:	4a4e      	ldr	r2, [pc, #312]	; (8002474 <prvAddNewTaskToReadyList+0x14c>)
 800233c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800233e:	4b4e      	ldr	r3, [pc, #312]	; (8002478 <prvAddNewTaskToReadyList+0x150>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002346:	4a4c      	ldr	r2, [pc, #304]	; (8002478 <prvAddNewTaskToReadyList+0x150>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800234c:	4b49      	ldr	r3, [pc, #292]	; (8002474 <prvAddNewTaskToReadyList+0x14c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d110      	bne.n	8002376 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002354:	f000 fd96 	bl	8002e84 <prvInitialiseTaskLists>
 8002358:	e00d      	b.n	8002376 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800235a:	4b48      	ldr	r3, [pc, #288]	; (800247c <prvAddNewTaskToReadyList+0x154>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002362:	4b45      	ldr	r3, [pc, #276]	; (8002478 <prvAddNewTaskToReadyList+0x150>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	429a      	cmp	r2, r3
 800236e:	d802      	bhi.n	8002376 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002370:	4a41      	ldr	r2, [pc, #260]	; (8002478 <prvAddNewTaskToReadyList+0x150>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002376:	4b42      	ldr	r3, [pc, #264]	; (8002480 <prvAddNewTaskToReadyList+0x158>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	4a40      	ldr	r2, [pc, #256]	; (8002480 <prvAddNewTaskToReadyList+0x158>)
 800237e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002380:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <prvAddNewTaskToReadyList+0x158>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d016      	beq.n	80023bc <prvAddNewTaskToReadyList+0x94>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f003 f9f7 	bl	8005784 <SEGGER_SYSVIEW_OnTaskCreate>
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	461d      	mov	r5, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	461c      	mov	r4, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	1ae3      	subs	r3, r4, r3
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	462b      	mov	r3, r5
 80023b8:	f001 fe74 	bl	80040a4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	f003 fa64 	bl	800588c <SEGGER_SYSVIEW_OnTaskStartReady>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	2201      	movs	r2, #1
 80023ca:	409a      	lsls	r2, r3
 80023cc:	4b2d      	ldr	r3, [pc, #180]	; (8002484 <prvAddNewTaskToReadyList+0x15c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	4a2c      	ldr	r2, [pc, #176]	; (8002484 <prvAddNewTaskToReadyList+0x15c>)
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023da:	492b      	ldr	r1, [pc, #172]	; (8002488 <prvAddNewTaskToReadyList+0x160>)
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	3304      	adds	r3, #4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	60da      	str	r2, [r3, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	3204      	adds	r2, #4
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1d1a      	adds	r2, r3, #4
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <prvAddNewTaskToReadyList+0x160>)
 800241a:	441a      	add	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	615a      	str	r2, [r3, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002424:	4918      	ldr	r1, [pc, #96]	; (8002488 <prvAddNewTaskToReadyList+0x160>)
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	440b      	add	r3, r1
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	1c59      	adds	r1, r3, #1
 8002434:	4814      	ldr	r0, [pc, #80]	; (8002488 <prvAddNewTaskToReadyList+0x160>)
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4403      	add	r3, r0
 8002440:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002442:	f001 fab7 	bl	80039b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <prvAddNewTaskToReadyList+0x154>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00e      	beq.n	800246c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800244e:	4b0a      	ldr	r3, [pc, #40]	; (8002478 <prvAddNewTaskToReadyList+0x150>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002458:	429a      	cmp	r2, r3
 800245a:	d207      	bcs.n	800246c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <prvAddNewTaskToReadyList+0x164>)
 800245e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f3bf 8f4f 	dsb	sy
 8002468:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bdb0      	pop	{r4, r5, r7, pc}
 8002474:	200001f0 	.word	0x200001f0
 8002478:	20000118 	.word	0x20000118
 800247c:	200001fc 	.word	0x200001fc
 8002480:	2000020c 	.word	0x2000020c
 8002484:	200001f8 	.word	0x200001f8
 8002488:	2000011c 	.word	0x2000011c
 800248c:	e000ed04 	.word	0xe000ed04

08002490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002496:	4b27      	ldr	r3, [pc, #156]	; (8002534 <vTaskStartScheduler+0xa4>)
 8002498:	9301      	str	r3, [sp, #4]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2300      	movs	r3, #0
 80024a0:	2282      	movs	r2, #130	; 0x82
 80024a2:	4925      	ldr	r1, [pc, #148]	; (8002538 <vTaskStartScheduler+0xa8>)
 80024a4:	4825      	ldr	r0, [pc, #148]	; (800253c <vTaskStartScheduler+0xac>)
 80024a6:	f7ff fe6b 	bl	8002180 <xTaskCreate>
 80024aa:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d102      	bne.n	80024b8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80024b2:	f000 fe1f 	bl	80030f4 <xTimerCreateTimerTask>
 80024b6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d124      	bne.n	8002508 <vTaskStartScheduler+0x78>
        __asm volatile
 80024be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c2:	f383 8811 	msr	BASEPRI, r3
 80024c6:	f3bf 8f6f 	isb	sy
 80024ca:	f3bf 8f4f 	dsb	sy
 80024ce:	60bb      	str	r3, [r7, #8]
    }
 80024d0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <vTaskStartScheduler+0xb0>)
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80024da:	4b1a      	ldr	r3, [pc, #104]	; (8002544 <vTaskStartScheduler+0xb4>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <vTaskStartScheduler+0xb8>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80024e6:	4b19      	ldr	r3, [pc, #100]	; (800254c <vTaskStartScheduler+0xbc>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <vTaskStartScheduler+0xa4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d102      	bne.n	80024f8 <vTaskStartScheduler+0x68>
 80024f2:	f003 f92b 	bl	800574c <SEGGER_SYSVIEW_OnIdle>
 80024f6:	e004      	b.n	8002502 <vTaskStartScheduler+0x72>
 80024f8:	4b14      	ldr	r3, [pc, #80]	; (800254c <vTaskStartScheduler+0xbc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 f983 	bl	8005808 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002502:	f001 f907 	bl	8003714 <xPortStartScheduler>
 8002506:	e00e      	b.n	8002526 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250e:	d10a      	bne.n	8002526 <vTaskStartScheduler+0x96>
        __asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	607b      	str	r3, [r7, #4]
    }
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002526:	4b0a      	ldr	r3, [pc, #40]	; (8002550 <vTaskStartScheduler+0xc0>)
 8002528:	681b      	ldr	r3, [r3, #0]
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000214 	.word	0x20000214
 8002538:	08006590 	.word	0x08006590
 800253c:	08002e55 	.word	0x08002e55
 8002540:	20000210 	.word	0x20000210
 8002544:	200001fc 	.word	0x200001fc
 8002548:	200001f4 	.word	0x200001f4
 800254c:	20000118 	.word	0x20000118
 8002550:	2000000c 	.word	0x2000000c

08002554 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <vTaskSuspendAll+0x18>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	4a03      	ldr	r2, [pc, #12]	; (800256c <vTaskSuspendAll+0x18>)
 8002560:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	20000218 	.word	0x20000218

08002570 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800257e:	4b73      	ldr	r3, [pc, #460]	; (800274c <xTaskResumeAll+0x1dc>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <xTaskResumeAll+0x2c>
        __asm volatile
 8002586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800258a:	f383 8811 	msr	BASEPRI, r3
 800258e:	f3bf 8f6f 	isb	sy
 8002592:	f3bf 8f4f 	dsb	sy
 8002596:	607b      	str	r3, [r7, #4]
    }
 8002598:	bf00      	nop
 800259a:	e7fe      	b.n	800259a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800259c:	f001 f9da 	bl	8003954 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80025a0:	4b6a      	ldr	r3, [pc, #424]	; (800274c <xTaskResumeAll+0x1dc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	4a69      	ldr	r2, [pc, #420]	; (800274c <xTaskResumeAll+0x1dc>)
 80025a8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025aa:	4b68      	ldr	r3, [pc, #416]	; (800274c <xTaskResumeAll+0x1dc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 80c4 	bne.w	800273c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80025b4:	4b66      	ldr	r3, [pc, #408]	; (8002750 <xTaskResumeAll+0x1e0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80bf 	beq.w	800273c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025be:	e08e      	b.n	80026de <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <xTaskResumeAll+0x1e4>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	69fa      	ldr	r2, [r7, #28]
 80025d4:	6a12      	ldr	r2, [r2, #32]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	69d2      	ldr	r2, [r2, #28]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3318      	adds	r3, #24
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d103      	bne.n	80025f6 <xTaskResumeAll+0x86>
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	6a1a      	ldr	r2, [r3, #32]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	2200      	movs	r2, #0
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	68d2      	ldr	r2, [r2, #12]
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	69fa      	ldr	r2, [r7, #28]
 800261c:	6892      	ldr	r2, [r2, #8]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	3304      	adds	r3, #4
 8002628:	429a      	cmp	r2, r3
 800262a:	d103      	bne.n	8002634 <xTaskResumeAll+0xc4>
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	2200      	movs	r2, #0
 8002638:	615a      	str	r2, [r3, #20]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	1e5a      	subs	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4618      	mov	r0, r3
 8002648:	f003 f920 	bl	800588c <SEGGER_SYSVIEW_OnTaskStartReady>
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	2201      	movs	r2, #1
 8002652:	409a      	lsls	r2, r3
 8002654:	4b40      	ldr	r3, [pc, #256]	; (8002758 <xTaskResumeAll+0x1e8>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4313      	orrs	r3, r2
 800265a:	4a3f      	ldr	r2, [pc, #252]	; (8002758 <xTaskResumeAll+0x1e8>)
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002662:	493e      	ldr	r1, [pc, #248]	; (800275c <xTaskResumeAll+0x1ec>)
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3304      	adds	r3, #4
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	3204      	adds	r2, #4
 800268a:	605a      	str	r2, [r3, #4]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	1d1a      	adds	r2, r3, #4
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4a2e      	ldr	r2, [pc, #184]	; (800275c <xTaskResumeAll+0x1ec>)
 80026a2:	441a      	add	r2, r3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	615a      	str	r2, [r3, #20]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ac:	492b      	ldr	r1, [pc, #172]	; (800275c <xTaskResumeAll+0x1ec>)
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	1c59      	adds	r1, r3, #1
 80026bc:	4827      	ldr	r0, [pc, #156]	; (800275c <xTaskResumeAll+0x1ec>)
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4403      	add	r3, r0
 80026c8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ce:	4b24      	ldr	r3, [pc, #144]	; (8002760 <xTaskResumeAll+0x1f0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d302      	bcc.n	80026de <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 80026d8:	4b22      	ldr	r3, [pc, #136]	; (8002764 <xTaskResumeAll+0x1f4>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <xTaskResumeAll+0x1e4>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f47f af6c 	bne.w	80025c0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026ee:	f000 fc47 	bl	8002f80 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <xTaskResumeAll+0x1f8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d010      	beq.n	8002720 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80026fe:	f000 f859 	bl	80027b4 <xTaskIncrementTick>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002708:	4b16      	ldr	r3, [pc, #88]	; (8002764 <xTaskResumeAll+0x1f4>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3b01      	subs	r3, #1
 8002712:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f1      	bne.n	80026fe <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800271a:	4b13      	ldr	r3, [pc, #76]	; (8002768 <xTaskResumeAll+0x1f8>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <xTaskResumeAll+0x1f4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d009      	beq.n	800273c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002728:	2301      	movs	r3, #1
 800272a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800272c:	4b0f      	ldr	r3, [pc, #60]	; (800276c <xTaskResumeAll+0x1fc>)
 800272e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800273c:	f001 f93a 	bl	80039b4 <vPortExitCritical>

    return xAlreadyYielded;
 8002740:	69bb      	ldr	r3, [r7, #24]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000218 	.word	0x20000218
 8002750:	200001f0 	.word	0x200001f0
 8002754:	200001b0 	.word	0x200001b0
 8002758:	200001f8 	.word	0x200001f8
 800275c:	2000011c 	.word	0x2000011c
 8002760:	20000118 	.word	0x20000118
 8002764:	20000204 	.word	0x20000204
 8002768:	20000200 	.word	0x20000200
 800276c:	e000ed04 	.word	0xe000ed04

08002770 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <xTaskGetTickCount+0x1c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800277c:	687b      	ldr	r3, [r7, #4]
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	200001f4 	.word	0x200001f4

08002790 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002796:	f001 f9c9 	bl	8003b2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800279e:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <xTaskGetTickCountFromISR+0x20>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027a4:	683b      	ldr	r3, [r7, #0]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	200001f4 	.word	0x200001f4

080027b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027be:	4b7f      	ldr	r3, [pc, #508]	; (80029bc <xTaskIncrementTick+0x208>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 80f0 	bne.w	80029a8 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027c8:	4b7d      	ldr	r3, [pc, #500]	; (80029c0 <xTaskIncrementTick+0x20c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027d0:	4a7b      	ldr	r2, [pc, #492]	; (80029c0 <xTaskIncrementTick+0x20c>)
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d120      	bne.n	800281e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80027dc:	4b79      	ldr	r3, [pc, #484]	; (80029c4 <xTaskIncrementTick+0x210>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <xTaskIncrementTick+0x48>
        __asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	607b      	str	r3, [r7, #4]
    }
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <xTaskIncrementTick+0x46>
 80027fc:	4b71      	ldr	r3, [pc, #452]	; (80029c4 <xTaskIncrementTick+0x210>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	4b71      	ldr	r3, [pc, #452]	; (80029c8 <xTaskIncrementTick+0x214>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a6f      	ldr	r2, [pc, #444]	; (80029c4 <xTaskIncrementTick+0x210>)
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4a6f      	ldr	r2, [pc, #444]	; (80029c8 <xTaskIncrementTick+0x214>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b6e      	ldr	r3, [pc, #440]	; (80029cc <xTaskIncrementTick+0x218>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	4a6d      	ldr	r2, [pc, #436]	; (80029cc <xTaskIncrementTick+0x218>)
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	f000 fbb1 	bl	8002f80 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800281e:	4b6c      	ldr	r3, [pc, #432]	; (80029d0 <xTaskIncrementTick+0x21c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6a3a      	ldr	r2, [r7, #32]
 8002824:	429a      	cmp	r2, r3
 8002826:	f0c0 80aa 	bcc.w	800297e <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800282a:	4b66      	ldr	r3, [pc, #408]	; (80029c4 <xTaskIncrementTick+0x210>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d104      	bne.n	800283e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002834:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <xTaskIncrementTick+0x21c>)
 8002836:	f04f 32ff 	mov.w	r2, #4294967295
 800283a:	601a      	str	r2, [r3, #0]
                    break;
 800283c:	e09f      	b.n	800297e <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800283e:	4b61      	ldr	r3, [pc, #388]	; (80029c4 <xTaskIncrementTick+0x210>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800284e:	6a3a      	ldr	r2, [r7, #32]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	429a      	cmp	r2, r3
 8002854:	d203      	bcs.n	800285e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002856:	4a5e      	ldr	r2, [pc, #376]	; (80029d0 <xTaskIncrementTick+0x21c>)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800285c:	e08f      	b.n	800297e <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	68d2      	ldr	r2, [r2, #12]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	6892      	ldr	r2, [r2, #8]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	3304      	adds	r3, #4
 8002880:	429a      	cmp	r2, r3
 8002882:	d103      	bne.n	800288c <xTaskIncrementTick+0xd8>
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2200      	movs	r2, #0
 8002890:	615a      	str	r2, [r3, #20]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	1e5a      	subs	r2, r3, #1
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01e      	beq.n	80028e2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	6a12      	ldr	r2, [r2, #32]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	69d2      	ldr	r2, [r2, #28]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	3318      	adds	r3, #24
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d103      	bne.n	80028d2 <xTaskIncrementTick+0x11e>
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	6a1a      	ldr	r2, [r3, #32]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	2200      	movs	r2, #0
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	1e5a      	subs	r2, r3, #1
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f002 ffd1 	bl	800588c <SEGGER_SYSVIEW_OnTaskStartReady>
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	2201      	movs	r2, #1
 80028f0:	409a      	lsls	r2, r3
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <xTaskIncrementTick+0x220>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	4a36      	ldr	r2, [pc, #216]	; (80029d4 <xTaskIncrementTick+0x220>)
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002900:	4935      	ldr	r1, [pc, #212]	; (80029d8 <xTaskIncrementTick+0x224>)
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3304      	adds	r3, #4
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	60da      	str	r2, [r3, #12]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	3204      	adds	r2, #4
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	1d1a      	adds	r2, r3, #4
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <xTaskIncrementTick+0x224>)
 8002940:	441a      	add	r2, r3
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	615a      	str	r2, [r3, #20]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294a:	4923      	ldr	r1, [pc, #140]	; (80029d8 <xTaskIncrementTick+0x224>)
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	1c59      	adds	r1, r3, #1
 800295a:	481f      	ldr	r0, [pc, #124]	; (80029d8 <xTaskIncrementTick+0x224>)
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4403      	add	r3, r0
 8002966:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <xTaskIncrementTick+0x228>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	429a      	cmp	r2, r3
 8002974:	f67f af59 	bls.w	800282a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002978:	2301      	movs	r3, #1
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800297c:	e755      	b.n	800282a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <xTaskIncrementTick+0x228>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002984:	4914      	ldr	r1, [pc, #80]	; (80029d8 <xTaskIncrementTick+0x224>)
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d901      	bls.n	800299a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002996:	2301      	movs	r3, #1
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <xTaskIncrementTick+0x22c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d007      	beq.n	80029b2 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80029a2:	2301      	movs	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
 80029a6:	e004      	b.n	80029b2 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <xTaskIncrementTick+0x230>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	4a0d      	ldr	r2, [pc, #52]	; (80029e4 <xTaskIncrementTick+0x230>)
 80029b0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3728      	adds	r7, #40	; 0x28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000218 	.word	0x20000218
 80029c0:	200001f4 	.word	0x200001f4
 80029c4:	200001a8 	.word	0x200001a8
 80029c8:	200001ac 	.word	0x200001ac
 80029cc:	20000208 	.word	0x20000208
 80029d0:	20000210 	.word	0x20000210
 80029d4:	200001f8 	.word	0x200001f8
 80029d8:	2000011c 	.word	0x2000011c
 80029dc:	20000118 	.word	0x20000118
 80029e0:	20000204 	.word	0x20000204
 80029e4:	20000200 	.word	0x20000200

080029e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80029ee:	4b2d      	ldr	r3, [pc, #180]	; (8002aa4 <vTaskSwitchContext+0xbc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <vTaskSwitchContext+0xc0>)
 80029f8:	2201      	movs	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80029fc:	e04d      	b.n	8002a9a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80029fe:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <vTaskSwitchContext+0xc0>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a04:	4b29      	ldr	r3, [pc, #164]	; (8002aac <vTaskSwitchContext+0xc4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002a12:	7afb      	ldrb	r3, [r7, #11]
 8002a14:	f1c3 031f 	rsb	r3, r3, #31
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	4925      	ldr	r1, [pc, #148]	; (8002ab0 <vTaskSwitchContext+0xc8>)
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	607b      	str	r3, [r7, #4]
    }
 8002a40:	bf00      	nop
 8002a42:	e7fe      	b.n	8002a42 <vTaskSwitchContext+0x5a>
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <vTaskSwitchContext+0xc8>)
 8002a50:	4413      	add	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	3308      	adds	r3, #8
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d104      	bne.n	8002a74 <vTaskSwitchContext+0x8c>
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <vTaskSwitchContext+0xcc>)
 8002a7c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <vTaskSwitchContext+0xcc>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <vTaskSwitchContext+0xd0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d102      	bne.n	8002a90 <vTaskSwitchContext+0xa8>
 8002a8a:	f002 fe5f 	bl	800574c <SEGGER_SYSVIEW_OnIdle>
}
 8002a8e:	e004      	b.n	8002a9a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <vTaskSwitchContext+0xcc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 feb7 	bl	8005808 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002a9a:	bf00      	nop
 8002a9c:	3718      	adds	r7, #24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	20000218 	.word	0x20000218
 8002aa8:	20000204 	.word	0x20000204
 8002aac:	200001f8 	.word	0x200001f8
 8002ab0:	2000011c 	.word	0x2000011c
 8002ab4:	20000118 	.word	0x20000118
 8002ab8:	20000214 	.word	0x20000214

08002abc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad0:	f383 8811 	msr	BASEPRI, r3
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	60fb      	str	r3, [r7, #12]
    }
 8002ade:	bf00      	nop
 8002ae0:	e7fe      	b.n	8002ae0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <vTaskPlaceOnEventList+0x44>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3318      	adds	r3, #24
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe ffb5 	bl	8001a5a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002af0:	2101      	movs	r1, #1
 8002af2:	6838      	ldr	r0, [r7, #0]
 8002af4:	f000 fa7e 	bl	8002ff4 <prvAddCurrentTaskToDelayedList>
}
 8002af8:	bf00      	nop
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000118 	.word	0x20000118

08002b04 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10a      	bne.n	8002b2c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1a:	f383 8811 	msr	BASEPRI, r3
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	613b      	str	r3, [r7, #16]
    }
 8002b28:	bf00      	nop
 8002b2a:	e7fe      	b.n	8002b2a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	4b17      	ldr	r3, [pc, #92]	; (8002b90 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	61da      	str	r2, [r3, #28]
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	6892      	ldr	r2, [r2, #8]
 8002b42:	621a      	str	r2, [r3, #32]
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	3218      	adds	r2, #24
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f103 0218 	add.w	r2, r3, #24
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <vTaskPlaceOnEventListRestricted+0x8c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002b74:	f04f 33ff 	mov.w	r3, #4294967295
 8002b78:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002b7a:	2024      	movs	r0, #36	; 0x24
 8002b7c:	f002 f8e8 	bl	8004d50 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	68b8      	ldr	r0, [r7, #8]
 8002b84:	f000 fa36 	bl	8002ff4 <prvAddCurrentTaskToDelayedList>
    }
 8002b88:	bf00      	nop
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000118 	.word	0x20000118

08002b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08a      	sub	sp, #40	; 0x28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bae:	f383 8811 	msr	BASEPRI, r3
 8002bb2:	f3bf 8f6f 	isb	sy
 8002bb6:	f3bf 8f4f 	dsb	sy
 8002bba:	60fb      	str	r3, [r7, #12]
    }
 8002bbc:	bf00      	nop
 8002bbe:	e7fe      	b.n	8002bbe <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	6a3a      	ldr	r2, [r7, #32]
 8002bcc:	6a12      	ldr	r2, [r2, #32]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	6a3a      	ldr	r2, [r7, #32]
 8002bd6:	69d2      	ldr	r2, [r2, #28]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	3318      	adds	r3, #24
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d103      	bne.n	8002bee <xTaskRemoveFromEventList+0x5a>
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	6a1a      	ldr	r2, [r3, #32]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	1e5a      	subs	r2, r3, #1
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bfe:	4b4b      	ldr	r3, [pc, #300]	; (8002d2c <xTaskRemoveFromEventList+0x198>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d162      	bne.n	8002ccc <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	6a3a      	ldr	r2, [r7, #32]
 8002c12:	68d2      	ldr	r2, [r2, #12]
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	6a3a      	ldr	r2, [r7, #32]
 8002c1c:	6892      	ldr	r2, [r2, #8]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	3304      	adds	r3, #4
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d103      	bne.n	8002c34 <xTaskRemoveFromEventList+0xa0>
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	605a      	str	r2, [r3, #4]
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	2200      	movs	r2, #0
 8002c38:	615a      	str	r2, [r3, #20]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	1e5a      	subs	r2, r3, #1
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 fe20 	bl	800588c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <xTaskRemoveFromEventList+0x19c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	4a35      	ldr	r2, [pc, #212]	; (8002d30 <xTaskRemoveFromEventList+0x19c>)
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c62:	4934      	ldr	r1, [pc, #208]	; (8002d34 <xTaskRemoveFromEventList+0x1a0>)
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	3304      	adds	r3, #4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	60da      	str	r2, [r3, #12]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	6a3a      	ldr	r2, [r7, #32]
 8002c88:	3204      	adds	r2, #4
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
 8002c8e:	1d1a      	adds	r2, r3, #4
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4a24      	ldr	r2, [pc, #144]	; (8002d34 <xTaskRemoveFromEventList+0x1a0>)
 8002ca2:	441a      	add	r2, r3
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	615a      	str	r2, [r3, #20]
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cac:	4921      	ldr	r1, [pc, #132]	; (8002d34 <xTaskRemoveFromEventList+0x1a0>)
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1c59      	adds	r1, r3, #1
 8002cbc:	481d      	ldr	r0, [pc, #116]	; (8002d34 <xTaskRemoveFromEventList+0x1a0>)
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4403      	add	r3, r0
 8002cc8:	6019      	str	r1, [r3, #0]
 8002cca:	e01b      	b.n	8002d04 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <xTaskRemoveFromEventList+0x1a4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	61da      	str	r2, [r3, #28]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	621a      	str	r2, [r3, #32]
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	6a3a      	ldr	r2, [r7, #32]
 8002ce6:	3218      	adds	r2, #24
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f103 0218 	add.w	r2, r3, #24
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	6a3b      	ldr	r3, [r7, #32]
 8002cf6:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <xTaskRemoveFromEventList+0x1a4>)
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <xTaskRemoveFromEventList+0x1a4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <xTaskRemoveFromEventList+0x1a4>)
 8002d02:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <xTaskRemoveFromEventList+0x1a8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d905      	bls.n	8002d1e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <xTaskRemoveFromEventList+0x1ac>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	e001      	b.n	8002d22 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3728      	adds	r7, #40	; 0x28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	20000218 	.word	0x20000218
 8002d30:	200001f8 	.word	0x200001f8
 8002d34:	2000011c 	.word	0x2000011c
 8002d38:	200001b0 	.word	0x200001b0
 8002d3c:	20000118 	.word	0x20000118
 8002d40:	20000204 	.word	0x20000204

08002d44 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d4c:	4b06      	ldr	r3, [pc, #24]	; (8002d68 <vTaskInternalSetTimeOutState+0x24>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <vTaskInternalSetTimeOutState+0x28>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	605a      	str	r2, [r3, #4]
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	20000208 	.word	0x20000208
 8002d6c:	200001f4 	.word	0x200001f4

08002d70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10a      	bne.n	8002d96 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	613b      	str	r3, [r7, #16]
    }
 8002d92:	bf00      	nop
 8002d94:	e7fe      	b.n	8002d94 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	60fb      	str	r3, [r7, #12]
    }
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002db2:	f000 fdcf 	bl	8003954 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <xTaskCheckForTimeOut+0xc4>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dce:	d102      	bne.n	8002dd6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	e026      	b.n	8002e24 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <xTaskCheckForTimeOut+0xc8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d00a      	beq.n	8002df8 <xTaskCheckForTimeOut+0x88>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d305      	bcc.n	8002df8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002dec:	2301      	movs	r3, #1
 8002dee:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e015      	b.n	8002e24 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d20b      	bcs.n	8002e1a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	1ad2      	subs	r2, r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ff98 	bl	8002d44 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	e004      	b.n	8002e24 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002e20:	2301      	movs	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002e24:	f000 fdc6 	bl	80039b4 <vPortExitCritical>

    return xReturn;
 8002e28:	69fb      	ldr	r3, [r7, #28]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3720      	adds	r7, #32
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200001f4 	.word	0x200001f4
 8002e38:	20000208 	.word	0x20000208

08002e3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <vTaskMissedYield+0x14>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	20000204 	.word	0x20000204

08002e54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002e5c:	f000 f852 	bl	8002f04 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <prvIdleTask+0x28>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d9f9      	bls.n	8002e5c <prvIdleTask+0x8>
            {
                taskYIELD();
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <prvIdleTask+0x2c>)
 8002e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002e78:	e7f0      	b.n	8002e5c <prvIdleTask+0x8>
 8002e7a:	bf00      	nop
 8002e7c:	2000011c 	.word	0x2000011c
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	e00c      	b.n	8002eaa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <prvInitialiseTaskLists+0x60>)
 8002e9c:	4413      	add	r3, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe fdae 	bl	8001a00 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	607b      	str	r3, [r7, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d9ef      	bls.n	8002e90 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002eb0:	480d      	ldr	r0, [pc, #52]	; (8002ee8 <prvInitialiseTaskLists+0x64>)
 8002eb2:	f7fe fda5 	bl	8001a00 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002eb6:	480d      	ldr	r0, [pc, #52]	; (8002eec <prvInitialiseTaskLists+0x68>)
 8002eb8:	f7fe fda2 	bl	8001a00 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ebc:	480c      	ldr	r0, [pc, #48]	; (8002ef0 <prvInitialiseTaskLists+0x6c>)
 8002ebe:	f7fe fd9f 	bl	8001a00 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002ec2:	480c      	ldr	r0, [pc, #48]	; (8002ef4 <prvInitialiseTaskLists+0x70>)
 8002ec4:	f7fe fd9c 	bl	8001a00 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002ec8:	480b      	ldr	r0, [pc, #44]	; (8002ef8 <prvInitialiseTaskLists+0x74>)
 8002eca:	f7fe fd99 	bl	8001a00 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	; (8002efc <prvInitialiseTaskLists+0x78>)
 8002ed0:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <prvInitialiseTaskLists+0x64>)
 8002ed2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	; (8002f00 <prvInitialiseTaskLists+0x7c>)
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <prvInitialiseTaskLists+0x68>)
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2000011c 	.word	0x2000011c
 8002ee8:	20000180 	.word	0x20000180
 8002eec:	20000194 	.word	0x20000194
 8002ef0:	200001b0 	.word	0x200001b0
 8002ef4:	200001c4 	.word	0x200001c4
 8002ef8:	200001dc 	.word	0x200001dc
 8002efc:	200001a8 	.word	0x200001a8
 8002f00:	200001ac 	.word	0x200001ac

08002f04 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f0a:	e019      	b.n	8002f40 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002f0c:	f000 fd22 	bl	8003954 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f10:	4b10      	ldr	r3, [pc, #64]	; (8002f54 <prvCheckTasksWaitingTermination+0x50>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fe fdd5 	bl	8001acc <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <prvCheckTasksWaitingTermination+0x54>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <prvCheckTasksWaitingTermination+0x54>)
 8002f2a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <prvCheckTasksWaitingTermination+0x58>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <prvCheckTasksWaitingTermination+0x58>)
 8002f34:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8002f36:	f000 fd3d 	bl	80039b4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f810 	bl	8002f60 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <prvCheckTasksWaitingTermination+0x58>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e1      	bne.n	8002f0c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	200001c4 	.word	0x200001c4
 8002f58:	200001f0 	.word	0x200001f0
 8002f5c:	200001d8 	.word	0x200001d8

08002f60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 fed7 	bl	8003d20 <vPortFree>
            vPortFree( pxTCB );
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fed4 	bl	8003d20 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <prvResetNextTaskUnblockTime+0x30>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d104      	bne.n	8002f98 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <prvResetNextTaskUnblockTime+0x34>)
 8002f90:	f04f 32ff 	mov.w	r2, #4294967295
 8002f94:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f96:	e005      	b.n	8002fa4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <prvResetNextTaskUnblockTime+0x30>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <prvResetNextTaskUnblockTime+0x34>)
 8002fa2:	6013      	str	r3, [r2, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	200001a8 	.word	0x200001a8
 8002fb4:	20000210 	.word	0x20000210

08002fb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <xTaskGetSchedulerState+0x34>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	e008      	b.n	8002fde <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fcc:	4b08      	ldr	r3, [pc, #32]	; (8002ff0 <xTaskGetSchedulerState+0x38>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	e001      	b.n	8002fde <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002fde:	687b      	ldr	r3, [r7, #4]
    }
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	200001fc 	.word	0x200001fc
 8002ff0:	20000218 	.word	0x20000218

08002ff4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002ffe:	4b36      	ldr	r3, [pc, #216]	; (80030d8 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003004:	4b35      	ldr	r3, [pc, #212]	; (80030dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3304      	adds	r3, #4
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fd5e 	bl	8001acc <uxListRemove>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10b      	bne.n	800302e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003016:	4b31      	ldr	r3, [pc, #196]	; (80030dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	2201      	movs	r2, #1
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	4b2e      	ldr	r3, [pc, #184]	; (80030e0 <prvAddCurrentTaskToDelayedList+0xec>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4013      	ands	r3, r2
 800302a:	4a2d      	ldr	r2, [pc, #180]	; (80030e0 <prvAddCurrentTaskToDelayedList+0xec>)
 800302c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d124      	bne.n	8003080 <prvAddCurrentTaskToDelayedList+0x8c>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d021      	beq.n	8003080 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800303c:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	4b26      	ldr	r3, [pc, #152]	; (80030dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	4b24      	ldr	r3, [pc, #144]	; (80030dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	6892      	ldr	r2, [r2, #8]
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	4b21      	ldr	r3, [pc, #132]	; (80030dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	3204      	adds	r2, #4
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <prvAddCurrentTaskToDelayedList+0xe8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	1d1a      	adds	r2, r3, #4
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	609a      	str	r2, [r3, #8]
 800306a:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003070:	615a      	str	r2, [r3, #20]
 8003072:	4b1c      	ldr	r3, [pc, #112]	; (80030e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3301      	adds	r3, #1
 8003078:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800307e:	e026      	b.n	80030ce <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	429a      	cmp	r2, r3
 8003096:	d209      	bcs.n	80030ac <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003098:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b0f      	ldr	r3, [pc, #60]	; (80030dc <prvAddCurrentTaskToDelayedList+0xe8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3304      	adds	r3, #4
 80030a2:	4619      	mov	r1, r3
 80030a4:	4610      	mov	r0, r2
 80030a6:	f7fe fcd8 	bl	8001a5a <vListInsert>
}
 80030aa:	e010      	b.n	80030ce <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030ac:	4b0f      	ldr	r3, [pc, #60]	; (80030ec <prvAddCurrentTaskToDelayedList+0xf8>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <prvAddCurrentTaskToDelayedList+0xe8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7fe fcce 	bl	8001a5a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80030be:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d202      	bcs.n	80030ce <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80030c8:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <prvAddCurrentTaskToDelayedList+0xfc>)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6013      	str	r3, [r2, #0]
}
 80030ce:	bf00      	nop
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200001f4 	.word	0x200001f4
 80030dc:	20000118 	.word	0x20000118
 80030e0:	200001f8 	.word	0x200001f8
 80030e4:	200001dc 	.word	0x200001dc
 80030e8:	200001ac 	.word	0x200001ac
 80030ec:	200001a8 	.word	0x200001a8
 80030f0:	20000210 	.word	0x20000210

080030f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80030fe:	f000 fa47 	bl	8003590 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003102:	4b11      	ldr	r3, [pc, #68]	; (8003148 <xTimerCreateTimerTask+0x54>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00b      	beq.n	8003122 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800310a:	4b10      	ldr	r3, [pc, #64]	; (800314c <xTimerCreateTimerTask+0x58>)
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	2302      	movs	r3, #2
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	2300      	movs	r3, #0
 8003114:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003118:	490d      	ldr	r1, [pc, #52]	; (8003150 <xTimerCreateTimerTask+0x5c>)
 800311a:	480e      	ldr	r0, [pc, #56]	; (8003154 <xTimerCreateTimerTask+0x60>)
 800311c:	f7ff f830 	bl	8002180 <xTaskCreate>
 8003120:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	603b      	str	r3, [r7, #0]
    }
 800313a:	bf00      	nop
 800313c:	e7fe      	b.n	800313c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800313e:	687b      	ldr	r3, [r7, #4]
    }
 8003140:	4618      	mov	r0, r3
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	2000024c 	.word	0x2000024c
 800314c:	20000250 	.word	0x20000250
 8003150:	08006598 	.word	0x08006598
 8003154:	080031fd 	.word	0x080031fd

08003158 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003164:	e008      	b.n	8003178 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	4413      	add	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	699a      	ldr	r2, [r3, #24]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	18d1      	adds	r1, r2, r3
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f8dd 	bl	8003344 <prvInsertTimerInActiveList>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ea      	bne.n	8003166 <prvReloadTimer+0xe>
        }
    }
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <prvProcessExpiredTimer+0x5c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fe fc89 	bl	8001acc <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7ff ffc3 	bl	8003158 <prvReloadTimer>
 80031d2:	e008      	b.n	80031e6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031da:	f023 0301 	bic.w	r3, r3, #1
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	4798      	blx	r3
    }
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000244 	.word	0x20000244

080031fc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003204:	f107 0308 	add.w	r3, r7, #8
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f857 	bl	80032bc <prvGetNextExpireTime>
 800320e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4619      	mov	r1, r3
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f803 	bl	8003220 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800321a:	f000 f8d5 	bl	80033c8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800321e:	e7f1      	b.n	8003204 <prvTimerTask+0x8>

08003220 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800322a:	f7ff f993 	bl	8002554 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800322e:	f107 0308 	add.w	r3, r7, #8
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f866 	bl	8003304 <prvSampleTimeNow>
 8003238:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d130      	bne.n	80032a2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <prvProcessTimerOrBlockTask+0x3c>
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	429a      	cmp	r2, r3
 800324c:	d806      	bhi.n	800325c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800324e:	f7ff f98f 	bl	8002570 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003252:	68f9      	ldr	r1, [r7, #12]
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ffa1 	bl	800319c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800325a:	e024      	b.n	80032a6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003262:	4b13      	ldr	r3, [pc, #76]	; (80032b0 <prvProcessTimerOrBlockTask+0x90>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <prvProcessTimerOrBlockTask+0x50>
 800326c:	2301      	movs	r3, #1
 800326e:	e000      	b.n	8003272 <prvProcessTimerOrBlockTask+0x52>
 8003270:	2300      	movs	r3, #0
 8003272:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <prvProcessTimerOrBlockTask+0x94>)
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	4619      	mov	r1, r3
 8003282:	f7fe ff49 	bl	8002118 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003286:	f7ff f973 	bl	8002570 <xTaskResumeAll>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10a      	bne.n	80032a6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003290:	4b09      	ldr	r3, [pc, #36]	; (80032b8 <prvProcessTimerOrBlockTask+0x98>)
 8003292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	f3bf 8f6f 	isb	sy
    }
 80032a0:	e001      	b.n	80032a6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80032a2:	f7ff f965 	bl	8002570 <xTaskResumeAll>
    }
 80032a6:	bf00      	nop
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	20000248 	.word	0x20000248
 80032b4:	2000024c 	.word	0x2000024c
 80032b8:	e000ed04 	.word	0xe000ed04

080032bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80032c4:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <prvGetNextExpireTime+0x44>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <prvGetNextExpireTime+0x16>
 80032ce:	2201      	movs	r2, #1
 80032d0:	e000      	b.n	80032d4 <prvGetNextExpireTime+0x18>
 80032d2:	2200      	movs	r2, #0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80032e0:	4b07      	ldr	r3, [pc, #28]	; (8003300 <prvGetNextExpireTime+0x44>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e001      	b.n	80032f0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80032f0:	68fb      	ldr	r3, [r7, #12]
    }
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000244 	.word	0x20000244

08003304 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800330c:	f7ff fa30 	bl	8002770 <xTaskGetTickCount>
 8003310:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003312:	4b0b      	ldr	r3, [pc, #44]	; (8003340 <prvSampleTimeNow+0x3c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	429a      	cmp	r2, r3
 800331a:	d205      	bcs.n	8003328 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800331c:	f000 f912 	bl	8003544 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	e002      	b.n	800332e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <prvSampleTimeNow+0x3c>)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003334:	68fb      	ldr	r3, [r7, #12]
    }
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20000254 	.word	0x20000254

08003344 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	429a      	cmp	r2, r3
 8003368:	d812      	bhi.n	8003390 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	1ad2      	subs	r2, r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	429a      	cmp	r2, r3
 8003376:	d302      	bcc.n	800337e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003378:	2301      	movs	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	e01b      	b.n	80033b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <prvInsertTimerInActiveList+0x7c>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3304      	adds	r3, #4
 8003386:	4619      	mov	r1, r3
 8003388:	4610      	mov	r0, r2
 800338a:	f7fe fb66 	bl	8001a5a <vListInsert>
 800338e:	e012      	b.n	80033b6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d206      	bcs.n	80033a6 <prvInsertTimerInActiveList+0x62>
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d302      	bcc.n	80033a6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e007      	b.n	80033b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80033a6:	4b07      	ldr	r3, [pc, #28]	; (80033c4 <prvInsertTimerInActiveList+0x80>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f7fe fb52 	bl	8001a5a <vListInsert>
            }
        }

        return xProcessTimerNow;
 80033b6:	697b      	ldr	r3, [r7, #20]
    }
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000248 	.word	0x20000248
 80033c4:	20000244 	.word	0x20000244

080033c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80033ce:	e0a6      	b.n	800351e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f2c0 80a3 	blt.w	800351e <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d004      	beq.n	80033ee <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	3304      	adds	r3, #4
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fe fb6f 	bl	8001acc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff87 	bl	8003304 <prvSampleTimeNow>
 80033f6:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	f200 808d 	bhi.w	800351c <prvProcessReceivedCommands+0x154>
 8003402:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <prvProcessReceivedCommands+0x40>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	0800342d 	.word	0x0800342d
 800340c:	0800342d 	.word	0x0800342d
 8003410:	08003495 	.word	0x08003495
 8003414:	080034a9 	.word	0x080034a9
 8003418:	080034f3 	.word	0x080034f3
 800341c:	0800342d 	.word	0x0800342d
 8003420:	0800342d 	.word	0x0800342d
 8003424:	08003495 	.word	0x08003495
 8003428:	080034a9 	.word	0x080034a9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	b2da      	uxtb	r2, r3
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	18d1      	adds	r1, r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	69f8      	ldr	r0, [r7, #28]
 800344c:	f7ff ff7a 	bl	8003344 <prvInsertTimerInActiveList>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d063      	beq.n	800351e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d009      	beq.n	8003478 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	4413      	add	r3, r2
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4619      	mov	r1, r3
 8003470:	69f8      	ldr	r0, [r7, #28]
 8003472:	f7ff fe71 	bl	8003158 <prvReloadTimer>
 8003476:	e008      	b.n	800348a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	b2da      	uxtb	r2, r3
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	69f8      	ldr	r0, [r7, #28]
 8003490:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003492:	e044      	b.n	800351e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80034a6:	e03a      	b.n	800351e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <prvProcessReceivedCommands+0x116>
        __asm volatile
 80034c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034cc:	f383 8811 	msr	BASEPRI, r3
 80034d0:	f3bf 8f6f 	isb	sy
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	617b      	str	r3, [r7, #20]
    }
 80034da:	bf00      	nop
 80034dc:	e7fe      	b.n	80034dc <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	18d1      	adds	r1, r2, r3
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	69f8      	ldr	r0, [r7, #28]
 80034ec:	f7ff ff2a 	bl	8003344 <prvInsertTimerInActiveList>
                        break;
 80034f0:	e015      	b.n	800351e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d103      	bne.n	8003508 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003500:	69f8      	ldr	r0, [r7, #28]
 8003502:	f000 fc0d 	bl	8003d20 <vPortFree>
 8003506:	e00a      	b.n	800351e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800351a:	e000      	b.n	800351e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 800351c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <prvProcessReceivedCommands+0x178>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f107 0108 	add.w	r1, r7, #8
 8003526:	2200      	movs	r2, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fc01 	bl	8001d30 <xQueueReceive>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	f47f af4d 	bne.w	80033d0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	3720      	adds	r7, #32
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	2000024c 	.word	0x2000024c

08003544 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800354a:	e009      	b.n	8003560 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800354c:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <prvSwitchTimerLists+0x44>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003556:	f04f 31ff 	mov.w	r1, #4294967295
 800355a:	6838      	ldr	r0, [r7, #0]
 800355c:	f7ff fe1e 	bl	800319c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <prvSwitchTimerLists+0x44>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <prvSwitchTimerLists+0x44>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <prvSwitchTimerLists+0x48>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a04      	ldr	r2, [pc, #16]	; (8003588 <prvSwitchTimerLists+0x44>)
 8003576:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003578:	4a04      	ldr	r2, [pc, #16]	; (800358c <prvSwitchTimerLists+0x48>)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6013      	str	r3, [r2, #0]
    }
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000244 	.word	0x20000244
 800358c:	20000248 	.word	0x20000248

08003590 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003594:	f000 f9de 	bl	8003954 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003598:	4b12      	ldr	r3, [pc, #72]	; (80035e4 <prvCheckForValidListAndQueue+0x54>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11d      	bne.n	80035dc <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80035a0:	4811      	ldr	r0, [pc, #68]	; (80035e8 <prvCheckForValidListAndQueue+0x58>)
 80035a2:	f7fe fa2d 	bl	8001a00 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80035a6:	4811      	ldr	r0, [pc, #68]	; (80035ec <prvCheckForValidListAndQueue+0x5c>)
 80035a8:	f7fe fa2a 	bl	8001a00 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80035ac:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <prvCheckForValidListAndQueue+0x60>)
 80035ae:	4a0e      	ldr	r2, [pc, #56]	; (80035e8 <prvCheckForValidListAndQueue+0x58>)
 80035b0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <prvCheckForValidListAndQueue+0x64>)
 80035b4:	4a0d      	ldr	r2, [pc, #52]	; (80035ec <prvCheckForValidListAndQueue+0x5c>)
 80035b6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80035b8:	2200      	movs	r2, #0
 80035ba:	210c      	movs	r1, #12
 80035bc:	200a      	movs	r0, #10
 80035be:	f7fe fb3f 	bl	8001c40 <xQueueGenericCreate>
 80035c2:	4603      	mov	r3, r0
 80035c4:	4a07      	ldr	r2, [pc, #28]	; (80035e4 <prvCheckForValidListAndQueue+0x54>)
 80035c6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <prvCheckForValidListAndQueue+0x54>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <prvCheckForValidListAndQueue+0x54>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4908      	ldr	r1, [pc, #32]	; (80035f8 <prvCheckForValidListAndQueue+0x68>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe fd48 	bl	800206c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80035dc:	f000 f9ea 	bl	80039b4 <vPortExitCritical>
    }
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	2000024c 	.word	0x2000024c
 80035e8:	2000021c 	.word	0x2000021c
 80035ec:	20000230 	.word	0x20000230
 80035f0:	20000244 	.word	0x20000244
 80035f4:	20000248 	.word	0x20000248
 80035f8:	080065a0 	.word	0x080065a0

080035fc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3b04      	subs	r3, #4
 800360c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003614:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3b04      	subs	r3, #4
 800361a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f023 0201 	bic.w	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3b04      	subs	r3, #4
 800362a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800362c:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <pxPortInitialiseStack+0x64>)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	3b14      	subs	r3, #20
 8003636:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3b04      	subs	r3, #4
 8003642:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f06f 0202 	mvn.w	r2, #2
 800364a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3b20      	subs	r3, #32
 8003650:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003652:	68fb      	ldr	r3, [r7, #12]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	08003665 	.word	0x08003665

08003664 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800366a:	2300      	movs	r3, #0
 800366c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800366e:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <prvTaskExitError+0x54>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d00a      	beq.n	800368e <prvTaskExitError+0x2a>
        __asm volatile
 8003678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	60fb      	str	r3, [r7, #12]
    }
 800368a:	bf00      	nop
 800368c:	e7fe      	b.n	800368c <prvTaskExitError+0x28>
        __asm volatile
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	f383 8811 	msr	BASEPRI, r3
 8003696:	f3bf 8f6f 	isb	sy
 800369a:	f3bf 8f4f 	dsb	sy
 800369e:	60bb      	str	r3, [r7, #8]
    }
 80036a0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80036a2:	bf00      	nop
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0fc      	beq.n	80036a4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80036aa:	bf00      	nop
 80036ac:	bf00      	nop
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	20000010 	.word	0x20000010
 80036bc:	00000000 	.word	0x00000000

080036c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <pxCurrentTCBConst2>)
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	6808      	ldr	r0, [r1, #0]
 80036c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ca:	f380 8809 	msr	PSP, r0
 80036ce:	f3bf 8f6f 	isb	sy
 80036d2:	f04f 0000 	mov.w	r0, #0
 80036d6:	f380 8811 	msr	BASEPRI, r0
 80036da:	4770      	bx	lr
 80036dc:	f3af 8000 	nop.w

080036e0 <pxCurrentTCBConst2>:
 80036e0:	20000118 	.word	0x20000118
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80036e4:	bf00      	nop
 80036e6:	bf00      	nop

080036e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80036e8:	4808      	ldr	r0, [pc, #32]	; (800370c <prvPortStartFirstTask+0x24>)
 80036ea:	6800      	ldr	r0, [r0, #0]
 80036ec:	6800      	ldr	r0, [r0, #0]
 80036ee:	f380 8808 	msr	MSP, r0
 80036f2:	f04f 0000 	mov.w	r0, #0
 80036f6:	f380 8814 	msr	CONTROL, r0
 80036fa:	b662      	cpsie	i
 80036fc:	b661      	cpsie	f
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	f3bf 8f6f 	isb	sy
 8003706:	df00      	svc	0
 8003708:	bf00      	nop
 800370a:	0000      	.short	0x0000
 800370c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop

08003714 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800371a:	4b46      	ldr	r3, [pc, #280]	; (8003834 <xPortStartScheduler+0x120>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a46      	ldr	r2, [pc, #280]	; (8003838 <xPortStartScheduler+0x124>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d10a      	bne.n	800373a <xPortStartScheduler+0x26>
        __asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	613b      	str	r3, [r7, #16]
    }
 8003736:	bf00      	nop
 8003738:	e7fe      	b.n	8003738 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800373a:	4b3e      	ldr	r3, [pc, #248]	; (8003834 <xPortStartScheduler+0x120>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a3f      	ldr	r2, [pc, #252]	; (800383c <xPortStartScheduler+0x128>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d10a      	bne.n	800375a <xPortStartScheduler+0x46>
        __asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	60fb      	str	r3, [r7, #12]
    }
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <xPortStartScheduler+0x12c>)
 800375c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b2db      	uxtb	r3, r3
 8003764:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	22ff      	movs	r2, #255	; 0xff
 800376a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <xPortStartScheduler+0x130>)
 8003780:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003782:	4b31      	ldr	r3, [pc, #196]	; (8003848 <xPortStartScheduler+0x134>)
 8003784:	2207      	movs	r2, #7
 8003786:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003788:	e009      	b.n	800379e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800378a:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <xPortStartScheduler+0x134>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3b01      	subs	r3, #1
 8003790:	4a2d      	ldr	r2, [pc, #180]	; (8003848 <xPortStartScheduler+0x134>)
 8003792:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	b2db      	uxtb	r3, r3
 800379c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a6:	2b80      	cmp	r3, #128	; 0x80
 80037a8:	d0ef      	beq.n	800378a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80037aa:	4b27      	ldr	r3, [pc, #156]	; (8003848 <xPortStartScheduler+0x134>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f1c3 0307 	rsb	r3, r3, #7
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d00a      	beq.n	80037cc <xPortStartScheduler+0xb8>
        __asm volatile
 80037b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	60bb      	str	r3, [r7, #8]
    }
 80037c8:	bf00      	nop
 80037ca:	e7fe      	b.n	80037ca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80037cc:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <xPortStartScheduler+0x134>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <xPortStartScheduler+0x134>)
 80037d4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <xPortStartScheduler+0x134>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80037de:	4a1a      	ldr	r2, [pc, #104]	; (8003848 <xPortStartScheduler+0x134>)
 80037e0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80037ea:	4b18      	ldr	r3, [pc, #96]	; (800384c <xPortStartScheduler+0x138>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a17      	ldr	r2, [pc, #92]	; (800384c <xPortStartScheduler+0x138>)
 80037f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <xPortStartScheduler+0x138>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a14      	ldr	r2, [pc, #80]	; (800384c <xPortStartScheduler+0x138>)
 80037fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003800:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003802:	f000 f963 	bl	8003acc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003806:	4b12      	ldr	r3, [pc, #72]	; (8003850 <xPortStartScheduler+0x13c>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800380c:	f000 f982 	bl	8003b14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003810:	4b10      	ldr	r3, [pc, #64]	; (8003854 <xPortStartScheduler+0x140>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0f      	ldr	r2, [pc, #60]	; (8003854 <xPortStartScheduler+0x140>)
 8003816:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800381a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800381c:	f7ff ff64 	bl	80036e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003820:	f7ff f8e2 	bl	80029e8 <vTaskSwitchContext>
    prvTaskExitError();
 8003824:	f7ff ff1e 	bl	8003664 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	e000ed00 	.word	0xe000ed00
 8003838:	410fc271 	.word	0x410fc271
 800383c:	410fc270 	.word	0x410fc270
 8003840:	e000e400 	.word	0xe000e400
 8003844:	20000258 	.word	0x20000258
 8003848:	2000025c 	.word	0x2000025c
 800384c:	e000ed20 	.word	0xe000ed20
 8003850:	20000010 	.word	0x20000010
 8003854:	e000ef34 	.word	0xe000ef34

08003858 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800385e:	4b37      	ldr	r3, [pc, #220]	; (800393c <vInitPrioGroupValue+0xe4>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a37      	ldr	r2, [pc, #220]	; (8003940 <vInitPrioGroupValue+0xe8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d10a      	bne.n	800387e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	613b      	str	r3, [r7, #16]
    }
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800387e:	4b2f      	ldr	r3, [pc, #188]	; (800393c <vInitPrioGroupValue+0xe4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a30      	ldr	r2, [pc, #192]	; (8003944 <vInitPrioGroupValue+0xec>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d10a      	bne.n	800389e <vInitPrioGroupValue+0x46>
        __asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	60fb      	str	r3, [r7, #12]
    }
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800389e:	4b2a      	ldr	r3, [pc, #168]	; (8003948 <vInitPrioGroupValue+0xf0>)
 80038a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	22ff      	movs	r2, #255	; 0xff
 80038ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4b22      	ldr	r3, [pc, #136]	; (800394c <vInitPrioGroupValue+0xf4>)
 80038c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80038c6:	4b22      	ldr	r3, [pc, #136]	; (8003950 <vInitPrioGroupValue+0xf8>)
 80038c8:	2207      	movs	r2, #7
 80038ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038cc:	e009      	b.n	80038e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <vInitPrioGroupValue+0xf8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <vInitPrioGroupValue+0xf8>)
 80038d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	2b80      	cmp	r3, #128	; 0x80
 80038ec:	d0ef      	beq.n	80038ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80038ee:	4b18      	ldr	r3, [pc, #96]	; (8003950 <vInitPrioGroupValue+0xf8>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1c3 0307 	rsb	r3, r3, #7
 80038f6:	2b04      	cmp	r3, #4
 80038f8:	d00a      	beq.n	8003910 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80038fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fe:	f383 8811 	msr	BASEPRI, r3
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	f3bf 8f4f 	dsb	sy
 800390a:	60bb      	str	r3, [r7, #8]
    }
 800390c:	bf00      	nop
 800390e:	e7fe      	b.n	800390e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003910:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <vInitPrioGroupValue+0xf8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	021b      	lsls	r3, r3, #8
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <vInitPrioGroupValue+0xf8>)
 8003918:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <vInitPrioGroupValue+0xf8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003922:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <vInitPrioGroupValue+0xf8>)
 8003924:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	e000ed00 	.word	0xe000ed00
 8003940:	410fc271 	.word	0x410fc271
 8003944:	410fc270 	.word	0x410fc270
 8003948:	e000e400 	.word	0xe000e400
 800394c:	20000258 	.word	0x20000258
 8003950:	2000025c 	.word	0x2000025c

08003954 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
        __asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	607b      	str	r3, [r7, #4]
    }
 800396c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <vPortEnterCritical+0x58>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3301      	adds	r3, #1
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <vPortEnterCritical+0x58>)
 8003976:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <vPortEnterCritical+0x58>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d10f      	bne.n	80039a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <vPortEnterCritical+0x5c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	603b      	str	r3, [r7, #0]
    }
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <vPortEnterCritical+0x4a>
    }
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	20000010 	.word	0x20000010
 80039b0:	e000ed04 	.word	0xe000ed04

080039b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80039ba:	4b12      	ldr	r3, [pc, #72]	; (8003a04 <vPortExitCritical+0x50>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <vPortExitCritical+0x24>
        __asm volatile
 80039c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
 80039d2:	607b      	str	r3, [r7, #4]
    }
 80039d4:	bf00      	nop
 80039d6:	e7fe      	b.n	80039d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80039d8:	4b0a      	ldr	r3, [pc, #40]	; (8003a04 <vPortExitCritical+0x50>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	3b01      	subs	r3, #1
 80039de:	4a09      	ldr	r2, [pc, #36]	; (8003a04 <vPortExitCritical+0x50>)
 80039e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80039e2:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <vPortExitCritical+0x50>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <vPortExitCritical+0x42>
 80039ea:	2300      	movs	r3, #0
 80039ec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80039f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	20000010 	.word	0x20000010
	...

08003a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003a10:	f3ef 8009 	mrs	r0, PSP
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <pxCurrentTCBConst>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	f01e 0f10 	tst.w	lr, #16
 8003a20:	bf08      	it	eq
 8003a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a2a:	6010      	str	r0, [r2, #0]
 8003a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003a34:	f380 8811 	msr	BASEPRI, r0
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f7fe ffd2 	bl	80029e8 <vTaskSwitchContext>
 8003a44:	f04f 0000 	mov.w	r0, #0
 8003a48:	f380 8811 	msr	BASEPRI, r0
 8003a4c:	bc09      	pop	{r0, r3}
 8003a4e:	6819      	ldr	r1, [r3, #0]
 8003a50:	6808      	ldr	r0, [r1, #0]
 8003a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a56:	f01e 0f10 	tst.w	lr, #16
 8003a5a:	bf08      	it	eq
 8003a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003a60:	f380 8809 	msr	PSP, r0
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	f3af 8000 	nop.w

08003a70 <pxCurrentTCBConst>:
 8003a70:	20000118 	.word	0x20000118
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003a74:	bf00      	nop
 8003a76:	bf00      	nop

08003a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
        __asm volatile
 8003a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	607b      	str	r3, [r7, #4]
    }
 8003a90:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003a92:	f001 fde1 	bl	8005658 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003a96:	f7fe fe8d 	bl	80027b4 <xTaskIncrementTick>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d006      	beq.n	8003aae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003aa0:	f001 fe38 	bl	8005714 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003aa4:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <SysTick_Handler+0x50>)
 8003aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	e001      	b.n	8003ab2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003aae:	f001 fe15 	bl	80056dc <SEGGER_SYSVIEW_RecordExitISR>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f383 8811 	msr	BASEPRI, r3
    }
 8003abc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <vPortSetupTimerInterrupt+0x34>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <vPortSetupTimerInterrupt+0x38>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <vPortSetupTimerInterrupt+0x3c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <vPortSetupTimerInterrupt+0x40>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <vPortSetupTimerInterrupt+0x44>)
 8003aea:	3b01      	subs	r3, #1
 8003aec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <vPortSetupTimerInterrupt+0x34>)
 8003af0:	2207      	movs	r2, #7
 8003af2:	601a      	str	r2, [r3, #0]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	e000e010 	.word	0xe000e010
 8003b04:	e000e018 	.word	0xe000e018
 8003b08:	20000000 	.word	0x20000000
 8003b0c:	10624dd3 	.word	0x10624dd3
 8003b10:	e000e014 	.word	0xe000e014

08003b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003b24 <vPortEnableVFP+0x10>
 8003b18:	6801      	ldr	r1, [r0, #0]
 8003b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003b1e:	6001      	str	r1, [r0, #0]
 8003b20:	4770      	bx	lr
 8003b22:	0000      	.short	0x0000
 8003b24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop

08003b2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003b32:	f3ef 8305 	mrs	r3, IPSR
 8003b36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b0f      	cmp	r3, #15
 8003b3c:	d914      	bls.n	8003b68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b3e:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <vPortValidateInterruptPriority+0x70>)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b48:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <vPortValidateInterruptPriority+0x74>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	7afa      	ldrb	r2, [r7, #11]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d20a      	bcs.n	8003b68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	607b      	str	r3, [r7, #4]
    }
 8003b64:	bf00      	nop
 8003b66:	e7fe      	b.n	8003b66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b68:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <vPortValidateInterruptPriority+0x78>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b70:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <vPortValidateInterruptPriority+0x7c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d90a      	bls.n	8003b8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	603b      	str	r3, [r7, #0]
    }
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <vPortValidateInterruptPriority+0x60>
    }
 8003b8e:	bf00      	nop
 8003b90:	3714      	adds	r7, #20
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	e000e3f0 	.word	0xe000e3f0
 8003ba0:	20000258 	.word	0x20000258
 8003ba4:	e000ed0c 	.word	0xe000ed0c
 8003ba8:	2000025c 	.word	0x2000025c

08003bac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	; 0x28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8003bb8:	f7fe fccc 	bl	8002554 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003bbc:	4b53      	ldr	r3, [pc, #332]	; (8003d0c <pvPortMalloc+0x160>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003bc4:	f000 f908 	bl	8003dd8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d012      	beq.n	8003bf4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003bce:	2208      	movs	r2, #8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	3308      	adds	r3, #8
 8003bda:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	43db      	mvns	r3, r3
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d804      	bhi.n	8003bf0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	4413      	add	r3, r2
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	e001      	b.n	8003bf4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	db70      	blt.n	8003cdc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d06d      	beq.n	8003cdc <pvPortMalloc+0x130>
 8003c00:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <pvPortMalloc+0x164>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d868      	bhi.n	8003cdc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003c0a:	4b42      	ldr	r3, [pc, #264]	; (8003d14 <pvPortMalloc+0x168>)
 8003c0c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003c0e:	4b41      	ldr	r3, [pc, #260]	; (8003d14 <pvPortMalloc+0x168>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c14:	e004      	b.n	8003c20 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d903      	bls.n	8003c32 <pvPortMalloc+0x86>
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f1      	bne.n	8003c16 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003c32:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <pvPortMalloc+0x160>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d04f      	beq.n	8003cdc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2208      	movs	r2, #8
 8003c42:	4413      	add	r3, r2
 8003c44:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	1ad2      	subs	r2, r2, r3
 8003c56:	2308      	movs	r3, #8
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d91f      	bls.n	8003c9e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4413      	add	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <pvPortMalloc+0xda>
        __asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	613b      	str	r3, [r7, #16]
    }
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	1ad2      	subs	r2, r2, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c98:	6978      	ldr	r0, [r7, #20]
 8003c9a:	f000 f8f9 	bl	8003e90 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <pvPortMalloc+0x164>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	4a19      	ldr	r2, [pc, #100]	; (8003d10 <pvPortMalloc+0x164>)
 8003caa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003cac:	4b18      	ldr	r3, [pc, #96]	; (8003d10 <pvPortMalloc+0x164>)
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <pvPortMalloc+0x16c>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d203      	bcs.n	8003cc0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003cb8:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <pvPortMalloc+0x164>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a16      	ldr	r2, [pc, #88]	; (8003d18 <pvPortMalloc+0x16c>)
 8003cbe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003cd2:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <pvPortMalloc+0x170>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	4a10      	ldr	r2, [pc, #64]	; (8003d1c <pvPortMalloc+0x170>)
 8003cda:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003cdc:	f7fe fc48 	bl	8002570 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <pvPortMalloc+0x154>
        __asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	60fb      	str	r3, [r7, #12]
    }
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <pvPortMalloc+0x152>
    return pvReturn;
 8003d00:	69fb      	ldr	r3, [r7, #28]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3728      	adds	r7, #40	; 0x28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20012e68 	.word	0x20012e68
 8003d10:	20012e6c 	.word	0x20012e6c
 8003d14:	20012e60 	.word	0x20012e60
 8003d18:	20012e70 	.word	0x20012e70
 8003d1c:	20012e74 	.word	0x20012e74

08003d20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d049      	beq.n	8003dc6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003d32:	2308      	movs	r3, #8
 8003d34:	425b      	negs	r3, r3
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4413      	add	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db0a      	blt.n	8003d5e <vPortFree+0x3e>
        __asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	60fb      	str	r3, [r7, #12]
    }
 8003d5a:	bf00      	nop
 8003d5c:	e7fe      	b.n	8003d5c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <vPortFree+0x5c>
        __asm volatile
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	60bb      	str	r3, [r7, #8]
    }
 8003d78:	bf00      	nop
 8003d7a:	e7fe      	b.n	8003d7a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	0fdb      	lsrs	r3, r3, #31
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01c      	beq.n	8003dc6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d118      	bne.n	8003dc6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8003da0:	f7fe fbd8 	bl	8002554 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <vPortFree+0xb0>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4413      	add	r3, r2
 8003dae:	4a08      	ldr	r2, [pc, #32]	; (8003dd0 <vPortFree+0xb0>)
 8003db0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003db2:	6938      	ldr	r0, [r7, #16]
 8003db4:	f000 f86c 	bl	8003e90 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <vPortFree+0xb4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <vPortFree+0xb4>)
 8003dc0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003dc2:	f7fe fbd5 	bl	8002570 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003dc6:	bf00      	nop
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20012e6c 	.word	0x20012e6c
 8003dd4:	20012e78 	.word	0x20012e78

08003dd8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003dde:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003de2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <prvHeapInit+0xa4>)
 8003de6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3307      	adds	r3, #7
 8003df6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0307 	bic.w	r3, r3, #7
 8003dfe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	4a1d      	ldr	r2, [pc, #116]	; (8003e7c <prvHeapInit+0xa4>)
 8003e08:	4413      	add	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003e10:	4a1b      	ldr	r2, [pc, #108]	; (8003e80 <prvHeapInit+0xa8>)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003e16:	4b1a      	ldr	r3, [pc, #104]	; (8003e80 <prvHeapInit+0xa8>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	4413      	add	r3, r2
 8003e22:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003e24:	2208      	movs	r2, #8
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0307 	bic.w	r3, r3, #7
 8003e32:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <prvHeapInit+0xac>)
 8003e38:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <prvHeapInit+0xac>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <prvHeapInit+0xac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	1ad2      	subs	r2, r2, r3
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <prvHeapInit+0xac>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <prvHeapInit+0xb0>)
 8003e66:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <prvHeapInit+0xb4>)
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr
 8003e7c:	20000260 	.word	0x20000260
 8003e80:	20012e60 	.word	0x20012e60
 8003e84:	20012e68 	.word	0x20012e68
 8003e88:	20012e70 	.word	0x20012e70
 8003e8c:	20012e6c 	.word	0x20012e6c

08003e90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003e98:	4b28      	ldr	r3, [pc, #160]	; (8003f3c <prvInsertBlockIntoFreeList+0xac>)
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	e002      	b.n	8003ea4 <prvInsertBlockIntoFreeList+0x14>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d8f7      	bhi.n	8003e9e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	4413      	add	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d108      	bne.n	8003ed2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	441a      	add	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	441a      	add	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d118      	bne.n	8003f18 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b15      	ldr	r3, [pc, #84]	; (8003f40 <prvInsertBlockIntoFreeList+0xb0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d00d      	beq.n	8003f0e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	e008      	b.n	8003f20 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <prvInsertBlockIntoFreeList+0xb0>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	e003      	b.n	8003f20 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d002      	beq.n	8003f2e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003f2e:	bf00      	nop
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	20012e60 	.word	0x20012e60
 8003f40:	20012e68 	.word	0x20012e68

08003f44 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003f48:	4803      	ldr	r0, [pc, #12]	; (8003f58 <_cbSendSystemDesc+0x14>)
 8003f4a:	f001 fb2f 	bl	80055ac <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003f4e:	4803      	ldr	r0, [pc, #12]	; (8003f5c <_cbSendSystemDesc+0x18>)
 8003f50:	f001 fb2c 	bl	80055ac <SEGGER_SYSVIEW_SendSysDesc>
}
 8003f54:	bf00      	nop
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	080065a8 	.word	0x080065a8
 8003f5c:	080065ec 	.word	0x080065ec

08003f60 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <SEGGER_SYSVIEW_Conf+0x20>)
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <SEGGER_SYSVIEW_Conf+0x20>)
 8003f6a:	6819      	ldr	r1, [r3, #0]
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <SEGGER_SYSVIEW_Conf+0x24>)
 8003f6e:	4a06      	ldr	r2, [pc, #24]	; (8003f88 <SEGGER_SYSVIEW_Conf+0x28>)
 8003f70:	f000 fe9a 	bl	8004ca8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003f74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8003f78:	f000 feda 	bl	8004d30 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	20000000 	.word	0x20000000
 8003f84:	08003f45 	.word	0x08003f45
 8003f88:	08006688 	.word	0x08006688

08003f8c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003f92:	2300      	movs	r3, #0
 8003f94:	607b      	str	r3, [r7, #4]
 8003f96:	e033      	b.n	8004000 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003f98:	491e      	ldr	r1, [pc, #120]	; (8004014 <_cbSendTaskList+0x88>)
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	491a      	ldr	r1, [pc, #104]	; (8004014 <_cbSendTaskList+0x88>)
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	4c16      	ldr	r4, [pc, #88]	; (8004014 <_cbSendTaskList+0x88>)
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4423      	add	r3, r4
 8003fc8:	3308      	adds	r3, #8
 8003fca:	681c      	ldr	r4, [r3, #0]
 8003fcc:	4d11      	ldr	r5, [pc, #68]	; (8004014 <_cbSendTaskList+0x88>)
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	442b      	add	r3, r5
 8003fda:	330c      	adds	r3, #12
 8003fdc:	681d      	ldr	r5, [r3, #0]
 8003fde:	4e0d      	ldr	r6, [pc, #52]	; (8004014 <_cbSendTaskList+0x88>)
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4433      	add	r3, r6
 8003fec:	3310      	adds	r3, #16
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	462b      	mov	r3, r5
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	f000 f8bd 	bl	8004174 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	607b      	str	r3, [r7, #4]
 8004000:	4b05      	ldr	r3, [pc, #20]	; (8004018 <_cbSendTaskList+0x8c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	d3c6      	bcc.n	8003f98 <_cbSendTaskList+0xc>
  }
}
 800400a:	bf00      	nop
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004014:	20012e7c 	.word	0x20012e7c
 8004018:	20012f1c 	.word	0x20012f1c

0800401c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800401c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004024:	f7fe fbb4 	bl	8002790 <xTaskGetTickCountFromISR>
 8004028:	4603      	mov	r3, r0
 800402a:	2200      	movs	r2, #0
 800402c:	469a      	mov	sl, r3
 800402e:	4693      	mov	fp, r2
 8004030:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004034:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	f04f 0a00 	mov.w	sl, #0
 8004040:	f04f 0b00 	mov.w	fp, #0
 8004044:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004048:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800404c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004050:	4652      	mov	r2, sl
 8004052:	465b      	mov	r3, fp
 8004054:	1a14      	subs	r4, r2, r0
 8004056:	eb63 0501 	sbc.w	r5, r3, r1
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	00ab      	lsls	r3, r5, #2
 8004064:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004068:	00a2      	lsls	r2, r4, #2
 800406a:	4614      	mov	r4, r2
 800406c:	461d      	mov	r5, r3
 800406e:	eb14 0800 	adds.w	r8, r4, r0
 8004072:	eb45 0901 	adc.w	r9, r5, r1
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408a:	4690      	mov	r8, r2
 800408c:	4699      	mov	r9, r3
 800408e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004092:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004096:	4610      	mov	r0, r2
 8004098:	4619      	mov	r1, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080040a4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
 80040b0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80040b2:	2205      	movs	r2, #5
 80040b4:	492b      	ldr	r1, [pc, #172]	; (8004164 <SYSVIEW_AddTask+0xc0>)
 80040b6:	68b8      	ldr	r0, [r7, #8]
 80040b8:	f001 ff72 	bl	8005fa0 <memcmp>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d04b      	beq.n	800415a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80040c2:	4b29      	ldr	r3, [pc, #164]	; (8004168 <SYSVIEW_AddTask+0xc4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b07      	cmp	r3, #7
 80040c8:	d903      	bls.n	80040d2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80040ca:	4828      	ldr	r0, [pc, #160]	; (800416c <SYSVIEW_AddTask+0xc8>)
 80040cc:	f001 fd16 	bl	8005afc <SEGGER_SYSVIEW_Warn>
    return;
 80040d0:	e044      	b.n	800415c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80040d2:	4b25      	ldr	r3, [pc, #148]	; (8004168 <SYSVIEW_AddTask+0xc4>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	4926      	ldr	r1, [pc, #152]	; (8004170 <SYSVIEW_AddTask+0xcc>)
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80040e6:	4b20      	ldr	r3, [pc, #128]	; (8004168 <SYSVIEW_AddTask+0xc4>)
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	4921      	ldr	r1, [pc, #132]	; (8004170 <SYSVIEW_AddTask+0xcc>)
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	3304      	adds	r3, #4
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80040fc:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <SYSVIEW_AddTask+0xc4>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	491b      	ldr	r1, [pc, #108]	; (8004170 <SYSVIEW_AddTask+0xcc>)
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	3308      	adds	r3, #8
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004112:	4b15      	ldr	r3, [pc, #84]	; (8004168 <SYSVIEW_AddTask+0xc4>)
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	4916      	ldr	r1, [pc, #88]	; (8004170 <SYSVIEW_AddTask+0xcc>)
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	440b      	add	r3, r1
 8004122:	330c      	adds	r3, #12
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004128:	4b0f      	ldr	r3, [pc, #60]	; (8004168 <SYSVIEW_AddTask+0xc4>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4910      	ldr	r1, [pc, #64]	; (8004170 <SYSVIEW_AddTask+0xcc>)
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3310      	adds	r3, #16
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <SYSVIEW_AddTask+0xc4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3301      	adds	r3, #1
 8004144:	4a08      	ldr	r2, [pc, #32]	; (8004168 <SYSVIEW_AddTask+0xc4>)
 8004146:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f80e 	bl	8004174 <SYSVIEW_SendTaskInfo>
 8004158:	e000      	b.n	800415c <SYSVIEW_AddTask+0xb8>
    return;
 800415a:	bf00      	nop

}
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	080065fc 	.word	0x080065fc
 8004168:	20012f1c 	.word	0x20012f1c
 800416c:	08006604 	.word	0x08006604
 8004170:	20012e7c 	.word	0x20012e7c

08004174 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
 8004180:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004182:	f107 0314 	add.w	r3, r7, #20
 8004186:	2214      	movs	r2, #20
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f001 ff18 	bl	8005fc0 <memset>
  TaskInfo.TaskID     = TaskID;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80041a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80041a4:	f107 0314 	add.w	r3, r7, #20
 80041a8:	4618      	mov	r0, r3
 80041aa:	f001 f907 	bl	80053bc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80041ae:	bf00      	nop
 80041b0:	3728      	adds	r7, #40	; 0x28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80041be:	4b26      	ldr	r3, [pc, #152]	; (8004258 <_DoInit+0xa0>)
 80041c0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80041c2:	22a8      	movs	r2, #168	; 0xa8
 80041c4:	2100      	movs	r1, #0
 80041c6:	6838      	ldr	r0, [r7, #0]
 80041c8:	f001 fefa 	bl	8005fc0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2203      	movs	r2, #3
 80041d0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2203      	movs	r2, #3
 80041d6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4a20      	ldr	r2, [pc, #128]	; (800425c <_DoInit+0xa4>)
 80041dc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <_DoInit+0xa8>)
 80041e2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041ea:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2200      	movs	r2, #0
 80041f6:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2200      	movs	r2, #0
 80041fc:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	4a16      	ldr	r2, [pc, #88]	; (800425c <_DoInit+0xa4>)
 8004202:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4a17      	ldr	r2, [pc, #92]	; (8004264 <_DoInit+0xac>)
 8004208:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2210      	movs	r2, #16
 800420e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2200      	movs	r2, #0
 800421a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004222:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004226:	2300      	movs	r3, #0
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	e00c      	b.n	8004246 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f1c3 030f 	rsb	r3, r3, #15
 8004232:	4a0d      	ldr	r2, [pc, #52]	; (8004268 <_DoInit+0xb0>)
 8004234:	5cd1      	ldrb	r1, [r2, r3]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4413      	add	r3, r2
 800423c:	460a      	mov	r2, r1
 800423e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3301      	adds	r3, #1
 8004244:	607b      	str	r3, [r7, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b0f      	cmp	r3, #15
 800424a:	d9ef      	bls.n	800422c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800424c:	f3bf 8f5f 	dmb	sy
}
 8004250:	bf00      	nop
 8004252:	3708      	adds	r7, #8
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20012f20 	.word	0x20012f20
 800425c:	08006654 	.word	0x08006654
 8004260:	20012fc8 	.word	0x20012fc8
 8004264:	200133c8 	.word	0x200133c8
 8004268:	08006690 	.word	0x08006690

0800426c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004278:	2300      	movs	r3, #0
 800427a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	429a      	cmp	r2, r3
 800428e:	d905      	bls.n	800429c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	3b01      	subs	r3, #1
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
 800429a:	e007      	b.n	80042ac <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	69b9      	ldr	r1, [r7, #24]
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	1acb      	subs	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	3b01      	subs	r3, #1
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689a      	ldr	r2, [r3, #8]
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b6:	4293      	cmp	r3, r2
 80042b8:	bf28      	it	cs
 80042ba:	4613      	movcs	r3, r2
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4293      	cmp	r3, r2
 80042c4:	bf28      	it	cs
 80042c6:	4613      	movcs	r3, r2
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80042d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d6:	68b9      	ldr	r1, [r7, #8]
 80042d8:	6978      	ldr	r0, [r7, #20]
 80042da:	f001 fed3 	bl	8006084 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80042de:	6a3a      	ldr	r2, [r7, #32]
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	4413      	add	r3, r2
 80042e4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	4413      	add	r3, r2
 80042ec:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	4413      	add	r3, r2
 80042fc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	69fa      	ldr	r2, [r7, #28]
 8004304:	429a      	cmp	r2, r3
 8004306:	d101      	bne.n	800430c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800430c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1b2      	bne.n	8004282 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800431c:	6a3b      	ldr	r3, [r7, #32]
}
 800431e:	4618      	mov	r0, r3
 8004320:	3728      	adds	r7, #40	; 0x28
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004326:	b580      	push	{r7, lr}
 8004328:	b088      	sub	sp, #32
 800432a:	af00      	add	r7, sp, #0
 800432c:	60f8      	str	r0, [r7, #12]
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	429a      	cmp	r2, r3
 8004348:	d911      	bls.n	800436e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	4413      	add	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	6938      	ldr	r0, [r7, #16]
 800435a:	f001 fe93 	bl	8006084 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800435e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	441a      	add	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800436c:	e01f      	b.n	80043ae <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	4413      	add	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	6938      	ldr	r0, [r7, #16]
 8004382:	f001 fe7f 	bl	8006084 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	4413      	add	r3, r2
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4619      	mov	r1, r3
 800439e:	6938      	ldr	r0, [r7, #16]
 80043a0:	f001 fe70 	bl	8006084 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80043a4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	60da      	str	r2, [r3, #12]
}
 80043ae:	bf00      	nop
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80043b6:	b480      	push	{r7}
 80043b8:	b087      	sub	sp, #28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d808      	bhi.n	80043e4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad2      	subs	r2, r2, r3
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4413      	add	r3, r2
 80043de:	3b01      	subs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	e004      	b.n	80043ee <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	617b      	str	r3, [r7, #20]
  }
  return r;
 80043ee:	697b      	ldr	r3, [r7, #20]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08c      	sub	sp, #48	; 0x30
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004408:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <SEGGER_RTT_ReadNoLock+0x108>)
 800440a:	623b      	str	r3, [r7, #32]
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b53      	cmp	r3, #83	; 0x53
 8004414:	d001      	beq.n	800441a <SEGGER_RTT_ReadNoLock+0x1e>
 8004416:	f7ff fecf 	bl	80041b8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4613      	mov	r3, r2
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	4413      	add	r3, r2
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	3360      	adds	r3, #96	; 0x60
 8004426:	4a37      	ldr	r2, [pc, #220]	; (8004504 <SEGGER_RTT_ReadNoLock+0x108>)
 8004428:	4413      	add	r3, r2
 800442a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800443c:	2300      	movs	r3, #0
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	429a      	cmp	r2, r3
 8004446:	d92b      	bls.n	80044a0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4293      	cmp	r3, r2
 8004458:	bf28      	it	cs
 800445a:	4613      	movcs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	4413      	add	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	6939      	ldr	r1, [r7, #16]
 800446c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800446e:	f001 fe09 	bl	8006084 <memcpy>
    NumBytesRead += NumBytesRem;
 8004472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	4413      	add	r3, r2
 8004478:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4413      	add	r3, r2
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800448a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	4413      	add	r3, r2
 8004490:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004498:	429a      	cmp	r2, r3
 800449a:	d101      	bne.n	80044a0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800449c:	2300      	movs	r3, #0
 800449e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4293      	cmp	r3, r2
 80044ae:	bf28      	it	cs
 80044b0:	4613      	movcs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d019      	beq.n	80044ee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044c0:	4413      	add	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	6939      	ldr	r1, [r7, #16]
 80044c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044ca:	f001 fddb 	bl	8006084 <memcpy>
    NumBytesRead += NumBytesRem;
 80044ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	4413      	add	r3, r2
 80044d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80044d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	4413      	add	r3, r2
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80044e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4413      	add	r3, r2
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80044ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044f8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3730      	adds	r7, #48	; 0x30
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20012f20 	.word	0x20012f20

08004508 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	4613      	mov	r3, r2
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	4413      	add	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004526:	4413      	add	r3, r2
 8004528:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d029      	beq.n	8004586 <SEGGER_RTT_WriteNoLock+0x7e>
 8004532:	2b02      	cmp	r3, #2
 8004534:	d82e      	bhi.n	8004594 <SEGGER_RTT_WriteNoLock+0x8c>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <SEGGER_RTT_WriteNoLock+0x38>
 800453a:	2b01      	cmp	r3, #1
 800453c:	d013      	beq.n	8004566 <SEGGER_RTT_WriteNoLock+0x5e>
 800453e:	e029      	b.n	8004594 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004540:	6978      	ldr	r0, [r7, #20]
 8004542:	f7ff ff38 	bl	80043b6 <_GetAvailWriteSpace>
 8004546:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	d202      	bcs.n	8004556 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004550:	2300      	movs	r3, #0
 8004552:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004554:	e021      	b.n	800459a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	69b9      	ldr	r1, [r7, #24]
 800455e:	6978      	ldr	r0, [r7, #20]
 8004560:	f7ff fee1 	bl	8004326 <_WriteNoCheck>
    break;
 8004564:	e019      	b.n	800459a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004566:	6978      	ldr	r0, [r7, #20]
 8004568:	f7ff ff25 	bl	80043b6 <_GetAvailWriteSpace>
 800456c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	4293      	cmp	r3, r2
 8004574:	bf28      	it	cs
 8004576:	4613      	movcs	r3, r2
 8004578:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	69b9      	ldr	r1, [r7, #24]
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f7ff fed1 	bl	8004326 <_WriteNoCheck>
    break;
 8004584:	e009      	b.n	800459a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	69b9      	ldr	r1, [r7, #24]
 800458a:	6978      	ldr	r0, [r7, #20]
 800458c:	f7ff fe6e 	bl	800426c <_WriteBlocking>
 8004590:	61f8      	str	r0, [r7, #28]
    break;
 8004592:	e002      	b.n	800459a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8004594:	2300      	movs	r3, #0
 8004596:	61fb      	str	r3, [r7, #28]
    break;
 8004598:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800459a:	69fb      	ldr	r3, [r7, #28]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	20012f20 	.word	0x20012f20

080045a8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80045b4:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <SEGGER_RTT_Write+0x48>)
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b53      	cmp	r3, #83	; 0x53
 80045c0:	d001      	beq.n	80045c6 <SEGGER_RTT_Write+0x1e>
 80045c2:	f7ff fdf9 	bl	80041b8 <_DoInit>
  SEGGER_RTT_LOCK();
 80045c6:	f3ef 8311 	mrs	r3, BASEPRI
 80045ca:	f04f 0120 	mov.w	r1, #32
 80045ce:	f381 8811 	msr	BASEPRI, r1
 80045d2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f7ff ff95 	bl	8004508 <SEGGER_RTT_WriteNoLock>
 80045de:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80045e6:	697b      	ldr	r3, [r7, #20]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20012f20 	.word	0x20012f20

080045f4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004602:	4b3d      	ldr	r3, [pc, #244]	; (80046f8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004604:	61bb      	str	r3, [r7, #24]
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b53      	cmp	r3, #83	; 0x53
 800460e:	d001      	beq.n	8004614 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004610:	f7ff fdd2 	bl	80041b8 <_DoInit>
  SEGGER_RTT_LOCK();
 8004614:	f3ef 8311 	mrs	r3, BASEPRI
 8004618:	f04f 0120 	mov.w	r1, #32
 800461c:	f381 8811 	msr	BASEPRI, r1
 8004620:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004622:	4b35      	ldr	r3, [pc, #212]	; (80046f8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004624:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800462a:	6939      	ldr	r1, [r7, #16]
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	4613      	mov	r3, r2
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	4413      	add	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	440b      	add	r3, r1
 800463a:	3304      	adds	r3, #4
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3301      	adds	r3, #1
 8004646:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	429a      	cmp	r2, r3
 8004650:	dbeb      	blt.n	800462a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004652:	e000      	b.n	8004656 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004654:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	429a      	cmp	r2, r3
 800465e:	da3f      	bge.n	80046e0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004660:	6939      	ldr	r1, [r7, #16]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	440b      	add	r3, r1
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004674:	6939      	ldr	r1, [r7, #16]
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	4613      	mov	r3, r2
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	4413      	add	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	440b      	add	r3, r1
 8004684:	3304      	adds	r3, #4
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800468a:	6939      	ldr	r1, [r7, #16]
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	4613      	mov	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4413      	add	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	440b      	add	r3, r1
 8004698:	3320      	adds	r3, #32
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800469e:	6939      	ldr	r1, [r7, #16]
 80046a0:	69fa      	ldr	r2, [r7, #28]
 80046a2:	4613      	mov	r3, r2
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	4413      	add	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	440b      	add	r3, r1
 80046ac:	3328      	adds	r3, #40	; 0x28
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80046b2:	6939      	ldr	r1, [r7, #16]
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	440b      	add	r3, r1
 80046c0:	3324      	adds	r3, #36	; 0x24
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80046c6:	6939      	ldr	r1, [r7, #16]
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	4613      	mov	r3, r2
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	4413      	add	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	440b      	add	r3, r1
 80046d4:	332c      	adds	r3, #44	; 0x2c
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80046da:	f3bf 8f5f 	dmb	sy
 80046de:	e002      	b.n	80046e6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80046e0:	f04f 33ff 	mov.w	r3, #4294967295
 80046e4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80046ec:	69fb      	ldr	r3, [r7, #28]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20012f20 	.word	0x20012f20

080046fc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	; 0x28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
 8004708:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800470a:	4b21      	ldr	r3, [pc, #132]	; (8004790 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800470c:	623b      	str	r3, [r7, #32]
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b53      	cmp	r3, #83	; 0x53
 8004716:	d001      	beq.n	800471c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004718:	f7ff fd4e 	bl	80041b8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800471c:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800471e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d82c      	bhi.n	8004780 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004726:	f3ef 8311 	mrs	r3, BASEPRI
 800472a:	f04f 0120 	mov.w	r1, #32
 800472e:	f381 8811 	msr	BASEPRI, r1
 8004732:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004734:	68fa      	ldr	r2, [r7, #12]
 8004736:	4613      	mov	r3, r2
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	4413      	add	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	3360      	adds	r3, #96	; 0x60
 8004740:	69fa      	ldr	r2, [r7, #28]
 8004742:	4413      	add	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00e      	beq.n	800476a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	2200      	movs	r2, #0
 8004762:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2200      	movs	r2, #0
 8004768:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800476e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004770:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
 800477e:	e002      	b.n	8004786 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004780:	f04f 33ff 	mov.w	r3, #4294967295
 8004784:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004788:	4618      	mov	r0, r3
 800478a:	3728      	adds	r7, #40	; 0x28
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20012f20 	.word	0x20012f20

08004794 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	60fa      	str	r2, [r7, #12]
 80047aa:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b80      	cmp	r3, #128	; 0x80
 80047b0:	d90a      	bls.n	80047c8 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80047b6:	e007      	b.n	80047c8 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	1c53      	adds	r3, r2, #1
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1c59      	adds	r1, r3, #1
 80047c2:	60f9      	str	r1, [r7, #12]
 80047c4:	7812      	ldrb	r2, [r2, #0]
 80047c6:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1e5a      	subs	r2, r3, #1
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <_EncodeStr+0x46>
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1ee      	bne.n	80047b8 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80047e6:	68fb      	ldr	r3, [r7, #12]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3307      	adds	r3, #7
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004812:	4b34      	ldr	r3, [pc, #208]	; (80048e4 <_HandleIncomingPacket+0xd8>)
 8004814:	7e1b      	ldrb	r3, [r3, #24]
 8004816:	4618      	mov	r0, r3
 8004818:	1cfb      	adds	r3, r7, #3
 800481a:	2201      	movs	r2, #1
 800481c:	4619      	mov	r1, r3
 800481e:	f7ff fded 	bl	80043fc <SEGGER_RTT_ReadNoLock>
 8004822:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d057      	beq.n	80048da <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	2b80      	cmp	r3, #128	; 0x80
 800482e:	d031      	beq.n	8004894 <_HandleIncomingPacket+0x88>
 8004830:	2b80      	cmp	r3, #128	; 0x80
 8004832:	dc40      	bgt.n	80048b6 <_HandleIncomingPacket+0xaa>
 8004834:	2b07      	cmp	r3, #7
 8004836:	dc15      	bgt.n	8004864 <_HandleIncomingPacket+0x58>
 8004838:	2b00      	cmp	r3, #0
 800483a:	dd3c      	ble.n	80048b6 <_HandleIncomingPacket+0xaa>
 800483c:	3b01      	subs	r3, #1
 800483e:	2b06      	cmp	r3, #6
 8004840:	d839      	bhi.n	80048b6 <_HandleIncomingPacket+0xaa>
 8004842:	a201      	add	r2, pc, #4	; (adr r2, 8004848 <_HandleIncomingPacket+0x3c>)
 8004844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004848:	0800486b 	.word	0x0800486b
 800484c:	08004871 	.word	0x08004871
 8004850:	08004877 	.word	0x08004877
 8004854:	0800487d 	.word	0x0800487d
 8004858:	08004883 	.word	0x08004883
 800485c:	08004889 	.word	0x08004889
 8004860:	0800488f 	.word	0x0800488f
 8004864:	2b7f      	cmp	r3, #127	; 0x7f
 8004866:	d033      	beq.n	80048d0 <_HandleIncomingPacket+0xc4>
 8004868:	e025      	b.n	80048b6 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800486a:	f000 fc2d 	bl	80050c8 <SEGGER_SYSVIEW_Start>
      break;
 800486e:	e034      	b.n	80048da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004870:	f000 fce4 	bl	800523c <SEGGER_SYSVIEW_Stop>
      break;
 8004874:	e031      	b.n	80048da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004876:	f000 febd 	bl	80055f4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800487a:	e02e      	b.n	80048da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800487c:	f000 fe82 	bl	8005584 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004880:	e02b      	b.n	80048da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004882:	f000 fd01 	bl	8005288 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004886:	e028      	b.n	80048da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004888:	f001 f8fa 	bl	8005a80 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800488c:	e025      	b.n	80048da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800488e:	f001 f8d9 	bl	8005a44 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004892:	e022      	b.n	80048da <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <_HandleIncomingPacket+0xd8>)
 8004896:	7e1b      	ldrb	r3, [r3, #24]
 8004898:	4618      	mov	r0, r3
 800489a:	1cfb      	adds	r3, r7, #3
 800489c:	2201      	movs	r2, #1
 800489e:	4619      	mov	r1, r3
 80048a0:	f7ff fdac 	bl	80043fc <SEGGER_RTT_ReadNoLock>
 80048a4:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d013      	beq.n	80048d4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 f83e 	bl	8005930 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80048b4:	e00e      	b.n	80048d4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80048b6:	78fb      	ldrb	r3, [r7, #3]
 80048b8:	b25b      	sxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	da0c      	bge.n	80048d8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <_HandleIncomingPacket+0xd8>)
 80048c0:	7e1b      	ldrb	r3, [r3, #24]
 80048c2:	4618      	mov	r0, r3
 80048c4:	1cfb      	adds	r3, r7, #3
 80048c6:	2201      	movs	r2, #1
 80048c8:	4619      	mov	r1, r3
 80048ca:	f7ff fd97 	bl	80043fc <SEGGER_RTT_ReadNoLock>
      }
      break;
 80048ce:	e003      	b.n	80048d8 <_HandleIncomingPacket+0xcc>
      break;
 80048d0:	bf00      	nop
 80048d2:	e002      	b.n	80048da <_HandleIncomingPacket+0xce>
      break;
 80048d4:	bf00      	nop
 80048d6:	e000      	b.n	80048da <_HandleIncomingPacket+0xce>
      break;
 80048d8:	bf00      	nop
    }
  }
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	200143e0 	.word	0x200143e0

080048e8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08c      	sub	sp, #48	; 0x30
 80048ec:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80048ee:	2301      	movs	r3, #1
 80048f0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80048f2:	1d3b      	adds	r3, r7, #4
 80048f4:	3301      	adds	r3, #1
 80048f6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048fc:	4b31      	ldr	r3, [pc, #196]	; (80049c4 <_TrySendOverflowPacket+0xdc>)
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28
 8004902:	e00b      	b.n	800491c <_TrySendOverflowPacket+0x34>
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	b2da      	uxtb	r2, r3
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	1c59      	adds	r1, r3, #1
 800490c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800490e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	09db      	lsrs	r3, r3, #7
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	2b7f      	cmp	r3, #127	; 0x7f
 8004920:	d8f0      	bhi.n	8004904 <_TrySendOverflowPacket+0x1c>
 8004922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004932:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <_TrySendOverflowPacket+0xe0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004938:	4b22      	ldr	r3, [pc, #136]	; (80049c4 <_TrySendOverflowPacket+0xdc>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	623b      	str	r3, [r7, #32]
 800494a:	e00b      	b.n	8004964 <_TrySendOverflowPacket+0x7c>
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	b2da      	uxtb	r2, r3
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	1c59      	adds	r1, r3, #1
 8004954:	6279      	str	r1, [r7, #36]	; 0x24
 8004956:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800495a:	b2d2      	uxtb	r2, r2
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	09db      	lsrs	r3, r3, #7
 8004962:	623b      	str	r3, [r7, #32]
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	2b7f      	cmp	r3, #127	; 0x7f
 8004968:	d8f0      	bhi.n	800494c <_TrySendOverflowPacket+0x64>
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	627a      	str	r2, [r7, #36]	; 0x24
 8004970:	6a3a      	ldr	r2, [r7, #32]
 8004972:	b2d2      	uxtb	r2, r2
 8004974:	701a      	strb	r2, [r3, #0]
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <_TrySendOverflowPacket+0xdc>)
 800497c:	785b      	ldrb	r3, [r3, #1]
 800497e:	4618      	mov	r0, r3
 8004980:	1d3b      	adds	r3, r7, #4
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	461a      	mov	r2, r3
 8004988:	1d3b      	adds	r3, r7, #4
 800498a:	4619      	mov	r1, r3
 800498c:	f7fb fc28 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004990:	4603      	mov	r3, r0
 8004992:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800499a:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <_TrySendOverflowPacket+0xdc>)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80049a0:	4b08      	ldr	r3, [pc, #32]	; (80049c4 <_TrySendOverflowPacket+0xdc>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <_TrySendOverflowPacket+0xdc>)
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	e004      	b.n	80049b8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80049ae:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <_TrySendOverflowPacket+0xdc>)
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	3301      	adds	r3, #1
 80049b4:	4a03      	ldr	r2, [pc, #12]	; (80049c4 <_TrySendOverflowPacket+0xdc>)
 80049b6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80049b8:	693b      	ldr	r3, [r7, #16]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3730      	adds	r7, #48	; 0x30
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	200143e0 	.word	0x200143e0
 80049c8:	e0001004 	.word	0xe0001004

080049cc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08a      	sub	sp, #40	; 0x28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80049d8:	4b98      	ldr	r3, [pc, #608]	; (8004c3c <_SendPacket+0x270>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d010      	beq.n	8004a02 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80049e0:	4b96      	ldr	r3, [pc, #600]	; (8004c3c <_SendPacket+0x270>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 812d 	beq.w	8004c44 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80049ea:	4b94      	ldr	r3, [pc, #592]	; (8004c3c <_SendPacket+0x270>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d109      	bne.n	8004a06 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80049f2:	f7ff ff79 	bl	80048e8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80049f6:	4b91      	ldr	r3, [pc, #580]	; (8004c3c <_SendPacket+0x270>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	f040 8124 	bne.w	8004c48 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004a00:	e001      	b.n	8004a06 <_SendPacket+0x3a>
    goto Send;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <_SendPacket+0x3c>
Send:
 8004a06:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b1f      	cmp	r3, #31
 8004a0c:	d809      	bhi.n	8004a22 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004a0e:	4b8b      	ldr	r3, [pc, #556]	; (8004c3c <_SendPacket+0x270>)
 8004a10:	69da      	ldr	r2, [r3, #28]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f040 8115 	bne.w	8004c4c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b17      	cmp	r3, #23
 8004a26:	d807      	bhi.n	8004a38 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e0c4      	b.n	8004bc2 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	2b7f      	cmp	r3, #127	; 0x7f
 8004a44:	d912      	bls.n	8004a6c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	09da      	lsrs	r2, r3, #7
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	3a01      	subs	r2, #1
 8004a5e:	60fa      	str	r2, [r7, #12]
 8004a60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e006      	b.n	8004a7a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b7e      	cmp	r3, #126	; 0x7e
 8004a7e:	d807      	bhi.n	8004a90 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	701a      	strb	r2, [r3, #0]
 8004a8e:	e098      	b.n	8004bc2 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a96:	d212      	bcs.n	8004abe <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	09da      	lsrs	r2, r3, #7
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	3a01      	subs	r2, #1
 8004ab0:	60fa      	str	r2, [r7, #12]
 8004ab2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	e081      	b.n	8004bc2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ac4:	d21d      	bcs.n	8004b02 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	0b9a      	lsrs	r2, r3, #14
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3b01      	subs	r3, #1
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	09db      	lsrs	r3, r3, #7
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	3a01      	subs	r2, #1
 8004ae0:	60fa      	str	r2, [r7, #12]
 8004ae2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	3a01      	subs	r2, #1
 8004af4:	60fa      	str	r2, [r7, #12]
 8004af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e05f      	b.n	8004bc2 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b08:	d228      	bcs.n	8004b5c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	0d5a      	lsrs	r2, r3, #21
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	0b9b      	lsrs	r3, r3, #14
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	3a01      	subs	r2, #1
 8004b24:	60fa      	str	r2, [r7, #12]
 8004b26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	09db      	lsrs	r3, r3, #7
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	3a01      	subs	r2, #1
 8004b3a:	60fa      	str	r2, [r7, #12]
 8004b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	3a01      	subs	r2, #1
 8004b4e:	60fa      	str	r2, [r7, #12]
 8004b50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b54:	b2da      	uxtb	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	701a      	strb	r2, [r3, #0]
 8004b5a:	e032      	b.n	8004bc2 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	0f1a      	lsrs	r2, r3, #28
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	0d5b      	lsrs	r3, r3, #21
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	3a01      	subs	r2, #1
 8004b76:	60fa      	str	r2, [r7, #12]
 8004b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b7c:	b2da      	uxtb	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	0b9b      	lsrs	r3, r3, #14
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	3a01      	subs	r2, #1
 8004b8c:	60fa      	str	r2, [r7, #12]
 8004b8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	09db      	lsrs	r3, r3, #7
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	3a01      	subs	r2, #1
 8004ba2:	60fa      	str	r2, [r7, #12]
 8004ba4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	3a01      	subs	r2, #1
 8004bb6:	60fa      	str	r2, [r7, #12]
 8004bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004bc2:	4b1f      	ldr	r3, [pc, #124]	; (8004c40 <_SendPacket+0x274>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004bc8:	4b1c      	ldr	r3, [pc, #112]	; (8004c3c <_SendPacket+0x270>)
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	623b      	str	r3, [r7, #32]
 8004bda:	e00b      	b.n	8004bf4 <_SendPacket+0x228>
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	1c59      	adds	r1, r3, #1
 8004be4:	6279      	str	r1, [r7, #36]	; 0x24
 8004be6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	09db      	lsrs	r3, r3, #7
 8004bf2:	623b      	str	r3, [r7, #32]
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8004bf8:	d8f0      	bhi.n	8004bdc <_SendPacket+0x210>
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	1c5a      	adds	r2, r3, #1
 8004bfe:	627a      	str	r2, [r7, #36]	; 0x24
 8004c00:	6a3a      	ldr	r2, [r7, #32]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]
 8004c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c08:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004c0a:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <_SendPacket+0x270>)
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	461a      	mov	r2, r3
 8004c18:	68f9      	ldr	r1, [r7, #12]
 8004c1a:	f7fb fae1 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004c1e:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004c26:	4a05      	ldr	r2, [pc, #20]	; (8004c3c <_SendPacket+0x270>)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	60d3      	str	r3, [r2, #12]
 8004c2c:	e00f      	b.n	8004c4e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004c2e:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <_SendPacket+0x270>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	4b01      	ldr	r3, [pc, #4]	; (8004c3c <_SendPacket+0x270>)
 8004c38:	701a      	strb	r2, [r3, #0]
 8004c3a:	e008      	b.n	8004c4e <_SendPacket+0x282>
 8004c3c:	200143e0 	.word	0x200143e0
 8004c40:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004c44:	bf00      	nop
 8004c46:	e002      	b.n	8004c4e <_SendPacket+0x282>
      goto SendDone;
 8004c48:	bf00      	nop
 8004c4a:	e000      	b.n	8004c4e <_SendPacket+0x282>
      goto SendDone;
 8004c4c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004c4e:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <_SendPacket+0x2d4>)
 8004c50:	7e1b      	ldrb	r3, [r3, #24]
 8004c52:	4619      	mov	r1, r3
 8004c54:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <_SendPacket+0x2d8>)
 8004c56:	460b      	mov	r3, r1
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	440b      	add	r3, r1
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	4413      	add	r3, r2
 8004c60:	336c      	adds	r3, #108	; 0x6c
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <_SendPacket+0x2d4>)
 8004c66:	7e1b      	ldrb	r3, [r3, #24]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	490e      	ldr	r1, [pc, #56]	; (8004ca4 <_SendPacket+0x2d8>)
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4403      	add	r3, r0
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	440b      	add	r3, r1
 8004c76:	3370      	adds	r3, #112	; 0x70
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d00b      	beq.n	8004c96 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <_SendPacket+0x2d4>)
 8004c80:	789b      	ldrb	r3, [r3, #2]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d107      	bne.n	8004c96 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004c86:	4b06      	ldr	r3, [pc, #24]	; (8004ca0 <_SendPacket+0x2d4>)
 8004c88:	2201      	movs	r2, #1
 8004c8a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004c8c:	f7ff fdbe 	bl	800480c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004c90:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <_SendPacket+0x2d4>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004c96:	bf00      	nop
 8004c98:	3728      	adds	r7, #40	; 0x28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200143e0 	.word	0x200143e0
 8004ca4:	20012f20 	.word	0x20012f20

08004ca8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cbc:	4917      	ldr	r1, [pc, #92]	; (8004d1c <SEGGER_SYSVIEW_Init+0x74>)
 8004cbe:	4818      	ldr	r0, [pc, #96]	; (8004d20 <SEGGER_SYSVIEW_Init+0x78>)
 8004cc0:	f7ff fc98 	bl	80045f4 <SEGGER_RTT_AllocUpBuffer>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	4b16      	ldr	r3, [pc, #88]	; (8004d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004ccc:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cce:	785a      	ldrb	r2, [r3, #1]
 8004cd0:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cd2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004cd4:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cd6:	7e1b      	ldrb	r3, [r3, #24]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	2308      	movs	r3, #8
 8004ce0:	4a11      	ldr	r2, [pc, #68]	; (8004d28 <SEGGER_SYSVIEW_Init+0x80>)
 8004ce2:	490f      	ldr	r1, [pc, #60]	; (8004d20 <SEGGER_SYSVIEW_Init+0x78>)
 8004ce4:	f7ff fd0a 	bl	80046fc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004cee:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <SEGGER_SYSVIEW_Init+0x84>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a0c      	ldr	r2, [pc, #48]	; (8004d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cf4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004cf6:	4a0b      	ldr	r2, [pc, #44]	; (8004d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004cfc:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004d02:	4a08      	ldr	r2, [pc, #32]	; (8004d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004d08:	4a06      	ldr	r2, [pc, #24]	; (8004d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004d0e:	4b05      	ldr	r3, [pc, #20]	; (8004d24 <SEGGER_SYSVIEW_Init+0x7c>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004d14:	bf00      	nop
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	200133d8 	.word	0x200133d8
 8004d20:	08006668 	.word	0x08006668
 8004d24:	200143e0 	.word	0x200143e0
 8004d28:	200143d8 	.word	0x200143d8
 8004d2c:	e0001004 	.word	0xe0001004

08004d30 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004d38:	4a04      	ldr	r2, [pc, #16]	; (8004d4c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6113      	str	r3, [r2, #16]
}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
 8004d4a:	bf00      	nop
 8004d4c:	200143e0 	.word	0x200143e0

08004d50 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d58:	f3ef 8311 	mrs	r3, BASEPRI
 8004d5c:	f04f 0120 	mov.w	r1, #32
 8004d60:	f381 8811 	msr	BASEPRI, r1
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	4808      	ldr	r0, [pc, #32]	; (8004d88 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004d68:	f7ff fd44 	bl	80047f4 <_PreparePacket>
 8004d6c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	68b8      	ldr	r0, [r7, #8]
 8004d74:	f7ff fe2a 	bl	80049cc <_SendPacket>
  RECORD_END();
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f383 8811 	msr	BASEPRI, r3
}
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20014410 	.word	0x20014410

08004d8c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d96:	f3ef 8311 	mrs	r3, BASEPRI
 8004d9a:	f04f 0120 	mov.w	r1, #32
 8004d9e:	f381 8811 	msr	BASEPRI, r1
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	4816      	ldr	r0, [pc, #88]	; (8004e00 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004da6:	f7ff fd25 	bl	80047f4 <_PreparePacket>
 8004daa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	e00b      	b.n	8004dd2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	1c59      	adds	r1, r3, #1
 8004dc2:	61f9      	str	r1, [r7, #28]
 8004dc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	701a      	strb	r2, [r3, #0]
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	09db      	lsrs	r3, r3, #7
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b7f      	cmp	r3, #127	; 0x7f
 8004dd6:	d8f0      	bhi.n	8004dba <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	1c5a      	adds	r2, r3, #1
 8004ddc:	61fa      	str	r2, [r7, #28]
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	b2d2      	uxtb	r2, r2
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	68f9      	ldr	r1, [r7, #12]
 8004dec:	6938      	ldr	r0, [r7, #16]
 8004dee:	f7ff fded 	bl	80049cc <_SendPacket>
  RECORD_END();
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f383 8811 	msr	BASEPRI, r3
}
 8004df8:	bf00      	nop
 8004dfa:	3720      	adds	r7, #32
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20014410 	.word	0x20014410

08004e04 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08c      	sub	sp, #48	; 0x30
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e10:	f3ef 8311 	mrs	r3, BASEPRI
 8004e14:	f04f 0120 	mov.w	r1, #32
 8004e18:	f381 8811 	msr	BASEPRI, r1
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	4825      	ldr	r0, [pc, #148]	; (8004eb4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004e20:	f7ff fce8 	bl	80047f4 <_PreparePacket>
 8004e24:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e32:	e00b      	b.n	8004e4c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	1c59      	adds	r1, r3, #1
 8004e3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e48:	09db      	lsrs	r3, r3, #7
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e50:	d8f0      	bhi.n	8004e34 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e60:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	623b      	str	r3, [r7, #32]
 8004e6a:	e00b      	b.n	8004e84 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004e6c:	6a3b      	ldr	r3, [r7, #32]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	1c59      	adds	r1, r3, #1
 8004e74:	6279      	str	r1, [r7, #36]	; 0x24
 8004e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	09db      	lsrs	r3, r3, #7
 8004e82:	623b      	str	r3, [r7, #32]
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	2b7f      	cmp	r3, #127	; 0x7f
 8004e88:	d8f0      	bhi.n	8004e6c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e90:	6a3a      	ldr	r2, [r7, #32]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	6979      	ldr	r1, [r7, #20]
 8004e9e:	69b8      	ldr	r0, [r7, #24]
 8004ea0:	f7ff fd94 	bl	80049cc <_SendPacket>
  RECORD_END();
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f383 8811 	msr	BASEPRI, r3
}
 8004eaa:	bf00      	nop
 8004eac:	3730      	adds	r7, #48	; 0x30
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20014410 	.word	0x20014410

08004eb8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08e      	sub	sp, #56	; 0x38
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eca:	f04f 0120 	mov.w	r1, #32
 8004ece:	f381 8811 	msr	BASEPRI, r1
 8004ed2:	61fb      	str	r3, [r7, #28]
 8004ed4:	4832      	ldr	r0, [pc, #200]	; (8004fa0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004ed6:	f7ff fc8d 	bl	80047f4 <_PreparePacket>
 8004eda:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ee8:	e00b      	b.n	8004f02 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef0:	1c59      	adds	r1, r3, #1
 8004ef2:	6379      	str	r1, [r7, #52]	; 0x34
 8004ef4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	09db      	lsrs	r3, r3, #7
 8004f00:	633b      	str	r3, [r7, #48]	; 0x30
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	2b7f      	cmp	r3, #127	; 0x7f
 8004f06:	d8f0      	bhi.n	8004eea <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	637a      	str	r2, [r7, #52]	; 0x34
 8004f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f10:	b2d2      	uxtb	r2, r2
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f20:	e00b      	b.n	8004f3a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f28:	1c59      	adds	r1, r3, #1
 8004f2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	09db      	lsrs	r3, r3, #7
 8004f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f3e:	d8f0      	bhi.n	8004f22 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	623b      	str	r3, [r7, #32]
 8004f58:	e00b      	b.n	8004f72 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	1c59      	adds	r1, r3, #1
 8004f62:	6279      	str	r1, [r7, #36]	; 0x24
 8004f64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	09db      	lsrs	r3, r3, #7
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	2b7f      	cmp	r3, #127	; 0x7f
 8004f76:	d8f0      	bhi.n	8004f5a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	1c5a      	adds	r2, r3, #1
 8004f7c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f7e:	6a3a      	ldr	r2, [r7, #32]
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	701a      	strb	r2, [r3, #0]
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	6979      	ldr	r1, [r7, #20]
 8004f8c:	69b8      	ldr	r0, [r7, #24]
 8004f8e:	f7ff fd1d 	bl	80049cc <_SendPacket>
  RECORD_END();
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	f383 8811 	msr	BASEPRI, r3
}
 8004f98:	bf00      	nop
 8004f9a:	3738      	adds	r7, #56	; 0x38
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	20014410 	.word	0x20014410

08004fa4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b090      	sub	sp, #64	; 0x40
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb6:	f04f 0120 	mov.w	r1, #32
 8004fba:	f381 8811 	msr	BASEPRI, r1
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	4840      	ldr	r0, [pc, #256]	; (80050c4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004fc2:	f7ff fc17 	bl	80047f4 <_PreparePacket>
 8004fc6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fd4:	e00b      	b.n	8004fee <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fdc:	1c59      	adds	r1, r3, #1
 8004fde:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004fe0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	09db      	lsrs	r3, r3, #7
 8004fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	2b7f      	cmp	r3, #127	; 0x7f
 8004ff2:	d8f0      	bhi.n	8004fd6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ffc:	b2d2      	uxtb	r2, r2
 8004ffe:	701a      	strb	r2, [r3, #0]
 8005000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005002:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	637b      	str	r3, [r7, #52]	; 0x34
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
 800500c:	e00b      	b.n	8005026 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	b2da      	uxtb	r2, r3
 8005012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005014:	1c59      	adds	r1, r3, #1
 8005016:	6379      	str	r1, [r7, #52]	; 0x34
 8005018:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	09db      	lsrs	r3, r3, #7
 8005024:	633b      	str	r3, [r7, #48]	; 0x30
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	2b7f      	cmp	r3, #127	; 0x7f
 800502a:	d8f0      	bhi.n	800500e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	637a      	str	r2, [r7, #52]	; 0x34
 8005032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28
 8005044:	e00b      	b.n	800505e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005048:	b2da      	uxtb	r2, r3
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	1c59      	adds	r1, r3, #1
 800504e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005050:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	09db      	lsrs	r3, r3, #7
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
 800505e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005060:	2b7f      	cmp	r3, #127	; 0x7f
 8005062:	d8f0      	bhi.n	8005046 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	62fa      	str	r2, [r7, #44]	; 0x2c
 800506a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
 8005078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507a:	623b      	str	r3, [r7, #32]
 800507c:	e00b      	b.n	8005096 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	6279      	str	r1, [r7, #36]	; 0x24
 8005088:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	09db      	lsrs	r3, r3, #7
 8005094:	623b      	str	r3, [r7, #32]
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	2b7f      	cmp	r3, #127	; 0x7f
 800509a:	d8f0      	bhi.n	800507e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	627a      	str	r2, [r7, #36]	; 0x24
 80050a2:	6a3a      	ldr	r2, [r7, #32]
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	6979      	ldr	r1, [r7, #20]
 80050b0:	69b8      	ldr	r0, [r7, #24]
 80050b2:	f7ff fc8b 	bl	80049cc <_SendPacket>
  RECORD_END();
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f383 8811 	msr	BASEPRI, r3
}
 80050bc:	bf00      	nop
 80050be:	3740      	adds	r7, #64	; 0x40
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	20014410 	.word	0x20014410

080050c8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08c      	sub	sp, #48	; 0x30
 80050cc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80050ce:	4b58      	ldr	r3, [pc, #352]	; (8005230 <SEGGER_SYSVIEW_Start+0x168>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80050d4:	f3ef 8311 	mrs	r3, BASEPRI
 80050d8:	f04f 0120 	mov.w	r1, #32
 80050dc:	f381 8811 	msr	BASEPRI, r1
 80050e0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80050e2:	4b53      	ldr	r3, [pc, #332]	; (8005230 <SEGGER_SYSVIEW_Start+0x168>)
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	220a      	movs	r2, #10
 80050e8:	4952      	ldr	r1, [pc, #328]	; (8005234 <SEGGER_SYSVIEW_Start+0x16c>)
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fb f878 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80050f6:	200a      	movs	r0, #10
 80050f8:	f7ff fe2a 	bl	8004d50 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80050fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005100:	f04f 0120 	mov.w	r1, #32
 8005104:	f381 8811 	msr	BASEPRI, r1
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	484b      	ldr	r0, [pc, #300]	; (8005238 <SEGGER_SYSVIEW_Start+0x170>)
 800510c:	f7ff fb72 	bl	80047f4 <_PreparePacket>
 8005110:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511a:	4b45      	ldr	r3, [pc, #276]	; (8005230 <SEGGER_SYSVIEW_Start+0x168>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005120:	e00b      	b.n	800513a <SEGGER_SYSVIEW_Start+0x72>
 8005122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005124:	b2da      	uxtb	r2, r3
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	1c59      	adds	r1, r3, #1
 800512a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800512c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	09db      	lsrs	r3, r3, #7
 8005138:	62bb      	str	r3, [r7, #40]	; 0x28
 800513a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513c:	2b7f      	cmp	r3, #127	; 0x7f
 800513e:	d8f0      	bhi.n	8005122 <SEGGER_SYSVIEW_Start+0x5a>
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	701a      	strb	r2, [r3, #0]
 800514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	627b      	str	r3, [r7, #36]	; 0x24
 8005154:	4b36      	ldr	r3, [pc, #216]	; (8005230 <SEGGER_SYSVIEW_Start+0x168>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	623b      	str	r3, [r7, #32]
 800515a:	e00b      	b.n	8005174 <SEGGER_SYSVIEW_Start+0xac>
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	b2da      	uxtb	r2, r3
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	6279      	str	r1, [r7, #36]	; 0x24
 8005166:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	09db      	lsrs	r3, r3, #7
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	2b7f      	cmp	r3, #127	; 0x7f
 8005178:	d8f0      	bhi.n	800515c <SEGGER_SYSVIEW_Start+0x94>
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	1c5a      	adds	r2, r3, #1
 800517e:	627a      	str	r2, [r7, #36]	; 0x24
 8005180:	6a3a      	ldr	r2, [r7, #32]
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	4b28      	ldr	r3, [pc, #160]	; (8005230 <SEGGER_SYSVIEW_Start+0x168>)
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	e00b      	b.n	80051ae <SEGGER_SYSVIEW_Start+0xe6>
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	1c59      	adds	r1, r3, #1
 800519e:	61f9      	str	r1, [r7, #28]
 80051a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a4:	b2d2      	uxtb	r2, r2
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	09db      	lsrs	r3, r3, #7
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b7f      	cmp	r3, #127	; 0x7f
 80051b2:	d8f0      	bhi.n	8005196 <SEGGER_SYSVIEW_Start+0xce>
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	61fa      	str	r2, [r7, #28]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	b2d2      	uxtb	r2, r2
 80051be:	701a      	strb	r2, [r3, #0]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	e00b      	b.n	80051e6 <SEGGER_SYSVIEW_Start+0x11e>
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	1c59      	adds	r1, r3, #1
 80051d6:	6179      	str	r1, [r7, #20]
 80051d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	09db      	lsrs	r3, r3, #7
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ea:	d8f0      	bhi.n	80051ce <SEGGER_SYSVIEW_Start+0x106>
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	1c5a      	adds	r2, r3, #1
 80051f0:	617a      	str	r2, [r7, #20]
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80051fc:	2218      	movs	r2, #24
 80051fe:	6839      	ldr	r1, [r7, #0]
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff fbe3 	bl	80049cc <_SendPacket>
      RECORD_END();
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800520c:	4b08      	ldr	r3, [pc, #32]	; (8005230 <SEGGER_SYSVIEW_Start+0x168>)
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005214:	4b06      	ldr	r3, [pc, #24]	; (8005230 <SEGGER_SYSVIEW_Start+0x168>)
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800521a:	f000 f9eb 	bl	80055f4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800521e:	f000 f9b1 	bl	8005584 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005222:	f000 fc2d 	bl	8005a80 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005226:	bf00      	nop
 8005228:	3730      	adds	r7, #48	; 0x30
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	200143e0 	.word	0x200143e0
 8005234:	080066a4 	.word	0x080066a4
 8005238:	20014410 	.word	0x20014410

0800523c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005242:	f3ef 8311 	mrs	r3, BASEPRI
 8005246:	f04f 0120 	mov.w	r1, #32
 800524a:	f381 8811 	msr	BASEPRI, r1
 800524e:	607b      	str	r3, [r7, #4]
 8005250:	480b      	ldr	r0, [pc, #44]	; (8005280 <SEGGER_SYSVIEW_Stop+0x44>)
 8005252:	f7ff facf 	bl	80047f4 <_PreparePacket>
 8005256:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <SEGGER_SYSVIEW_Stop+0x48>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005260:	220b      	movs	r2, #11
 8005262:	6839      	ldr	r1, [r7, #0]
 8005264:	6838      	ldr	r0, [r7, #0]
 8005266:	f7ff fbb1 	bl	80049cc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800526a:	4b06      	ldr	r3, [pc, #24]	; (8005284 <SEGGER_SYSVIEW_Stop+0x48>)
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f383 8811 	msr	BASEPRI, r3
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20014410 	.word	0x20014410
 8005284:	200143e0 	.word	0x200143e0

08005288 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b08c      	sub	sp, #48	; 0x30
 800528c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800528e:	f3ef 8311 	mrs	r3, BASEPRI
 8005292:	f04f 0120 	mov.w	r1, #32
 8005296:	f381 8811 	msr	BASEPRI, r1
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	4845      	ldr	r0, [pc, #276]	; (80053b4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800529e:	f7ff faa9 	bl	80047f4 <_PreparePacket>
 80052a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ac:	4b42      	ldr	r3, [pc, #264]	; (80053b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052b2:	e00b      	b.n	80052cc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	1c59      	adds	r1, r3, #1
 80052bc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80052be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	09db      	lsrs	r3, r3, #7
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	2b7f      	cmp	r3, #127	; 0x7f
 80052d0:	d8f0      	bhi.n	80052b4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80052d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052da:	b2d2      	uxtb	r2, r2
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
 80052e6:	4b34      	ldr	r3, [pc, #208]	; (80053b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	623b      	str	r3, [r7, #32]
 80052ec:	e00b      	b.n	8005306 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	1c59      	adds	r1, r3, #1
 80052f6:	6279      	str	r1, [r7, #36]	; 0x24
 80052f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	09db      	lsrs	r3, r3, #7
 8005304:	623b      	str	r3, [r7, #32]
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	2b7f      	cmp	r3, #127	; 0x7f
 800530a:	d8f0      	bhi.n	80052ee <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	627a      	str	r2, [r7, #36]	; 0x24
 8005312:	6a3a      	ldr	r2, [r7, #32]
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	61fb      	str	r3, [r7, #28]
 8005320:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	61bb      	str	r3, [r7, #24]
 8005326:	e00b      	b.n	8005340 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	1c59      	adds	r1, r3, #1
 8005330:	61f9      	str	r1, [r7, #28]
 8005332:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	09db      	lsrs	r3, r3, #7
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2b7f      	cmp	r3, #127	; 0x7f
 8005344:	d8f0      	bhi.n	8005328 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	61fa      	str	r2, [r7, #28]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	e00b      	b.n	8005378 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	1c59      	adds	r1, r3, #1
 8005368:	6179      	str	r1, [r7, #20]
 800536a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	09db      	lsrs	r3, r3, #7
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b7f      	cmp	r3, #127	; 0x7f
 800537c:	d8f0      	bhi.n	8005360 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	617a      	str	r2, [r7, #20]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800538e:	2218      	movs	r2, #24
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	68b8      	ldr	r0, [r7, #8]
 8005394:	f7ff fb1a 	bl	80049cc <_SendPacket>
  RECORD_END();
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800539e:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80053a6:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	4798      	blx	r3
  }
}
 80053ac:	bf00      	nop
 80053ae:	3730      	adds	r7, #48	; 0x30
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20014410 	.word	0x20014410
 80053b8:	200143e0 	.word	0x200143e0

080053bc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80053bc:	b580      	push	{r7, lr}
 80053be:	b092      	sub	sp, #72	; 0x48
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80053c4:	f3ef 8311 	mrs	r3, BASEPRI
 80053c8:	f04f 0120 	mov.w	r1, #32
 80053cc:	f381 8811 	msr	BASEPRI, r1
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	486a      	ldr	r0, [pc, #424]	; (800557c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80053d4:	f7ff fa0e 	bl	80047f4 <_PreparePacket>
 80053d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	647b      	str	r3, [r7, #68]	; 0x44
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	4b66      	ldr	r3, [pc, #408]	; (8005580 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	643b      	str	r3, [r7, #64]	; 0x40
 80053ee:	e00b      	b.n	8005408 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80053f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	6479      	str	r1, [r7, #68]	; 0x44
 80053fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005404:	09db      	lsrs	r3, r3, #7
 8005406:	643b      	str	r3, [r7, #64]	; 0x40
 8005408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800540a:	2b7f      	cmp	r3, #127	; 0x7f
 800540c:	d8f0      	bhi.n	80053f0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800540e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	647a      	str	r2, [r7, #68]	; 0x44
 8005414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
 800541a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	63bb      	str	r3, [r7, #56]	; 0x38
 8005428:	e00b      	b.n	8005442 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800542a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542c:	b2da      	uxtb	r2, r3
 800542e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005430:	1c59      	adds	r1, r3, #1
 8005432:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005434:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	09db      	lsrs	r3, r3, #7
 8005440:	63bb      	str	r3, [r7, #56]	; 0x38
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	2b7f      	cmp	r3, #127	; 0x7f
 8005446:	d8f0      	bhi.n	800542a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800544e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005450:	b2d2      	uxtb	r2, r2
 8005452:	701a      	strb	r2, [r3, #0]
 8005454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005456:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	4619      	mov	r1, r3
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7ff f997 	bl	8004794 <_EncodeStr>
 8005466:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005468:	2209      	movs	r2, #9
 800546a:	68f9      	ldr	r1, [r7, #12]
 800546c:	6938      	ldr	r0, [r7, #16]
 800546e:	f7ff faad 	bl	80049cc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	637b      	str	r3, [r7, #52]	; 0x34
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4b40      	ldr	r3, [pc, #256]	; (8005580 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	633b      	str	r3, [r7, #48]	; 0x30
 8005486:	e00b      	b.n	80054a0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548a:	b2da      	uxtb	r2, r3
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	1c59      	adds	r1, r3, #1
 8005490:	6379      	str	r1, [r7, #52]	; 0x34
 8005492:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549c:	09db      	lsrs	r3, r3, #7
 800549e:	633b      	str	r3, [r7, #48]	; 0x30
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	2b7f      	cmp	r3, #127	; 0x7f
 80054a4:	d8f0      	bhi.n	8005488 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	637a      	str	r2, [r7, #52]	; 0x34
 80054ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	701a      	strb	r2, [r3, #0]
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c0:	e00b      	b.n	80054da <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80054c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	1c59      	adds	r1, r3, #1
 80054ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80054cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	701a      	strb	r2, [r3, #0]
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	09db      	lsrs	r3, r3, #7
 80054d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80054da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054dc:	2b7f      	cmp	r3, #127	; 0x7f
 80054de:	d8f0      	bhi.n	80054c2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	1c5a      	adds	r2, r3, #1
 80054e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	623b      	str	r3, [r7, #32]
 80054fa:	e00b      	b.n	8005514 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80054fc:	6a3b      	ldr	r3, [r7, #32]
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	1c59      	adds	r1, r3, #1
 8005504:	6279      	str	r1, [r7, #36]	; 0x24
 8005506:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	09db      	lsrs	r3, r3, #7
 8005512:	623b      	str	r3, [r7, #32]
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	2b7f      	cmp	r3, #127	; 0x7f
 8005518:	d8f0      	bhi.n	80054fc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800551a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	627a      	str	r2, [r7, #36]	; 0x24
 8005520:	6a3a      	ldr	r2, [r7, #32]
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	61fb      	str	r3, [r7, #28]
 800552e:	2300      	movs	r3, #0
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	e00b      	b.n	800554c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	b2da      	uxtb	r2, r3
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	1c59      	adds	r1, r3, #1
 800553c:	61f9      	str	r1, [r7, #28]
 800553e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005542:	b2d2      	uxtb	r2, r2
 8005544:	701a      	strb	r2, [r3, #0]
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	09db      	lsrs	r3, r3, #7
 800554a:	61bb      	str	r3, [r7, #24]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b7f      	cmp	r3, #127	; 0x7f
 8005550:	d8f0      	bhi.n	8005534 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	61fa      	str	r2, [r7, #28]
 8005558:	69ba      	ldr	r2, [r7, #24]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005562:	2215      	movs	r2, #21
 8005564:	68f9      	ldr	r1, [r7, #12]
 8005566:	6938      	ldr	r0, [r7, #16]
 8005568:	f7ff fa30 	bl	80049cc <_SendPacket>
  RECORD_END();
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f383 8811 	msr	BASEPRI, r3
}
 8005572:	bf00      	nop
 8005574:	3748      	adds	r7, #72	; 0x48
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20014410 	.word	0x20014410
 8005580:	200143e0 	.word	0x200143e0

08005584 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005588:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005590:	4b05      	ldr	r3, [pc, #20]	; (80055a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800559a:	4b03      	ldr	r3, [pc, #12]	; (80055a8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4798      	blx	r3
  }
}
 80055a2:	bf00      	nop
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	200143e0 	.word	0x200143e0

080055ac <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055b4:	f3ef 8311 	mrs	r3, BASEPRI
 80055b8:	f04f 0120 	mov.w	r1, #32
 80055bc:	f381 8811 	msr	BASEPRI, r1
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	480b      	ldr	r0, [pc, #44]	; (80055f0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80055c4:	f7ff f916 	bl	80047f4 <_PreparePacket>
 80055c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055ca:	2280      	movs	r2, #128	; 0x80
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	6938      	ldr	r0, [r7, #16]
 80055d0:	f7ff f8e0 	bl	8004794 <_EncodeStr>
 80055d4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80055d6:	220e      	movs	r2, #14
 80055d8:	68f9      	ldr	r1, [r7, #12]
 80055da:	6938      	ldr	r0, [r7, #16]
 80055dc:	f7ff f9f6 	bl	80049cc <_SendPacket>
  RECORD_END();
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f383 8811 	msr	BASEPRI, r3
}
 80055e6:	bf00      	nop
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	20014410 	.word	0x20014410

080055f4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80055f4:	b590      	push	{r4, r7, lr}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80055fa:	4b15      	ldr	r3, [pc, #84]	; (8005650 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01a      	beq.n	8005638 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005602:	4b13      	ldr	r3, [pc, #76]	; (8005650 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d015      	beq.n	8005638 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800560c:	4b10      	ldr	r3, [pc, #64]	; (8005650 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4798      	blx	r3
 8005614:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005618:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800561a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	000a      	movs	r2, r1
 8005628:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800562a:	4613      	mov	r3, r2
 800562c:	461a      	mov	r2, r3
 800562e:	4621      	mov	r1, r4
 8005630:	200d      	movs	r0, #13
 8005632:	f7ff fbe7 	bl	8004e04 <SEGGER_SYSVIEW_RecordU32x2>
 8005636:	e006      	b.n	8005646 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005638:	4b06      	ldr	r3, [pc, #24]	; (8005654 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4619      	mov	r1, r3
 800563e:	200c      	movs	r0, #12
 8005640:	f7ff fba4 	bl	8004d8c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	370c      	adds	r7, #12
 800564a:	46bd      	mov	sp, r7
 800564c:	bd90      	pop	{r4, r7, pc}
 800564e:	bf00      	nop
 8005650:	200143e0 	.word	0x200143e0
 8005654:	e0001004 	.word	0xe0001004

08005658 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b086      	sub	sp, #24
 800565c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800565e:	f3ef 8311 	mrs	r3, BASEPRI
 8005662:	f04f 0120 	mov.w	r1, #32
 8005666:	f381 8811 	msr	BASEPRI, r1
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	4819      	ldr	r0, [pc, #100]	; (80056d4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800566e:	f7ff f8c1 	bl	80047f4 <_PreparePacket>
 8005672:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005678:	4b17      	ldr	r3, [pc, #92]	; (80056d8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005680:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	e00b      	b.n	80056a4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	b2da      	uxtb	r2, r3
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	1c59      	adds	r1, r3, #1
 8005694:	6179      	str	r1, [r7, #20]
 8005696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	09db      	lsrs	r3, r3, #7
 80056a2:	613b      	str	r3, [r7, #16]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	2b7f      	cmp	r3, #127	; 0x7f
 80056a8:	d8f0      	bhi.n	800568c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	1c5a      	adds	r2, r3, #1
 80056ae:	617a      	str	r2, [r7, #20]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80056ba:	2202      	movs	r2, #2
 80056bc:	6879      	ldr	r1, [r7, #4]
 80056be:	68b8      	ldr	r0, [r7, #8]
 80056c0:	f7ff f984 	bl	80049cc <_SendPacket>
  RECORD_END();
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f383 8811 	msr	BASEPRI, r3
}
 80056ca:	bf00      	nop
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20014410 	.word	0x20014410
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80056e2:	f3ef 8311 	mrs	r3, BASEPRI
 80056e6:	f04f 0120 	mov.w	r1, #32
 80056ea:	f381 8811 	msr	BASEPRI, r1
 80056ee:	607b      	str	r3, [r7, #4]
 80056f0:	4807      	ldr	r0, [pc, #28]	; (8005710 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80056f2:	f7ff f87f 	bl	80047f4 <_PreparePacket>
 80056f6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80056f8:	2203      	movs	r2, #3
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	6838      	ldr	r0, [r7, #0]
 80056fe:	f7ff f965 	bl	80049cc <_SendPacket>
  RECORD_END();
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f383 8811 	msr	BASEPRI, r3
}
 8005708:	bf00      	nop
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20014410 	.word	0x20014410

08005714 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800571a:	f3ef 8311 	mrs	r3, BASEPRI
 800571e:	f04f 0120 	mov.w	r1, #32
 8005722:	f381 8811 	msr	BASEPRI, r1
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	4807      	ldr	r0, [pc, #28]	; (8005748 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800572a:	f7ff f863 	bl	80047f4 <_PreparePacket>
 800572e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005730:	2212      	movs	r2, #18
 8005732:	6839      	ldr	r1, [r7, #0]
 8005734:	6838      	ldr	r0, [r7, #0]
 8005736:	f7ff f949 	bl	80049cc <_SendPacket>
  RECORD_END();
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f383 8811 	msr	BASEPRI, r3
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20014410 	.word	0x20014410

0800574c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005752:	f3ef 8311 	mrs	r3, BASEPRI
 8005756:	f04f 0120 	mov.w	r1, #32
 800575a:	f381 8811 	msr	BASEPRI, r1
 800575e:	607b      	str	r3, [r7, #4]
 8005760:	4807      	ldr	r0, [pc, #28]	; (8005780 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005762:	f7ff f847 	bl	80047f4 <_PreparePacket>
 8005766:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005768:	2211      	movs	r2, #17
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6838      	ldr	r0, [r7, #0]
 800576e:	f7ff f92d 	bl	80049cc <_SendPacket>
  RECORD_END();
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f383 8811 	msr	BASEPRI, r3
}
 8005778:	bf00      	nop
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}
 8005780:	20014410 	.word	0x20014410

08005784 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005784:	b580      	push	{r7, lr}
 8005786:	b088      	sub	sp, #32
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800578c:	f3ef 8311 	mrs	r3, BASEPRI
 8005790:	f04f 0120 	mov.w	r1, #32
 8005794:	f381 8811 	msr	BASEPRI, r1
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	4819      	ldr	r0, [pc, #100]	; (8005800 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800579c:	f7ff f82a 	bl	80047f4 <_PreparePacket>
 80057a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80057a6:	4b17      	ldr	r3, [pc, #92]	; (8005804 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	e00b      	b.n	80057d2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	1c59      	adds	r1, r3, #1
 80057c2:	61f9      	str	r1, [r7, #28]
 80057c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	09db      	lsrs	r3, r3, #7
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	2b7f      	cmp	r3, #127	; 0x7f
 80057d6:	d8f0      	bhi.n	80057ba <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	61fa      	str	r2, [r7, #28]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	b2d2      	uxtb	r2, r2
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80057e8:	2208      	movs	r2, #8
 80057ea:	68f9      	ldr	r1, [r7, #12]
 80057ec:	6938      	ldr	r0, [r7, #16]
 80057ee:	f7ff f8ed 	bl	80049cc <_SendPacket>
  RECORD_END();
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f383 8811 	msr	BASEPRI, r3
}
 80057f8:	bf00      	nop
 80057fa:	3720      	adds	r7, #32
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20014410 	.word	0x20014410
 8005804:	200143e0 	.word	0x200143e0

08005808 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005810:	f3ef 8311 	mrs	r3, BASEPRI
 8005814:	f04f 0120 	mov.w	r1, #32
 8005818:	f381 8811 	msr	BASEPRI, r1
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	4819      	ldr	r0, [pc, #100]	; (8005884 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005820:	f7fe ffe8 	bl	80047f4 <_PreparePacket>
 8005824:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800582a:	4b17      	ldr	r3, [pc, #92]	; (8005888 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	61fb      	str	r3, [r7, #28]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	61bb      	str	r3, [r7, #24]
 800583c:	e00b      	b.n	8005856 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	b2da      	uxtb	r2, r3
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	1c59      	adds	r1, r3, #1
 8005846:	61f9      	str	r1, [r7, #28]
 8005848:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800584c:	b2d2      	uxtb	r2, r2
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	09db      	lsrs	r3, r3, #7
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	2b7f      	cmp	r3, #127	; 0x7f
 800585a:	d8f0      	bhi.n	800583e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	61fa      	str	r2, [r7, #28]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800586c:	2204      	movs	r2, #4
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	6938      	ldr	r0, [r7, #16]
 8005872:	f7ff f8ab 	bl	80049cc <_SendPacket>
  RECORD_END();
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f383 8811 	msr	BASEPRI, r3
}
 800587c:	bf00      	nop
 800587e:	3720      	adds	r7, #32
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20014410 	.word	0x20014410
 8005888:	200143e0 	.word	0x200143e0

0800588c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005894:	f3ef 8311 	mrs	r3, BASEPRI
 8005898:	f04f 0120 	mov.w	r1, #32
 800589c:	f381 8811 	msr	BASEPRI, r1
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	4819      	ldr	r0, [pc, #100]	; (8005908 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80058a4:	f7fe ffa6 	bl	80047f4 <_PreparePacket>
 80058a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80058ae:	4b17      	ldr	r3, [pc, #92]	; (800590c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	61fb      	str	r3, [r7, #28]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	e00b      	b.n	80058da <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	1c59      	adds	r1, r3, #1
 80058ca:	61f9      	str	r1, [r7, #28]
 80058cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058d0:	b2d2      	uxtb	r2, r2
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	09db      	lsrs	r3, r3, #7
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	2b7f      	cmp	r3, #127	; 0x7f
 80058de:	d8f0      	bhi.n	80058c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	61fa      	str	r2, [r7, #28]
 80058e6:	69ba      	ldr	r2, [r7, #24]
 80058e8:	b2d2      	uxtb	r2, r2
 80058ea:	701a      	strb	r2, [r3, #0]
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80058f0:	2206      	movs	r2, #6
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	6938      	ldr	r0, [r7, #16]
 80058f6:	f7ff f869 	bl	80049cc <_SendPacket>
  RECORD_END();
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f383 8811 	msr	BASEPRI, r3
}
 8005900:	bf00      	nop
 8005902:	3720      	adds	r7, #32
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20014410 	.word	0x20014410
 800590c:	200143e0 	.word	0x200143e0

08005910 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005918:	4b04      	ldr	r3, [pc, #16]	; (800592c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	1ad3      	subs	r3, r2, r3
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	200143e0 	.word	0x200143e0

08005930 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b08c      	sub	sp, #48	; 0x30
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800593a:	4b40      	ldr	r3, [pc, #256]	; (8005a3c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d077      	beq.n	8005a32 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005942:	4b3e      	ldr	r3, [pc, #248]	; (8005a3c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005948:	2300      	movs	r3, #0
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
 800594c:	e008      	b.n	8005960 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800594e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595c:	3301      	adds	r3, #1
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005964:	429a      	cmp	r2, r3
 8005966:	d3f2      	bcc.n	800594e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005968:	e000      	b.n	800596c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800596a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800596c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596e:	2b00      	cmp	r3, #0
 8005970:	d055      	beq.n	8005a1e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005972:	f3ef 8311 	mrs	r3, BASEPRI
 8005976:	f04f 0120 	mov.w	r1, #32
 800597a:	f381 8811 	msr	BASEPRI, r1
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	482f      	ldr	r0, [pc, #188]	; (8005a40 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005982:	f7fe ff37 	bl	80047f4 <_PreparePacket>
 8005986:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	627b      	str	r3, [r7, #36]	; 0x24
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	623b      	str	r3, [r7, #32]
 8005994:	e00b      	b.n	80059ae <SEGGER_SYSVIEW_SendModule+0x7e>
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	b2da      	uxtb	r2, r3
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	1c59      	adds	r1, r3, #1
 800599e:	6279      	str	r1, [r7, #36]	; 0x24
 80059a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	09db      	lsrs	r3, r3, #7
 80059ac:	623b      	str	r3, [r7, #32]
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	2b7f      	cmp	r3, #127	; 0x7f
 80059b2:	d8f0      	bhi.n	8005996 <SEGGER_SYSVIEW_SendModule+0x66>
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	627a      	str	r2, [r7, #36]	; 0x24
 80059ba:	6a3a      	ldr	r2, [r7, #32]
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	61fb      	str	r3, [r7, #28]
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	e00b      	b.n	80059e8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	1c59      	adds	r1, r3, #1
 80059d8:	61f9      	str	r1, [r7, #28]
 80059da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059de:	b2d2      	uxtb	r2, r2
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	09db      	lsrs	r3, r3, #7
 80059e6:	61bb      	str	r3, [r7, #24]
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2b7f      	cmp	r3, #127	; 0x7f
 80059ec:	d8f0      	bhi.n	80059d0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	61fa      	str	r2, [r7, #28]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	2280      	movs	r2, #128	; 0x80
 8005a04:	4619      	mov	r1, r3
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f7fe fec4 	bl	8004794 <_EncodeStr>
 8005a0c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005a0e:	2216      	movs	r2, #22
 8005a10:	68f9      	ldr	r1, [r7, #12]
 8005a12:	6938      	ldr	r0, [r7, #16]
 8005a14:	f7fe ffda 	bl	80049cc <_SendPacket>
      RECORD_END();
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d006      	beq.n	8005a32 <SEGGER_SYSVIEW_SendModule+0x102>
 8005a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	4798      	blx	r3
    }
  }
}
 8005a32:	bf00      	nop
 8005a34:	3730      	adds	r7, #48	; 0x30
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20014408 	.word	0x20014408
 8005a40:	20014410 	.word	0x20014410

08005a44 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	; (8005a7c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00f      	beq.n	8005a72 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005a52:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1f2      	bne.n	8005a58 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20014408 	.word	0x20014408

08005a80 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005a86:	f3ef 8311 	mrs	r3, BASEPRI
 8005a8a:	f04f 0120 	mov.w	r1, #32
 8005a8e:	f381 8811 	msr	BASEPRI, r1
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	4817      	ldr	r0, [pc, #92]	; (8005af4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005a96:	f7fe fead 	bl	80047f4 <_PreparePacket>
 8005a9a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	4b14      	ldr	r3, [pc, #80]	; (8005af8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	613b      	str	r3, [r7, #16]
 8005aaa:	e00b      	b.n	8005ac4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	b2da      	uxtb	r2, r3
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	1c59      	adds	r1, r3, #1
 8005ab4:	6179      	str	r1, [r7, #20]
 8005ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	09db      	lsrs	r3, r3, #7
 8005ac2:	613b      	str	r3, [r7, #16]
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ac8:	d8f0      	bhi.n	8005aac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	1c5a      	adds	r2, r3, #1
 8005ace:	617a      	str	r2, [r7, #20]
 8005ad0:	693a      	ldr	r2, [r7, #16]
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005ada:	221b      	movs	r2, #27
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	68b8      	ldr	r0, [r7, #8]
 8005ae0:	f7fe ff74 	bl	80049cc <_SendPacket>
  RECORD_END();
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f383 8811 	msr	BASEPRI, r3
}
 8005aea:	bf00      	nop
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20014410 	.word	0x20014410
 8005af8:	2001440c 	.word	0x2001440c

08005afc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b04:	f3ef 8311 	mrs	r3, BASEPRI
 8005b08:	f04f 0120 	mov.w	r1, #32
 8005b0c:	f381 8811 	msr	BASEPRI, r1
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	4827      	ldr	r0, [pc, #156]	; (8005bb0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005b14:	f7fe fe6e 	bl	80047f4 <_PreparePacket>
 8005b18:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005b1a:	2280      	movs	r2, #128	; 0x80
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	6938      	ldr	r0, [r7, #16]
 8005b20:	f7fe fe38 	bl	8004794 <_EncodeStr>
 8005b24:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	623b      	str	r3, [r7, #32]
 8005b2e:	e00b      	b.n	8005b48 <SEGGER_SYSVIEW_Warn+0x4c>
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	b2da      	uxtb	r2, r3
 8005b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b36:	1c59      	adds	r1, r3, #1
 8005b38:	6279      	str	r1, [r7, #36]	; 0x24
 8005b3a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b3e:	b2d2      	uxtb	r2, r2
 8005b40:	701a      	strb	r2, [r3, #0]
 8005b42:	6a3b      	ldr	r3, [r7, #32]
 8005b44:	09db      	lsrs	r3, r3, #7
 8005b46:	623b      	str	r3, [r7, #32]
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4c:	d8f0      	bhi.n	8005b30 <SEGGER_SYSVIEW_Warn+0x34>
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	627a      	str	r2, [r7, #36]	; 0x24
 8005b54:	6a3a      	ldr	r2, [r7, #32]
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	2300      	movs	r3, #0
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	e00b      	b.n	8005b80 <SEGGER_SYSVIEW_Warn+0x84>
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	1c59      	adds	r1, r3, #1
 8005b70:	61f9      	str	r1, [r7, #28]
 8005b72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b76:	b2d2      	uxtb	r2, r2
 8005b78:	701a      	strb	r2, [r3, #0]
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	09db      	lsrs	r3, r3, #7
 8005b7e:	61bb      	str	r3, [r7, #24]
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	2b7f      	cmp	r3, #127	; 0x7f
 8005b84:	d8f0      	bhi.n	8005b68 <SEGGER_SYSVIEW_Warn+0x6c>
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	61fa      	str	r2, [r7, #28]
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b96:	221a      	movs	r2, #26
 8005b98:	68f9      	ldr	r1, [r7, #12]
 8005b9a:	6938      	ldr	r0, [r7, #16]
 8005b9c:	f7fe ff16 	bl	80049cc <_SendPacket>
  RECORD_END();
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f383 8811 	msr	BASEPRI, r3
}
 8005ba6:	bf00      	nop
 8005ba8:	3728      	adds	r7, #40	; 0x28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20014410 	.word	0x20014410

08005bb4 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	6879      	ldr	r1, [r7, #4]
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	f7fe fcee 	bl	80045a8 <SEGGER_RTT_Write>
  return len;
 8005bcc:	683b      	ldr	r3, [r7, #0]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
	...

08005bd8 <std>:
 8005bd8:	2300      	movs	r3, #0
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	4604      	mov	r4, r0
 8005bde:	e9c0 3300 	strd	r3, r3, [r0]
 8005be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005be6:	6083      	str	r3, [r0, #8]
 8005be8:	8181      	strh	r1, [r0, #12]
 8005bea:	6643      	str	r3, [r0, #100]	; 0x64
 8005bec:	81c2      	strh	r2, [r0, #14]
 8005bee:	6183      	str	r3, [r0, #24]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	305c      	adds	r0, #92	; 0x5c
 8005bf6:	f000 f9e3 	bl	8005fc0 <memset>
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <std+0x38>)
 8005bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8005bfe:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <std+0x3c>)
 8005c00:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c02:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <std+0x40>)
 8005c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c06:	4b05      	ldr	r3, [pc, #20]	; (8005c1c <std+0x44>)
 8005c08:	6224      	str	r4, [r4, #32]
 8005c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8005c0c:	bd10      	pop	{r4, pc}
 8005c0e:	bf00      	nop
 8005c10:	08005df1 	.word	0x08005df1
 8005c14:	08005e13 	.word	0x08005e13
 8005c18:	08005e4b 	.word	0x08005e4b
 8005c1c:	08005e6f 	.word	0x08005e6f

08005c20 <stdio_exit_handler>:
 8005c20:	4a02      	ldr	r2, [pc, #8]	; (8005c2c <stdio_exit_handler+0xc>)
 8005c22:	4903      	ldr	r1, [pc, #12]	; (8005c30 <stdio_exit_handler+0x10>)
 8005c24:	4803      	ldr	r0, [pc, #12]	; (8005c34 <stdio_exit_handler+0x14>)
 8005c26:	f000 b869 	b.w	8005cfc <_fwalk_sglue>
 8005c2a:	bf00      	nop
 8005c2c:	20000014 	.word	0x20000014
 8005c30:	0800639d 	.word	0x0800639d
 8005c34:	20000020 	.word	0x20000020

08005c38 <cleanup_stdio>:
 8005c38:	6841      	ldr	r1, [r0, #4]
 8005c3a:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <cleanup_stdio+0x34>)
 8005c3c:	4299      	cmp	r1, r3
 8005c3e:	b510      	push	{r4, lr}
 8005c40:	4604      	mov	r4, r0
 8005c42:	d001      	beq.n	8005c48 <cleanup_stdio+0x10>
 8005c44:	f000 fbaa 	bl	800639c <_fflush_r>
 8005c48:	68a1      	ldr	r1, [r4, #8]
 8005c4a:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <cleanup_stdio+0x38>)
 8005c4c:	4299      	cmp	r1, r3
 8005c4e:	d002      	beq.n	8005c56 <cleanup_stdio+0x1e>
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fba3 	bl	800639c <_fflush_r>
 8005c56:	68e1      	ldr	r1, [r4, #12]
 8005c58:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <cleanup_stdio+0x3c>)
 8005c5a:	4299      	cmp	r1, r3
 8005c5c:	d004      	beq.n	8005c68 <cleanup_stdio+0x30>
 8005c5e:	4620      	mov	r0, r4
 8005c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c64:	f000 bb9a 	b.w	800639c <_fflush_r>
 8005c68:	bd10      	pop	{r4, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200144f4 	.word	0x200144f4
 8005c70:	2001455c 	.word	0x2001455c
 8005c74:	200145c4 	.word	0x200145c4

08005c78 <global_stdio_init.part.0>:
 8005c78:	b510      	push	{r4, lr}
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ca8 <global_stdio_init.part.0+0x30>)
 8005c7c:	4c0b      	ldr	r4, [pc, #44]	; (8005cac <global_stdio_init.part.0+0x34>)
 8005c7e:	4a0c      	ldr	r2, [pc, #48]	; (8005cb0 <global_stdio_init.part.0+0x38>)
 8005c80:	601a      	str	r2, [r3, #0]
 8005c82:	4620      	mov	r0, r4
 8005c84:	2200      	movs	r2, #0
 8005c86:	2104      	movs	r1, #4
 8005c88:	f7ff ffa6 	bl	8005bd8 <std>
 8005c8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005c90:	2201      	movs	r2, #1
 8005c92:	2109      	movs	r1, #9
 8005c94:	f7ff ffa0 	bl	8005bd8 <std>
 8005c98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ca2:	2112      	movs	r1, #18
 8005ca4:	f7ff bf98 	b.w	8005bd8 <std>
 8005ca8:	2001462c 	.word	0x2001462c
 8005cac:	200144f4 	.word	0x200144f4
 8005cb0:	08005c21 	.word	0x08005c21

08005cb4 <__sfp_lock_acquire>:
 8005cb4:	4801      	ldr	r0, [pc, #4]	; (8005cbc <__sfp_lock_acquire+0x8>)
 8005cb6:	f000 b9e3 	b.w	8006080 <__retarget_lock_acquire_recursive>
 8005cba:	bf00      	nop
 8005cbc:	20014635 	.word	0x20014635

08005cc0 <__sfp_lock_release>:
 8005cc0:	4801      	ldr	r0, [pc, #4]	; (8005cc8 <__sfp_lock_release+0x8>)
 8005cc2:	f000 b9de 	b.w	8006082 <__retarget_lock_release_recursive>
 8005cc6:	bf00      	nop
 8005cc8:	20014635 	.word	0x20014635

08005ccc <__sinit>:
 8005ccc:	b510      	push	{r4, lr}
 8005cce:	4604      	mov	r4, r0
 8005cd0:	f7ff fff0 	bl	8005cb4 <__sfp_lock_acquire>
 8005cd4:	6a23      	ldr	r3, [r4, #32]
 8005cd6:	b11b      	cbz	r3, 8005ce0 <__sinit+0x14>
 8005cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cdc:	f7ff bff0 	b.w	8005cc0 <__sfp_lock_release>
 8005ce0:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <__sinit+0x28>)
 8005ce2:	6223      	str	r3, [r4, #32]
 8005ce4:	4b04      	ldr	r3, [pc, #16]	; (8005cf8 <__sinit+0x2c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f5      	bne.n	8005cd8 <__sinit+0xc>
 8005cec:	f7ff ffc4 	bl	8005c78 <global_stdio_init.part.0>
 8005cf0:	e7f2      	b.n	8005cd8 <__sinit+0xc>
 8005cf2:	bf00      	nop
 8005cf4:	08005c39 	.word	0x08005c39
 8005cf8:	2001462c 	.word	0x2001462c

08005cfc <_fwalk_sglue>:
 8005cfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d00:	4607      	mov	r7, r0
 8005d02:	4688      	mov	r8, r1
 8005d04:	4614      	mov	r4, r2
 8005d06:	2600      	movs	r6, #0
 8005d08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d0c:	f1b9 0901 	subs.w	r9, r9, #1
 8005d10:	d505      	bpl.n	8005d1e <_fwalk_sglue+0x22>
 8005d12:	6824      	ldr	r4, [r4, #0]
 8005d14:	2c00      	cmp	r4, #0
 8005d16:	d1f7      	bne.n	8005d08 <_fwalk_sglue+0xc>
 8005d18:	4630      	mov	r0, r6
 8005d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d1e:	89ab      	ldrh	r3, [r5, #12]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d907      	bls.n	8005d34 <_fwalk_sglue+0x38>
 8005d24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	d003      	beq.n	8005d34 <_fwalk_sglue+0x38>
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	4638      	mov	r0, r7
 8005d30:	47c0      	blx	r8
 8005d32:	4306      	orrs	r6, r0
 8005d34:	3568      	adds	r5, #104	; 0x68
 8005d36:	e7e9      	b.n	8005d0c <_fwalk_sglue+0x10>

08005d38 <_puts_r>:
 8005d38:	6a03      	ldr	r3, [r0, #32]
 8005d3a:	b570      	push	{r4, r5, r6, lr}
 8005d3c:	6884      	ldr	r4, [r0, #8]
 8005d3e:	4605      	mov	r5, r0
 8005d40:	460e      	mov	r6, r1
 8005d42:	b90b      	cbnz	r3, 8005d48 <_puts_r+0x10>
 8005d44:	f7ff ffc2 	bl	8005ccc <__sinit>
 8005d48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d4a:	07db      	lsls	r3, r3, #31
 8005d4c:	d405      	bmi.n	8005d5a <_puts_r+0x22>
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	0598      	lsls	r0, r3, #22
 8005d52:	d402      	bmi.n	8005d5a <_puts_r+0x22>
 8005d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d56:	f000 f993 	bl	8006080 <__retarget_lock_acquire_recursive>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	0719      	lsls	r1, r3, #28
 8005d5e:	d513      	bpl.n	8005d88 <_puts_r+0x50>
 8005d60:	6923      	ldr	r3, [r4, #16]
 8005d62:	b18b      	cbz	r3, 8005d88 <_puts_r+0x50>
 8005d64:	3e01      	subs	r6, #1
 8005d66:	68a3      	ldr	r3, [r4, #8]
 8005d68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d6c:	3b01      	subs	r3, #1
 8005d6e:	60a3      	str	r3, [r4, #8]
 8005d70:	b9e9      	cbnz	r1, 8005dae <_puts_r+0x76>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	da2e      	bge.n	8005dd4 <_puts_r+0x9c>
 8005d76:	4622      	mov	r2, r4
 8005d78:	210a      	movs	r1, #10
 8005d7a:	4628      	mov	r0, r5
 8005d7c:	f000 f87b 	bl	8005e76 <__swbuf_r>
 8005d80:	3001      	adds	r0, #1
 8005d82:	d007      	beq.n	8005d94 <_puts_r+0x5c>
 8005d84:	250a      	movs	r5, #10
 8005d86:	e007      	b.n	8005d98 <_puts_r+0x60>
 8005d88:	4621      	mov	r1, r4
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f000 f8b0 	bl	8005ef0 <__swsetup_r>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d0e7      	beq.n	8005d64 <_puts_r+0x2c>
 8005d94:	f04f 35ff 	mov.w	r5, #4294967295
 8005d98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d9a:	07da      	lsls	r2, r3, #31
 8005d9c:	d405      	bmi.n	8005daa <_puts_r+0x72>
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	059b      	lsls	r3, r3, #22
 8005da2:	d402      	bmi.n	8005daa <_puts_r+0x72>
 8005da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005da6:	f000 f96c 	bl	8006082 <__retarget_lock_release_recursive>
 8005daa:	4628      	mov	r0, r5
 8005dac:	bd70      	pop	{r4, r5, r6, pc}
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	da04      	bge.n	8005dbc <_puts_r+0x84>
 8005db2:	69a2      	ldr	r2, [r4, #24]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	dc06      	bgt.n	8005dc6 <_puts_r+0x8e>
 8005db8:	290a      	cmp	r1, #10
 8005dba:	d004      	beq.n	8005dc6 <_puts_r+0x8e>
 8005dbc:	6823      	ldr	r3, [r4, #0]
 8005dbe:	1c5a      	adds	r2, r3, #1
 8005dc0:	6022      	str	r2, [r4, #0]
 8005dc2:	7019      	strb	r1, [r3, #0]
 8005dc4:	e7cf      	b.n	8005d66 <_puts_r+0x2e>
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f000 f854 	bl	8005e76 <__swbuf_r>
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d1c9      	bne.n	8005d66 <_puts_r+0x2e>
 8005dd2:	e7df      	b.n	8005d94 <_puts_r+0x5c>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	250a      	movs	r5, #10
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	6022      	str	r2, [r4, #0]
 8005ddc:	701d      	strb	r5, [r3, #0]
 8005dde:	e7db      	b.n	8005d98 <_puts_r+0x60>

08005de0 <puts>:
 8005de0:	4b02      	ldr	r3, [pc, #8]	; (8005dec <puts+0xc>)
 8005de2:	4601      	mov	r1, r0
 8005de4:	6818      	ldr	r0, [r3, #0]
 8005de6:	f7ff bfa7 	b.w	8005d38 <_puts_r>
 8005dea:	bf00      	nop
 8005dec:	2000006c 	.word	0x2000006c

08005df0 <__sread>:
 8005df0:	b510      	push	{r4, lr}
 8005df2:	460c      	mov	r4, r1
 8005df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005df8:	f000 f90c 	bl	8006014 <_read_r>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	bfab      	itete	ge
 8005e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e02:	89a3      	ldrhlt	r3, [r4, #12]
 8005e04:	181b      	addge	r3, r3, r0
 8005e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e0a:	bfac      	ite	ge
 8005e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e0e:	81a3      	strhlt	r3, [r4, #12]
 8005e10:	bd10      	pop	{r4, pc}

08005e12 <__swrite>:
 8005e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e16:	461f      	mov	r7, r3
 8005e18:	898b      	ldrh	r3, [r1, #12]
 8005e1a:	05db      	lsls	r3, r3, #23
 8005e1c:	4605      	mov	r5, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	4616      	mov	r6, r2
 8005e22:	d505      	bpl.n	8005e30 <__swrite+0x1e>
 8005e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e28:	2302      	movs	r3, #2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f000 f8e0 	bl	8005ff0 <_lseek_r>
 8005e30:	89a3      	ldrh	r3, [r4, #12]
 8005e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e3a:	81a3      	strh	r3, [r4, #12]
 8005e3c:	4632      	mov	r2, r6
 8005e3e:	463b      	mov	r3, r7
 8005e40:	4628      	mov	r0, r5
 8005e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e46:	f7ff beb5 	b.w	8005bb4 <_write_r>

08005e4a <__sseek>:
 8005e4a:	b510      	push	{r4, lr}
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e52:	f000 f8cd 	bl	8005ff0 <_lseek_r>
 8005e56:	1c43      	adds	r3, r0, #1
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	bf15      	itete	ne
 8005e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e66:	81a3      	strheq	r3, [r4, #12]
 8005e68:	bf18      	it	ne
 8005e6a:	81a3      	strhne	r3, [r4, #12]
 8005e6c:	bd10      	pop	{r4, pc}

08005e6e <__sclose>:
 8005e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e72:	f000 b8ad 	b.w	8005fd0 <_close_r>

08005e76 <__swbuf_r>:
 8005e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e78:	460e      	mov	r6, r1
 8005e7a:	4614      	mov	r4, r2
 8005e7c:	4605      	mov	r5, r0
 8005e7e:	b118      	cbz	r0, 8005e88 <__swbuf_r+0x12>
 8005e80:	6a03      	ldr	r3, [r0, #32]
 8005e82:	b90b      	cbnz	r3, 8005e88 <__swbuf_r+0x12>
 8005e84:	f7ff ff22 	bl	8005ccc <__sinit>
 8005e88:	69a3      	ldr	r3, [r4, #24]
 8005e8a:	60a3      	str	r3, [r4, #8]
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	071a      	lsls	r2, r3, #28
 8005e90:	d525      	bpl.n	8005ede <__swbuf_r+0x68>
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	b31b      	cbz	r3, 8005ede <__swbuf_r+0x68>
 8005e96:	6823      	ldr	r3, [r4, #0]
 8005e98:	6922      	ldr	r2, [r4, #16]
 8005e9a:	1a98      	subs	r0, r3, r2
 8005e9c:	6963      	ldr	r3, [r4, #20]
 8005e9e:	b2f6      	uxtb	r6, r6
 8005ea0:	4283      	cmp	r3, r0
 8005ea2:	4637      	mov	r7, r6
 8005ea4:	dc04      	bgt.n	8005eb0 <__swbuf_r+0x3a>
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	f000 fa77 	bl	800639c <_fflush_r>
 8005eae:	b9e0      	cbnz	r0, 8005eea <__swbuf_r+0x74>
 8005eb0:	68a3      	ldr	r3, [r4, #8]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	60a3      	str	r3, [r4, #8]
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	6022      	str	r2, [r4, #0]
 8005ebc:	701e      	strb	r6, [r3, #0]
 8005ebe:	6962      	ldr	r2, [r4, #20]
 8005ec0:	1c43      	adds	r3, r0, #1
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d004      	beq.n	8005ed0 <__swbuf_r+0x5a>
 8005ec6:	89a3      	ldrh	r3, [r4, #12]
 8005ec8:	07db      	lsls	r3, r3, #31
 8005eca:	d506      	bpl.n	8005eda <__swbuf_r+0x64>
 8005ecc:	2e0a      	cmp	r6, #10
 8005ece:	d104      	bne.n	8005eda <__swbuf_r+0x64>
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 fa62 	bl	800639c <_fflush_r>
 8005ed8:	b938      	cbnz	r0, 8005eea <__swbuf_r+0x74>
 8005eda:	4638      	mov	r0, r7
 8005edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ede:	4621      	mov	r1, r4
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	f000 f805 	bl	8005ef0 <__swsetup_r>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d0d5      	beq.n	8005e96 <__swbuf_r+0x20>
 8005eea:	f04f 37ff 	mov.w	r7, #4294967295
 8005eee:	e7f4      	b.n	8005eda <__swbuf_r+0x64>

08005ef0 <__swsetup_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4b2a      	ldr	r3, [pc, #168]	; (8005f9c <__swsetup_r+0xac>)
 8005ef4:	4605      	mov	r5, r0
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	460c      	mov	r4, r1
 8005efa:	b118      	cbz	r0, 8005f04 <__swsetup_r+0x14>
 8005efc:	6a03      	ldr	r3, [r0, #32]
 8005efe:	b90b      	cbnz	r3, 8005f04 <__swsetup_r+0x14>
 8005f00:	f7ff fee4 	bl	8005ccc <__sinit>
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f0a:	0718      	lsls	r0, r3, #28
 8005f0c:	d422      	bmi.n	8005f54 <__swsetup_r+0x64>
 8005f0e:	06d9      	lsls	r1, r3, #27
 8005f10:	d407      	bmi.n	8005f22 <__swsetup_r+0x32>
 8005f12:	2309      	movs	r3, #9
 8005f14:	602b      	str	r3, [r5, #0]
 8005f16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f1a:	81a3      	strh	r3, [r4, #12]
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e034      	b.n	8005f8c <__swsetup_r+0x9c>
 8005f22:	0758      	lsls	r0, r3, #29
 8005f24:	d512      	bpl.n	8005f4c <__swsetup_r+0x5c>
 8005f26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f28:	b141      	cbz	r1, 8005f3c <__swsetup_r+0x4c>
 8005f2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f2e:	4299      	cmp	r1, r3
 8005f30:	d002      	beq.n	8005f38 <__swsetup_r+0x48>
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 f8b4 	bl	80060a0 <_free_r>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	6363      	str	r3, [r4, #52]	; 0x34
 8005f3c:	89a3      	ldrh	r3, [r4, #12]
 8005f3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f42:	81a3      	strh	r3, [r4, #12]
 8005f44:	2300      	movs	r3, #0
 8005f46:	6063      	str	r3, [r4, #4]
 8005f48:	6923      	ldr	r3, [r4, #16]
 8005f4a:	6023      	str	r3, [r4, #0]
 8005f4c:	89a3      	ldrh	r3, [r4, #12]
 8005f4e:	f043 0308 	orr.w	r3, r3, #8
 8005f52:	81a3      	strh	r3, [r4, #12]
 8005f54:	6923      	ldr	r3, [r4, #16]
 8005f56:	b94b      	cbnz	r3, 8005f6c <__swsetup_r+0x7c>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f62:	d003      	beq.n	8005f6c <__swsetup_r+0x7c>
 8005f64:	4621      	mov	r1, r4
 8005f66:	4628      	mov	r0, r5
 8005f68:	f000 fa66 	bl	8006438 <__smakebuf_r>
 8005f6c:	89a0      	ldrh	r0, [r4, #12]
 8005f6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f72:	f010 0301 	ands.w	r3, r0, #1
 8005f76:	d00a      	beq.n	8005f8e <__swsetup_r+0x9e>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60a3      	str	r3, [r4, #8]
 8005f7c:	6963      	ldr	r3, [r4, #20]
 8005f7e:	425b      	negs	r3, r3
 8005f80:	61a3      	str	r3, [r4, #24]
 8005f82:	6923      	ldr	r3, [r4, #16]
 8005f84:	b943      	cbnz	r3, 8005f98 <__swsetup_r+0xa8>
 8005f86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f8a:	d1c4      	bne.n	8005f16 <__swsetup_r+0x26>
 8005f8c:	bd38      	pop	{r3, r4, r5, pc}
 8005f8e:	0781      	lsls	r1, r0, #30
 8005f90:	bf58      	it	pl
 8005f92:	6963      	ldrpl	r3, [r4, #20]
 8005f94:	60a3      	str	r3, [r4, #8]
 8005f96:	e7f4      	b.n	8005f82 <__swsetup_r+0x92>
 8005f98:	2000      	movs	r0, #0
 8005f9a:	e7f7      	b.n	8005f8c <__swsetup_r+0x9c>
 8005f9c:	2000006c 	.word	0x2000006c

08005fa0 <memcmp>:
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	3901      	subs	r1, #1
 8005fa4:	4402      	add	r2, r0
 8005fa6:	4290      	cmp	r0, r2
 8005fa8:	d101      	bne.n	8005fae <memcmp+0xe>
 8005faa:	2000      	movs	r0, #0
 8005fac:	e005      	b.n	8005fba <memcmp+0x1a>
 8005fae:	7803      	ldrb	r3, [r0, #0]
 8005fb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005fb4:	42a3      	cmp	r3, r4
 8005fb6:	d001      	beq.n	8005fbc <memcmp+0x1c>
 8005fb8:	1b18      	subs	r0, r3, r4
 8005fba:	bd10      	pop	{r4, pc}
 8005fbc:	3001      	adds	r0, #1
 8005fbe:	e7f2      	b.n	8005fa6 <memcmp+0x6>

08005fc0 <memset>:
 8005fc0:	4402      	add	r2, r0
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d100      	bne.n	8005fca <memset+0xa>
 8005fc8:	4770      	bx	lr
 8005fca:	f803 1b01 	strb.w	r1, [r3], #1
 8005fce:	e7f9      	b.n	8005fc4 <memset+0x4>

08005fd0 <_close_r>:
 8005fd0:	b538      	push	{r3, r4, r5, lr}
 8005fd2:	4d06      	ldr	r5, [pc, #24]	; (8005fec <_close_r+0x1c>)
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4608      	mov	r0, r1
 8005fda:	602b      	str	r3, [r5, #0]
 8005fdc:	f7fa fc85 	bl	80008ea <_close>
 8005fe0:	1c43      	adds	r3, r0, #1
 8005fe2:	d102      	bne.n	8005fea <_close_r+0x1a>
 8005fe4:	682b      	ldr	r3, [r5, #0]
 8005fe6:	b103      	cbz	r3, 8005fea <_close_r+0x1a>
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	bd38      	pop	{r3, r4, r5, pc}
 8005fec:	20014630 	.word	0x20014630

08005ff0 <_lseek_r>:
 8005ff0:	b538      	push	{r3, r4, r5, lr}
 8005ff2:	4d07      	ldr	r5, [pc, #28]	; (8006010 <_lseek_r+0x20>)
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	4608      	mov	r0, r1
 8005ff8:	4611      	mov	r1, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	602a      	str	r2, [r5, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	f7fa fc9a 	bl	8000938 <_lseek>
 8006004:	1c43      	adds	r3, r0, #1
 8006006:	d102      	bne.n	800600e <_lseek_r+0x1e>
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	b103      	cbz	r3, 800600e <_lseek_r+0x1e>
 800600c:	6023      	str	r3, [r4, #0]
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	20014630 	.word	0x20014630

08006014 <_read_r>:
 8006014:	b538      	push	{r3, r4, r5, lr}
 8006016:	4d07      	ldr	r5, [pc, #28]	; (8006034 <_read_r+0x20>)
 8006018:	4604      	mov	r4, r0
 800601a:	4608      	mov	r0, r1
 800601c:	4611      	mov	r1, r2
 800601e:	2200      	movs	r2, #0
 8006020:	602a      	str	r2, [r5, #0]
 8006022:	461a      	mov	r2, r3
 8006024:	f7fa fc44 	bl	80008b0 <_read>
 8006028:	1c43      	adds	r3, r0, #1
 800602a:	d102      	bne.n	8006032 <_read_r+0x1e>
 800602c:	682b      	ldr	r3, [r5, #0]
 800602e:	b103      	cbz	r3, 8006032 <_read_r+0x1e>
 8006030:	6023      	str	r3, [r4, #0]
 8006032:	bd38      	pop	{r3, r4, r5, pc}
 8006034:	20014630 	.word	0x20014630

08006038 <__libc_init_array>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	4d0d      	ldr	r5, [pc, #52]	; (8006070 <__libc_init_array+0x38>)
 800603c:	4c0d      	ldr	r4, [pc, #52]	; (8006074 <__libc_init_array+0x3c>)
 800603e:	1b64      	subs	r4, r4, r5
 8006040:	10a4      	asrs	r4, r4, #2
 8006042:	2600      	movs	r6, #0
 8006044:	42a6      	cmp	r6, r4
 8006046:	d109      	bne.n	800605c <__libc_init_array+0x24>
 8006048:	4d0b      	ldr	r5, [pc, #44]	; (8006078 <__libc_init_array+0x40>)
 800604a:	4c0c      	ldr	r4, [pc, #48]	; (800607c <__libc_init_array+0x44>)
 800604c:	f000 fa70 	bl	8006530 <_init>
 8006050:	1b64      	subs	r4, r4, r5
 8006052:	10a4      	asrs	r4, r4, #2
 8006054:	2600      	movs	r6, #0
 8006056:	42a6      	cmp	r6, r4
 8006058:	d105      	bne.n	8006066 <__libc_init_array+0x2e>
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006060:	4798      	blx	r3
 8006062:	3601      	adds	r6, #1
 8006064:	e7ee      	b.n	8006044 <__libc_init_array+0xc>
 8006066:	f855 3b04 	ldr.w	r3, [r5], #4
 800606a:	4798      	blx	r3
 800606c:	3601      	adds	r6, #1
 800606e:	e7f2      	b.n	8006056 <__libc_init_array+0x1e>
 8006070:	080066b8 	.word	0x080066b8
 8006074:	080066b8 	.word	0x080066b8
 8006078:	080066b8 	.word	0x080066b8
 800607c:	080066bc 	.word	0x080066bc

08006080 <__retarget_lock_acquire_recursive>:
 8006080:	4770      	bx	lr

08006082 <__retarget_lock_release_recursive>:
 8006082:	4770      	bx	lr

08006084 <memcpy>:
 8006084:	440a      	add	r2, r1
 8006086:	4291      	cmp	r1, r2
 8006088:	f100 33ff 	add.w	r3, r0, #4294967295
 800608c:	d100      	bne.n	8006090 <memcpy+0xc>
 800608e:	4770      	bx	lr
 8006090:	b510      	push	{r4, lr}
 8006092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006096:	f803 4f01 	strb.w	r4, [r3, #1]!
 800609a:	4291      	cmp	r1, r2
 800609c:	d1f9      	bne.n	8006092 <memcpy+0xe>
 800609e:	bd10      	pop	{r4, pc}

080060a0 <_free_r>:
 80060a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060a2:	2900      	cmp	r1, #0
 80060a4:	d044      	beq.n	8006130 <_free_r+0x90>
 80060a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060aa:	9001      	str	r0, [sp, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f1a1 0404 	sub.w	r4, r1, #4
 80060b2:	bfb8      	it	lt
 80060b4:	18e4      	addlt	r4, r4, r3
 80060b6:	f000 f8df 	bl	8006278 <__malloc_lock>
 80060ba:	4a1e      	ldr	r2, [pc, #120]	; (8006134 <_free_r+0x94>)
 80060bc:	9801      	ldr	r0, [sp, #4]
 80060be:	6813      	ldr	r3, [r2, #0]
 80060c0:	b933      	cbnz	r3, 80060d0 <_free_r+0x30>
 80060c2:	6063      	str	r3, [r4, #4]
 80060c4:	6014      	str	r4, [r2, #0]
 80060c6:	b003      	add	sp, #12
 80060c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060cc:	f000 b8da 	b.w	8006284 <__malloc_unlock>
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	d908      	bls.n	80060e6 <_free_r+0x46>
 80060d4:	6825      	ldr	r5, [r4, #0]
 80060d6:	1961      	adds	r1, r4, r5
 80060d8:	428b      	cmp	r3, r1
 80060da:	bf01      	itttt	eq
 80060dc:	6819      	ldreq	r1, [r3, #0]
 80060de:	685b      	ldreq	r3, [r3, #4]
 80060e0:	1949      	addeq	r1, r1, r5
 80060e2:	6021      	streq	r1, [r4, #0]
 80060e4:	e7ed      	b.n	80060c2 <_free_r+0x22>
 80060e6:	461a      	mov	r2, r3
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	b10b      	cbz	r3, 80060f0 <_free_r+0x50>
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	d9fa      	bls.n	80060e6 <_free_r+0x46>
 80060f0:	6811      	ldr	r1, [r2, #0]
 80060f2:	1855      	adds	r5, r2, r1
 80060f4:	42a5      	cmp	r5, r4
 80060f6:	d10b      	bne.n	8006110 <_free_r+0x70>
 80060f8:	6824      	ldr	r4, [r4, #0]
 80060fa:	4421      	add	r1, r4
 80060fc:	1854      	adds	r4, r2, r1
 80060fe:	42a3      	cmp	r3, r4
 8006100:	6011      	str	r1, [r2, #0]
 8006102:	d1e0      	bne.n	80060c6 <_free_r+0x26>
 8006104:	681c      	ldr	r4, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	6053      	str	r3, [r2, #4]
 800610a:	440c      	add	r4, r1
 800610c:	6014      	str	r4, [r2, #0]
 800610e:	e7da      	b.n	80060c6 <_free_r+0x26>
 8006110:	d902      	bls.n	8006118 <_free_r+0x78>
 8006112:	230c      	movs	r3, #12
 8006114:	6003      	str	r3, [r0, #0]
 8006116:	e7d6      	b.n	80060c6 <_free_r+0x26>
 8006118:	6825      	ldr	r5, [r4, #0]
 800611a:	1961      	adds	r1, r4, r5
 800611c:	428b      	cmp	r3, r1
 800611e:	bf04      	itt	eq
 8006120:	6819      	ldreq	r1, [r3, #0]
 8006122:	685b      	ldreq	r3, [r3, #4]
 8006124:	6063      	str	r3, [r4, #4]
 8006126:	bf04      	itt	eq
 8006128:	1949      	addeq	r1, r1, r5
 800612a:	6021      	streq	r1, [r4, #0]
 800612c:	6054      	str	r4, [r2, #4]
 800612e:	e7ca      	b.n	80060c6 <_free_r+0x26>
 8006130:	b003      	add	sp, #12
 8006132:	bd30      	pop	{r4, r5, pc}
 8006134:	20014638 	.word	0x20014638

08006138 <sbrk_aligned>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	4e0e      	ldr	r6, [pc, #56]	; (8006174 <sbrk_aligned+0x3c>)
 800613c:	460c      	mov	r4, r1
 800613e:	6831      	ldr	r1, [r6, #0]
 8006140:	4605      	mov	r5, r0
 8006142:	b911      	cbnz	r1, 800614a <sbrk_aligned+0x12>
 8006144:	f000 f9d6 	bl	80064f4 <_sbrk_r>
 8006148:	6030      	str	r0, [r6, #0]
 800614a:	4621      	mov	r1, r4
 800614c:	4628      	mov	r0, r5
 800614e:	f000 f9d1 	bl	80064f4 <_sbrk_r>
 8006152:	1c43      	adds	r3, r0, #1
 8006154:	d00a      	beq.n	800616c <sbrk_aligned+0x34>
 8006156:	1cc4      	adds	r4, r0, #3
 8006158:	f024 0403 	bic.w	r4, r4, #3
 800615c:	42a0      	cmp	r0, r4
 800615e:	d007      	beq.n	8006170 <sbrk_aligned+0x38>
 8006160:	1a21      	subs	r1, r4, r0
 8006162:	4628      	mov	r0, r5
 8006164:	f000 f9c6 	bl	80064f4 <_sbrk_r>
 8006168:	3001      	adds	r0, #1
 800616a:	d101      	bne.n	8006170 <sbrk_aligned+0x38>
 800616c:	f04f 34ff 	mov.w	r4, #4294967295
 8006170:	4620      	mov	r0, r4
 8006172:	bd70      	pop	{r4, r5, r6, pc}
 8006174:	2001463c 	.word	0x2001463c

08006178 <_malloc_r>:
 8006178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800617c:	1ccd      	adds	r5, r1, #3
 800617e:	f025 0503 	bic.w	r5, r5, #3
 8006182:	3508      	adds	r5, #8
 8006184:	2d0c      	cmp	r5, #12
 8006186:	bf38      	it	cc
 8006188:	250c      	movcc	r5, #12
 800618a:	2d00      	cmp	r5, #0
 800618c:	4607      	mov	r7, r0
 800618e:	db01      	blt.n	8006194 <_malloc_r+0x1c>
 8006190:	42a9      	cmp	r1, r5
 8006192:	d905      	bls.n	80061a0 <_malloc_r+0x28>
 8006194:	230c      	movs	r3, #12
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	2600      	movs	r6, #0
 800619a:	4630      	mov	r0, r6
 800619c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006274 <_malloc_r+0xfc>
 80061a4:	f000 f868 	bl	8006278 <__malloc_lock>
 80061a8:	f8d8 3000 	ldr.w	r3, [r8]
 80061ac:	461c      	mov	r4, r3
 80061ae:	bb5c      	cbnz	r4, 8006208 <_malloc_r+0x90>
 80061b0:	4629      	mov	r1, r5
 80061b2:	4638      	mov	r0, r7
 80061b4:	f7ff ffc0 	bl	8006138 <sbrk_aligned>
 80061b8:	1c43      	adds	r3, r0, #1
 80061ba:	4604      	mov	r4, r0
 80061bc:	d155      	bne.n	800626a <_malloc_r+0xf2>
 80061be:	f8d8 4000 	ldr.w	r4, [r8]
 80061c2:	4626      	mov	r6, r4
 80061c4:	2e00      	cmp	r6, #0
 80061c6:	d145      	bne.n	8006254 <_malloc_r+0xdc>
 80061c8:	2c00      	cmp	r4, #0
 80061ca:	d048      	beq.n	800625e <_malloc_r+0xe6>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	4631      	mov	r1, r6
 80061d0:	4638      	mov	r0, r7
 80061d2:	eb04 0903 	add.w	r9, r4, r3
 80061d6:	f000 f98d 	bl	80064f4 <_sbrk_r>
 80061da:	4581      	cmp	r9, r0
 80061dc:	d13f      	bne.n	800625e <_malloc_r+0xe6>
 80061de:	6821      	ldr	r1, [r4, #0]
 80061e0:	1a6d      	subs	r5, r5, r1
 80061e2:	4629      	mov	r1, r5
 80061e4:	4638      	mov	r0, r7
 80061e6:	f7ff ffa7 	bl	8006138 <sbrk_aligned>
 80061ea:	3001      	adds	r0, #1
 80061ec:	d037      	beq.n	800625e <_malloc_r+0xe6>
 80061ee:	6823      	ldr	r3, [r4, #0]
 80061f0:	442b      	add	r3, r5
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	f8d8 3000 	ldr.w	r3, [r8]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d038      	beq.n	800626e <_malloc_r+0xf6>
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	42a2      	cmp	r2, r4
 8006200:	d12b      	bne.n	800625a <_malloc_r+0xe2>
 8006202:	2200      	movs	r2, #0
 8006204:	605a      	str	r2, [r3, #4]
 8006206:	e00f      	b.n	8006228 <_malloc_r+0xb0>
 8006208:	6822      	ldr	r2, [r4, #0]
 800620a:	1b52      	subs	r2, r2, r5
 800620c:	d41f      	bmi.n	800624e <_malloc_r+0xd6>
 800620e:	2a0b      	cmp	r2, #11
 8006210:	d917      	bls.n	8006242 <_malloc_r+0xca>
 8006212:	1961      	adds	r1, r4, r5
 8006214:	42a3      	cmp	r3, r4
 8006216:	6025      	str	r5, [r4, #0]
 8006218:	bf18      	it	ne
 800621a:	6059      	strne	r1, [r3, #4]
 800621c:	6863      	ldr	r3, [r4, #4]
 800621e:	bf08      	it	eq
 8006220:	f8c8 1000 	streq.w	r1, [r8]
 8006224:	5162      	str	r2, [r4, r5]
 8006226:	604b      	str	r3, [r1, #4]
 8006228:	4638      	mov	r0, r7
 800622a:	f104 060b 	add.w	r6, r4, #11
 800622e:	f000 f829 	bl	8006284 <__malloc_unlock>
 8006232:	f026 0607 	bic.w	r6, r6, #7
 8006236:	1d23      	adds	r3, r4, #4
 8006238:	1af2      	subs	r2, r6, r3
 800623a:	d0ae      	beq.n	800619a <_malloc_r+0x22>
 800623c:	1b9b      	subs	r3, r3, r6
 800623e:	50a3      	str	r3, [r4, r2]
 8006240:	e7ab      	b.n	800619a <_malloc_r+0x22>
 8006242:	42a3      	cmp	r3, r4
 8006244:	6862      	ldr	r2, [r4, #4]
 8006246:	d1dd      	bne.n	8006204 <_malloc_r+0x8c>
 8006248:	f8c8 2000 	str.w	r2, [r8]
 800624c:	e7ec      	b.n	8006228 <_malloc_r+0xb0>
 800624e:	4623      	mov	r3, r4
 8006250:	6864      	ldr	r4, [r4, #4]
 8006252:	e7ac      	b.n	80061ae <_malloc_r+0x36>
 8006254:	4634      	mov	r4, r6
 8006256:	6876      	ldr	r6, [r6, #4]
 8006258:	e7b4      	b.n	80061c4 <_malloc_r+0x4c>
 800625a:	4613      	mov	r3, r2
 800625c:	e7cc      	b.n	80061f8 <_malloc_r+0x80>
 800625e:	230c      	movs	r3, #12
 8006260:	603b      	str	r3, [r7, #0]
 8006262:	4638      	mov	r0, r7
 8006264:	f000 f80e 	bl	8006284 <__malloc_unlock>
 8006268:	e797      	b.n	800619a <_malloc_r+0x22>
 800626a:	6025      	str	r5, [r4, #0]
 800626c:	e7dc      	b.n	8006228 <_malloc_r+0xb0>
 800626e:	605b      	str	r3, [r3, #4]
 8006270:	deff      	udf	#255	; 0xff
 8006272:	bf00      	nop
 8006274:	20014638 	.word	0x20014638

08006278 <__malloc_lock>:
 8006278:	4801      	ldr	r0, [pc, #4]	; (8006280 <__malloc_lock+0x8>)
 800627a:	f7ff bf01 	b.w	8006080 <__retarget_lock_acquire_recursive>
 800627e:	bf00      	nop
 8006280:	20014634 	.word	0x20014634

08006284 <__malloc_unlock>:
 8006284:	4801      	ldr	r0, [pc, #4]	; (800628c <__malloc_unlock+0x8>)
 8006286:	f7ff befc 	b.w	8006082 <__retarget_lock_release_recursive>
 800628a:	bf00      	nop
 800628c:	20014634 	.word	0x20014634

08006290 <__sflush_r>:
 8006290:	898a      	ldrh	r2, [r1, #12]
 8006292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006296:	4605      	mov	r5, r0
 8006298:	0710      	lsls	r0, r2, #28
 800629a:	460c      	mov	r4, r1
 800629c:	d458      	bmi.n	8006350 <__sflush_r+0xc0>
 800629e:	684b      	ldr	r3, [r1, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	dc05      	bgt.n	80062b0 <__sflush_r+0x20>
 80062a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	dc02      	bgt.n	80062b0 <__sflush_r+0x20>
 80062aa:	2000      	movs	r0, #0
 80062ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062b2:	2e00      	cmp	r6, #0
 80062b4:	d0f9      	beq.n	80062aa <__sflush_r+0x1a>
 80062b6:	2300      	movs	r3, #0
 80062b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062bc:	682f      	ldr	r7, [r5, #0]
 80062be:	6a21      	ldr	r1, [r4, #32]
 80062c0:	602b      	str	r3, [r5, #0]
 80062c2:	d032      	beq.n	800632a <__sflush_r+0x9a>
 80062c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	075a      	lsls	r2, r3, #29
 80062ca:	d505      	bpl.n	80062d8 <__sflush_r+0x48>
 80062cc:	6863      	ldr	r3, [r4, #4]
 80062ce:	1ac0      	subs	r0, r0, r3
 80062d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062d2:	b10b      	cbz	r3, 80062d8 <__sflush_r+0x48>
 80062d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062d6:	1ac0      	subs	r0, r0, r3
 80062d8:	2300      	movs	r3, #0
 80062da:	4602      	mov	r2, r0
 80062dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062de:	6a21      	ldr	r1, [r4, #32]
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b0      	blx	r6
 80062e4:	1c43      	adds	r3, r0, #1
 80062e6:	89a3      	ldrh	r3, [r4, #12]
 80062e8:	d106      	bne.n	80062f8 <__sflush_r+0x68>
 80062ea:	6829      	ldr	r1, [r5, #0]
 80062ec:	291d      	cmp	r1, #29
 80062ee:	d82b      	bhi.n	8006348 <__sflush_r+0xb8>
 80062f0:	4a29      	ldr	r2, [pc, #164]	; (8006398 <__sflush_r+0x108>)
 80062f2:	410a      	asrs	r2, r1
 80062f4:	07d6      	lsls	r6, r2, #31
 80062f6:	d427      	bmi.n	8006348 <__sflush_r+0xb8>
 80062f8:	2200      	movs	r2, #0
 80062fa:	6062      	str	r2, [r4, #4]
 80062fc:	04d9      	lsls	r1, r3, #19
 80062fe:	6922      	ldr	r2, [r4, #16]
 8006300:	6022      	str	r2, [r4, #0]
 8006302:	d504      	bpl.n	800630e <__sflush_r+0x7e>
 8006304:	1c42      	adds	r2, r0, #1
 8006306:	d101      	bne.n	800630c <__sflush_r+0x7c>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	b903      	cbnz	r3, 800630e <__sflush_r+0x7e>
 800630c:	6560      	str	r0, [r4, #84]	; 0x54
 800630e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006310:	602f      	str	r7, [r5, #0]
 8006312:	2900      	cmp	r1, #0
 8006314:	d0c9      	beq.n	80062aa <__sflush_r+0x1a>
 8006316:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800631a:	4299      	cmp	r1, r3
 800631c:	d002      	beq.n	8006324 <__sflush_r+0x94>
 800631e:	4628      	mov	r0, r5
 8006320:	f7ff febe 	bl	80060a0 <_free_r>
 8006324:	2000      	movs	r0, #0
 8006326:	6360      	str	r0, [r4, #52]	; 0x34
 8006328:	e7c0      	b.n	80062ac <__sflush_r+0x1c>
 800632a:	2301      	movs	r3, #1
 800632c:	4628      	mov	r0, r5
 800632e:	47b0      	blx	r6
 8006330:	1c41      	adds	r1, r0, #1
 8006332:	d1c8      	bne.n	80062c6 <__sflush_r+0x36>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0c5      	beq.n	80062c6 <__sflush_r+0x36>
 800633a:	2b1d      	cmp	r3, #29
 800633c:	d001      	beq.n	8006342 <__sflush_r+0xb2>
 800633e:	2b16      	cmp	r3, #22
 8006340:	d101      	bne.n	8006346 <__sflush_r+0xb6>
 8006342:	602f      	str	r7, [r5, #0]
 8006344:	e7b1      	b.n	80062aa <__sflush_r+0x1a>
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800634c:	81a3      	strh	r3, [r4, #12]
 800634e:	e7ad      	b.n	80062ac <__sflush_r+0x1c>
 8006350:	690f      	ldr	r7, [r1, #16]
 8006352:	2f00      	cmp	r7, #0
 8006354:	d0a9      	beq.n	80062aa <__sflush_r+0x1a>
 8006356:	0793      	lsls	r3, r2, #30
 8006358:	680e      	ldr	r6, [r1, #0]
 800635a:	bf08      	it	eq
 800635c:	694b      	ldreq	r3, [r1, #20]
 800635e:	600f      	str	r7, [r1, #0]
 8006360:	bf18      	it	ne
 8006362:	2300      	movne	r3, #0
 8006364:	eba6 0807 	sub.w	r8, r6, r7
 8006368:	608b      	str	r3, [r1, #8]
 800636a:	f1b8 0f00 	cmp.w	r8, #0
 800636e:	dd9c      	ble.n	80062aa <__sflush_r+0x1a>
 8006370:	6a21      	ldr	r1, [r4, #32]
 8006372:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006374:	4643      	mov	r3, r8
 8006376:	463a      	mov	r2, r7
 8006378:	4628      	mov	r0, r5
 800637a:	47b0      	blx	r6
 800637c:	2800      	cmp	r0, #0
 800637e:	dc06      	bgt.n	800638e <__sflush_r+0xfe>
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	e78e      	b.n	80062ac <__sflush_r+0x1c>
 800638e:	4407      	add	r7, r0
 8006390:	eba8 0800 	sub.w	r8, r8, r0
 8006394:	e7e9      	b.n	800636a <__sflush_r+0xda>
 8006396:	bf00      	nop
 8006398:	dfbffffe 	.word	0xdfbffffe

0800639c <_fflush_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	690b      	ldr	r3, [r1, #16]
 80063a0:	4605      	mov	r5, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	b913      	cbnz	r3, 80063ac <_fflush_r+0x10>
 80063a6:	2500      	movs	r5, #0
 80063a8:	4628      	mov	r0, r5
 80063aa:	bd38      	pop	{r3, r4, r5, pc}
 80063ac:	b118      	cbz	r0, 80063b6 <_fflush_r+0x1a>
 80063ae:	6a03      	ldr	r3, [r0, #32]
 80063b0:	b90b      	cbnz	r3, 80063b6 <_fflush_r+0x1a>
 80063b2:	f7ff fc8b 	bl	8005ccc <__sinit>
 80063b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0f3      	beq.n	80063a6 <_fflush_r+0xa>
 80063be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063c0:	07d0      	lsls	r0, r2, #31
 80063c2:	d404      	bmi.n	80063ce <_fflush_r+0x32>
 80063c4:	0599      	lsls	r1, r3, #22
 80063c6:	d402      	bmi.n	80063ce <_fflush_r+0x32>
 80063c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063ca:	f7ff fe59 	bl	8006080 <__retarget_lock_acquire_recursive>
 80063ce:	4628      	mov	r0, r5
 80063d0:	4621      	mov	r1, r4
 80063d2:	f7ff ff5d 	bl	8006290 <__sflush_r>
 80063d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063d8:	07da      	lsls	r2, r3, #31
 80063da:	4605      	mov	r5, r0
 80063dc:	d4e4      	bmi.n	80063a8 <_fflush_r+0xc>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	059b      	lsls	r3, r3, #22
 80063e2:	d4e1      	bmi.n	80063a8 <_fflush_r+0xc>
 80063e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063e6:	f7ff fe4c 	bl	8006082 <__retarget_lock_release_recursive>
 80063ea:	e7dd      	b.n	80063a8 <_fflush_r+0xc>

080063ec <__swhatbuf_r>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	460c      	mov	r4, r1
 80063f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063f4:	2900      	cmp	r1, #0
 80063f6:	b096      	sub	sp, #88	; 0x58
 80063f8:	4615      	mov	r5, r2
 80063fa:	461e      	mov	r6, r3
 80063fc:	da0d      	bge.n	800641a <__swhatbuf_r+0x2e>
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006404:	f04f 0100 	mov.w	r1, #0
 8006408:	bf0c      	ite	eq
 800640a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800640e:	2340      	movne	r3, #64	; 0x40
 8006410:	2000      	movs	r0, #0
 8006412:	6031      	str	r1, [r6, #0]
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	b016      	add	sp, #88	; 0x58
 8006418:	bd70      	pop	{r4, r5, r6, pc}
 800641a:	466a      	mov	r2, sp
 800641c:	f000 f848 	bl	80064b0 <_fstat_r>
 8006420:	2800      	cmp	r0, #0
 8006422:	dbec      	blt.n	80063fe <__swhatbuf_r+0x12>
 8006424:	9901      	ldr	r1, [sp, #4]
 8006426:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800642a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800642e:	4259      	negs	r1, r3
 8006430:	4159      	adcs	r1, r3
 8006432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006436:	e7eb      	b.n	8006410 <__swhatbuf_r+0x24>

08006438 <__smakebuf_r>:
 8006438:	898b      	ldrh	r3, [r1, #12]
 800643a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800643c:	079d      	lsls	r5, r3, #30
 800643e:	4606      	mov	r6, r0
 8006440:	460c      	mov	r4, r1
 8006442:	d507      	bpl.n	8006454 <__smakebuf_r+0x1c>
 8006444:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006448:	6023      	str	r3, [r4, #0]
 800644a:	6123      	str	r3, [r4, #16]
 800644c:	2301      	movs	r3, #1
 800644e:	6163      	str	r3, [r4, #20]
 8006450:	b002      	add	sp, #8
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	ab01      	add	r3, sp, #4
 8006456:	466a      	mov	r2, sp
 8006458:	f7ff ffc8 	bl	80063ec <__swhatbuf_r>
 800645c:	9900      	ldr	r1, [sp, #0]
 800645e:	4605      	mov	r5, r0
 8006460:	4630      	mov	r0, r6
 8006462:	f7ff fe89 	bl	8006178 <_malloc_r>
 8006466:	b948      	cbnz	r0, 800647c <__smakebuf_r+0x44>
 8006468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800646c:	059a      	lsls	r2, r3, #22
 800646e:	d4ef      	bmi.n	8006450 <__smakebuf_r+0x18>
 8006470:	f023 0303 	bic.w	r3, r3, #3
 8006474:	f043 0302 	orr.w	r3, r3, #2
 8006478:	81a3      	strh	r3, [r4, #12]
 800647a:	e7e3      	b.n	8006444 <__smakebuf_r+0xc>
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	6020      	str	r0, [r4, #0]
 8006480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006484:	81a3      	strh	r3, [r4, #12]
 8006486:	9b00      	ldr	r3, [sp, #0]
 8006488:	6163      	str	r3, [r4, #20]
 800648a:	9b01      	ldr	r3, [sp, #4]
 800648c:	6120      	str	r0, [r4, #16]
 800648e:	b15b      	cbz	r3, 80064a8 <__smakebuf_r+0x70>
 8006490:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006494:	4630      	mov	r0, r6
 8006496:	f000 f81d 	bl	80064d4 <_isatty_r>
 800649a:	b128      	cbz	r0, 80064a8 <__smakebuf_r+0x70>
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	f023 0303 	bic.w	r3, r3, #3
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	81a3      	strh	r3, [r4, #12]
 80064a8:	89a3      	ldrh	r3, [r4, #12]
 80064aa:	431d      	orrs	r5, r3
 80064ac:	81a5      	strh	r5, [r4, #12]
 80064ae:	e7cf      	b.n	8006450 <__smakebuf_r+0x18>

080064b0 <_fstat_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d07      	ldr	r5, [pc, #28]	; (80064d0 <_fstat_r+0x20>)
 80064b4:	2300      	movs	r3, #0
 80064b6:	4604      	mov	r4, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	602b      	str	r3, [r5, #0]
 80064be:	f7fa fa20 	bl	8000902 <_fstat>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d102      	bne.n	80064cc <_fstat_r+0x1c>
 80064c6:	682b      	ldr	r3, [r5, #0]
 80064c8:	b103      	cbz	r3, 80064cc <_fstat_r+0x1c>
 80064ca:	6023      	str	r3, [r4, #0]
 80064cc:	bd38      	pop	{r3, r4, r5, pc}
 80064ce:	bf00      	nop
 80064d0:	20014630 	.word	0x20014630

080064d4 <_isatty_r>:
 80064d4:	b538      	push	{r3, r4, r5, lr}
 80064d6:	4d06      	ldr	r5, [pc, #24]	; (80064f0 <_isatty_r+0x1c>)
 80064d8:	2300      	movs	r3, #0
 80064da:	4604      	mov	r4, r0
 80064dc:	4608      	mov	r0, r1
 80064de:	602b      	str	r3, [r5, #0]
 80064e0:	f7fa fa1f 	bl	8000922 <_isatty>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d102      	bne.n	80064ee <_isatty_r+0x1a>
 80064e8:	682b      	ldr	r3, [r5, #0]
 80064ea:	b103      	cbz	r3, 80064ee <_isatty_r+0x1a>
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
 80064f0:	20014630 	.word	0x20014630

080064f4 <_sbrk_r>:
 80064f4:	b538      	push	{r3, r4, r5, lr}
 80064f6:	4d06      	ldr	r5, [pc, #24]	; (8006510 <_sbrk_r+0x1c>)
 80064f8:	2300      	movs	r3, #0
 80064fa:	4604      	mov	r4, r0
 80064fc:	4608      	mov	r0, r1
 80064fe:	602b      	str	r3, [r5, #0]
 8006500:	f000 f808 	bl	8006514 <_sbrk>
 8006504:	1c43      	adds	r3, r0, #1
 8006506:	d102      	bne.n	800650e <_sbrk_r+0x1a>
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	b103      	cbz	r3, 800650e <_sbrk_r+0x1a>
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	bd38      	pop	{r3, r4, r5, pc}
 8006510:	20014630 	.word	0x20014630

08006514 <_sbrk>:
 8006514:	4a04      	ldr	r2, [pc, #16]	; (8006528 <_sbrk+0x14>)
 8006516:	6811      	ldr	r1, [r2, #0]
 8006518:	4603      	mov	r3, r0
 800651a:	b909      	cbnz	r1, 8006520 <_sbrk+0xc>
 800651c:	4903      	ldr	r1, [pc, #12]	; (800652c <_sbrk+0x18>)
 800651e:	6011      	str	r1, [r2, #0]
 8006520:	6810      	ldr	r0, [r2, #0]
 8006522:	4403      	add	r3, r0
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	4770      	bx	lr
 8006528:	20014640 	.word	0x20014640
 800652c:	20014648 	.word	0x20014648

08006530 <_init>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr

0800653c <_fini>:
 800653c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653e:	bf00      	nop
 8006540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006542:	bc08      	pop	{r3}
 8006544:	469e      	mov	lr, r3
 8006546:	4770      	bx	lr
